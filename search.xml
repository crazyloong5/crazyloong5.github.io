<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>SQL语言</title>
      <link href="/2022/12/20/learn/SQL/"/>
      <url>/2022/12/20/learn/SQL/</url>
      
        <content type="html"><![CDATA[<h1 id="SQL"><a href="#SQL" class="headerlink" title="SQL"></a>SQL</h1><h2 id="一、数据库和SQL"><a href="#一、数据库和SQL" class="headerlink" title="一、数据库和SQL"></a>一、数据库和SQL</h2><h3 id="1-1-数据库是什么"><a href="#1-1-数据库是什么" class="headerlink" title="1-1　数据库是什么"></a>1-1　数据库是什么</h3><ol><li>数据库是将大量<strong>数据</strong>保存起来，通过计算机加工而成的可以进行高效访问的<strong>数据集合</strong>（Database，<strong>DB</strong>）。</li></ol><ul><li>数据库是长期存储在计算机内、有组织的、可共享的大量数据的集合。数据库中的数据按照一定的数据模型组织、描述和储存，具有较小的冗余度，较高的数据独立性和易扩展性，并可为各种用户共享。</li></ul><ol start="2"><li>数据（<strong>Data</strong>）</li></ol><ul><li>数据是数据库中存储的基本对象</li><li>描述事物的符号记录称为数据</li><li>数据的含义称为数据的语义，数据与其语义是不可分的</li></ul><ol start="3"><li>用来管理数据库的计算机系统称为<strong>数据库管理系统</strong>（Database Management System，<strong>DBMS</strong>）。</li></ol><ul><li><p>数据库管理系统和操作系统一样是计算机的基础软件</p></li><li><p>主要功能</p><ul><li>数据定义功能</li><li>数据组织、存储和管理</li><li>数据操作功能</li><li>数据库的事务管理和运行管理</li><li>数据库的建立和维护功能</li><li>其他功能</li></ul><p>  DBMS的种类</p><ul><li><strong>层次数据库</strong>（Hierarchical Database，<strong>HDB</strong>）</li><li><strong>关系数据库</strong>（Relational Database，<strong>RDB</strong>）</li><li><strong>面向对象数据库</strong>（Object Oriented Database，<strong>OODB</strong>）</li><li><strong>XML数据库</strong>（XML Database，<strong>XMLDB</strong>）</li><li><strong>键值存储系统</strong>（Key-Value Store，<strong>KVS</strong>）</li></ul></li></ul><ol start="4"><li>数据库系统（DataBase System，<strong>DBS</strong>）</li></ol><ul><li>数据库系统是由数据库、数据库管理系统（及其应用开发工具）、应用程序和数据库管理员（DataBase Administrator，<strong>DBA</strong>）组成的存储、管理、处理和维护数据的系统</li></ul><p><img src="https://picbed.sinarcsinx.fun/markdown/202412101630827.png" alt="202412101630827"></p><h3 id="1-2-数据库的结构"><a href="#1-2-数据库的结构" class="headerlink" title="1-2　数据库的结构"></a>1-2　数据库的结构</h3><p>数据库管理技术的产生和发展</p><ol><li><p>人工管理阶段</p><ul><li>数据不保存</li><li>应用程序管理数据</li><li>数据不共享</li><li>数据不具有独立性</li></ul></li><li><p>文件系统阶段 </p><ul><li>数据共享性差，冗余度大</li><li>数据独立性差</li></ul></li><li><p>数据库系统阶段</p><ul><li>数据结构化</li><li>数据的共享性高、冗余度低且易扩充</li><li>数据独立性高</li><li>数据由数据库管理系统统一管理和控制<ol><li>数据的安全性保护</li><li>数据的完整性检查</li><li>并发控制</li><li>数据库恢复</li></ol></li></ul></li></ol><p>数据库管理系统在数据库建立、运用和维护时对数据进行统一控制，以保证数据的完整性和安全性，并在多用户同时使用数据库时进行并发控制，在发生故障后对数据库进行恢复。</p><p><strong>从文件系统到数据库系统标志着数据管理技术的飞跃</strong><br><strong>使信息系统从以加工数据的程序为中心转向围绕共享的数据库为中心的新阶段</strong></p><p>RDBMS的常见系统结构</p><p>​<strong>客户端 &#x2F; 服务器类型（C&#x2F;S类型）</strong></p><h3 id="补充-数据模型"><a href="#补充-数据模型" class="headerlink" title="补充 数据模型"></a>补充 数据模型</h3><p>*数据模型是对现实世界数据特征的抽象<br>数据模型是数据库系统的核心和基础</p><p><strong>两类数据模型：</strong></p><ol><li>概念模型<ol><li>实体(entity)：客观存在并可相互区别的实物称为实体</li><li>属性(attribute)：实体所具有的某一特性称为属性</li><li>码(key)：唯一标识实体的属性集称为码</li><li>实体型(entity key)：用实体名及其属性名集合来抽象和刻画同类实体，称为实体型</li><li>实体集(entity set)：同一类型实体的集合称为实体集</li><li>联系(relationship)：实体之间的联系通常是指不同实体集之间的联系（一对一，一对多，多对多等）</li></ol><ul><li>实体-联系方法(E-R方法、E-R模型)</li></ul></li><li>逻辑模型和物理模型</li></ol><p><strong>数据模型的组成要素</strong></p><ol><li>数据结构：描述数据库的组成对象以及对象之间的联系</li><li>数据操作：对数据库中各种对象（型）的实例（值）允许执行的操作的集合，包括操作及有关的操作规则</li><li>数据的完整性约束条件：数据的完整性约束条件是一组完整性规则</li></ol><p><strong>常用的数据模型</strong></p><ul><li>层次模型</li><li>网状模型（与层次模型统称为格式化模型）</li><li>关系模型</li><li>面向对象数据模型</li><li>对象关系数据模型</li><li>半结构化数据模型</li></ul><p><em>基本层次联系</em>：两个记录以及他们之间的一对多（包括一对一）的联系</p><p><strong>层次模型</strong></p><ol><li>有且只有一个结点没有双亲结点，这个节点称为根节点</li><li>根以外的其他节点有且只有一个双亲结点</li></ol><p><em>完整性约束</em>：</p><ol><li>层次模型的数据操纵主要有查询、插入、删除和更新</li><li>进行插入操作时，如果没有相应的双亲结点值就不能插入它的子女节点值</li><li>进行删除操纵时，如果删除双亲结点值，则相应的子女结点值也将被同时删除</li></ol><p><em>优点</em></p><ol><li>数据结构简单清晰</li><li>查询效率高</li><li>提供了良好的完整性支持<br><em>缺点</em></li><li>现实世界中很多联系是非层次的，不适用</li><li>对插入和删除的限制较多</li><li>查询子女结点必须通过双亲结点</li><li>层次命令趋于程序化</li></ol><p>层次模型像一棵倒立的树，结点的双亲是唯一的</p><p><strong>网状模型</strong></p><ol><li>允许一个以上的结点无双亲</li><li>一个节点可以有多于一个的双亲</li></ol><p><em>完整性约束</em></p><ol><li>支持记录码的概念，码即唯一标识记录的数据项的集合</li><li>保证一个联系中双亲记录和子女记录之间是一对多的联系</li><li>可以支持双亲记录和子女记录之间的某些约束条件</li></ol><p><em>优点</em></p><ol><li>能够更为直接地描述现实世界</li><li>具有良好的性能，存储效率较高<br><em>缺点</em></li><li>结构比较复杂，而且随着应用环境的扩大，数据库的结构就变得越来越复杂，不利于最终用户掌握</li><li>网状模型的DDL，DML复杂，并且要嵌入某一种高级语言中。用户不容易掌握，不容易使用</li><li>由于记录之间的联系是通过存取路径实现的，应用程序在访问数据时必须选择适当的存储路径，因此用户必须了解系统结构的细节，加重了编写应用程序的负担</li></ol><p><strong>关系模型</strong><br>建立在严格的数学概念的基础上</p><p>关系(relation)：一个关系对应通常说的一张表<br>元组(tuple)：表中的一行即为一个元组<br>属性(attribute)：表中一个列即为一个属性<br>码(key)：码键，表示某个属性组，可以唯一确定一个元组<br>域(domain)：一组具有相同数据类型的值的集合<br>分量：元组中的一个属性值<br>关系模式：对关系的描述，一般表示为 <code>关系名(属性名1，属性名2...属性n)</code></p><ol><li>关系模型要求关系必须是规范化的</li><li>关系的每一个分量必须是一个不可分的数据项</li></ol><table><thead><tr><th>关系术语</th><th>一般表格的术语</th></tr></thead><tbody><tr><td>关系名</td><td>表名</td></tr><tr><td>关系模式</td><td>表头（表格的描述）</td></tr><tr><td>关系</td><td>（一张）二维表</td></tr><tr><td>元组</td><td>记录或行</td></tr><tr><td>属性</td><td>列</td></tr><tr><td>属性名</td><td>列名</td></tr><tr><td>属性值</td><td>列值</td></tr><tr><td>分量</td><td>一条记录中的一个列值</td></tr><tr><td>非规范关系</td><td>表中有表</td></tr></tbody></table><p><em>完整性约束</em></p><ol><li>实体完整性</li><li>参照完整性</li><li>用户定义的完整性</li></ol><p><em>优点</em></p><ol><li>关系模型与格式化模型不同，它是建立在严格的数学概念的基础上的</li><li>关系模型的概念单一</li><li>关系模型的存取路径对用户透明，从而有更高的数据独立性、更好的安全保密性，也简化了程序员的工作和数据库开发建立的工作</li></ol><h3 id="补充-数据库系统的结构"><a href="#补充-数据库系统的结构" class="headerlink" title="补充 数据库系统的结构"></a>补充 数据库系统的结构</h3><p>在数据库中有”型“(type)和”值“(value)的概念</p><p>模式是相对稳定的，而实例是相对变动的</p><p><strong>数据库系统的三级模式结构</strong></p><ol><li><p>模式(schema)<br>模式也称逻辑模式，是数据库中全体数据的逻辑结构和特征的描述，是所有用户的公共数据试图</p></li><li><p>外模式(external schema)<br>外模式也称子模式(subschema)或用户模式，它是数据库用户能够看见和使用的局部数据的逻辑结构和特征的描述，是数据库用户的数据视图，是与某一应用有关的数据的逻辑表示</p></li><li><p>内模式(internal schema)<br>内模式也称存储模式(storage schema)，一个数据库只有一个内模式。它是数据物理结构和存储方式的描述，是数据在数据库内部的组织方式</p></li></ol><ul><li><p>外模式&#x2F;模式映像：当模式改变时，由数据库管理员对各个外模式&#x2F;模式的映像作相应改变，可以使外模式保持不变。应用程序是依据数据的外模式编写的，从而应用程序不必修改，保证了数据与程序的逻辑独立性，简称数据的逻辑独立性。</p></li><li><p>模式&#x2F;内模式映像：当数据库的存储结构改变时，由数据库管理员对模式&#x2F;内模式映像作相应的改变，可以使模式保持不变，从而应用程序也不必改变。保证了数据与程序的物理独立性，简称数据的物理独立性。</p></li></ul><h3 id="补充-关系数据结构及形式化定义"><a href="#补充-关系数据结构及形式化定义" class="headerlink" title="补充 关系数据结构及形式化定义"></a>补充 关系数据结构及形式化定义</h3><p><strong>关系模型的数据结构——关系</strong></p><ol><li>域（domain）：一组具有相同数据类型的值的集合</li><li>笛卡尔积（cartesian product）<br> 一个域允许的不同取值个数称为这个域的<strong>基数</strong>（cardinal number）</li><li>关系（relation）：<ol><li>某一属性组的值能唯一地标识一个元组，而其子集不能，则称该属性组为<strong>候选码</strong>（candidate key）</li><li>若一个关系有多个候选码，则选定其中一个为<strong>主码</strong>（primary key）</li><li>候选码的诸属性称为<strong>主属性</strong>。不包含在任何候选码中的属性称为<strong>非主属性</strong>（non-prime attribute）或<strong>非码属性</strong>（non-key attribute）</li><li>最极端的情况下，关系模式的所有属性是这个关系模式的候选码，称为<strong>全码</strong>（all-key）</li></ol></li><li>关系可以有三种类型：<ol><li>基本关系（基本表&#x2F;基表）<ul><li>列是同质的（每一列中的分量是同一类型的数据，来自同一个域）</li><li>不同的列可出自同一个域，称其中的每一列为一个属性，不同的属性要给予不同的属性名</li><li>列的顺序无所谓</li><li>任意两个元组的候选码不能取相同的值</li><li>行的顺序无所谓</li><li><strong>分量必须取原子值，即每一个分量都必须是不可分的数据项</strong></li></ul></li><li>查询表</li><li>视图表</li></ol></li><li>关系模式：R（U，D，DOM，F）</li></ol><h3 id="补充-关系的完整性"><a href="#补充-关系的完整性" class="headerlink" title="补充 关系的完整性"></a>补充 关系的完整性</h3><ol><li>关系模型中有三类完整性约束：<ol><li>实体完整性（entity integrity）</li><li>参照完整性（referential integrity）</li><li>用户定义的完整性（user-defined integrity）</li></ol><ul><li>实体完整性和参照完整性是关系模型必须满足的完整性约束条件（关系的两个不变性）</li></ul></li><li><strong>实体完整性</strong><ul><li>若属性（指一个或一组属性）A是基本关系R的主属性，则A不能取空值（null value）</li></ul></li><li><strong>参照完整性</strong><ul><li>若属性（或属性组）F是基本关系R的外码，他与基本关系S的主码K相对应（基本关系R和S不一定是不同的关系），则对于R中每个元组在F上的值必须：<ol><li>或者取空值（F的某个属性值均为空值）</li><li>或者等于S中某个元素的主码值</li><li>空值</li><li>非空值</li></ol></li></ul></li></ol><h3 id="1-3-SQL概要"><a href="#1-3-SQL概要" class="headerlink" title="1-3　SQL概要"></a>1-3　SQL概要</h3><ol><li><p>SQL语句及其种类</p><ul><li><p>**DDL（Data Definition Language，数据定义语言） **：</p><p>   CREATE：创建数据库和表等对象<br>   DROP： 删除数据库和表等对象<br>   ALTER： 修改数据库和表等对象的结构</p></li><li><p>**DML（Data Manipulation Language，数据操纵语言） **：</p><p>  SELECT：查询表中的数据<br>  INSERT：向表中插入新数据<br>   UPDATE：更新表中的数据<br>   DELETE：删除表中的数据</p></li><li><p><strong>DCL（Data Control Language，数据控制语言）</strong>：</p><p>   COMMIT： 确认对数据库中的数据进行的变更<br>   ROLLBACK：取消对数据库中的数据进行的变更<br>   GRANT： 赋予用户操作权限<br>   REVOKE： 取消用户的操作权限</p></li></ul></li><li><p>SQL的基本书写规则</p></li></ol><h3 id="1-4-表的创建"><a href="#1-4-表的创建" class="headerlink" title="1-4　表的创建"></a>1-4　表的创建</h3><ol><li><p>数据库的创建（CREATE DATABASE语句）</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> DATABASE <span class="operator">&lt;</span>数据库名称<span class="operator">&gt;</span>;</span><br></pre></td></tr></table></figure></li><li><p>表的创建（CREATE TABLE语句）</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="operator">&lt;</span>表名<span class="operator">&gt;</span></span><br><span class="line">（<span class="operator">&lt;</span>列名<span class="number">1</span><span class="operator">&gt;</span> <span class="operator">&lt;</span>数据类型<span class="operator">&gt;</span> <span class="operator">&lt;</span>该列所需约束<span class="operator">&gt;</span>,</span><br><span class="line"> <span class="operator">&lt;</span>列名<span class="number">2</span><span class="operator">&gt;</span> <span class="operator">&lt;</span>数据类型<span class="operator">&gt;</span> <span class="operator">&lt;</span>该列所需约束<span class="operator">&gt;</span>,</span><br><span class="line"> <span class="operator">&lt;</span>列名<span class="number">3</span><span class="operator">&gt;</span> <span class="operator">&lt;</span>数据类型<span class="operator">&gt;</span> <span class="operator">&lt;</span>该列所需约束<span class="operator">&gt;</span>,</span><br><span class="line"> <span class="operator">&lt;</span>列名<span class="number">4</span><span class="operator">&gt;</span> <span class="operator">&lt;</span>数据类型<span class="operator">&gt;</span> <span class="operator">&lt;</span>该列所需约束<span class="operator">&gt;</span>,</span><br><span class="line"> .</span><br><span class="line"> .</span><br><span class="line"> .</span><br><span class="line"> <span class="operator">&lt;</span>该表的约束<span class="number">1</span><span class="operator">&gt;</span>, <span class="operator">&lt;</span>该表的约束<span class="number">2</span><span class="operator">&gt;</span>，……）;</span><br></pre></td></tr></table></figure></li><li><p>命名规则</p></li><li><p>数据类型的指定</p></li></ol><ul><li>**INTEGER型:**用来指定存储整数的列的数据类型（数字型），不能存储小数。</li><li>**CHAR型:**用来指定存储字符串的列的数据类型（字符型）,字符串长度固定，长度不足时会用半角空格补足</li><li><strong>VARCHAR型：</strong>可变长字符串</li><li><strong>DATE型：</strong>用来指定存储日期（年月日）的列的数据类型（日期型）。</li></ul><ol start="5"><li>约束的设置</li></ol><ul><li><strong>NULL&#x2F;NOT NULL</strong></li><li><strong>PRIMARY KEY</strong></li></ul><h3 id="1-5-表的删除和更新"><a href="#1-5-表的删除和更新" class="headerlink" title="1-5　表的删除和更新"></a>1-5　表的删除和更新</h3><ol><li><p>表的删除（DROP TABLE语句）</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> <span class="operator">&lt;</span>表名<span class="operator">&gt;</span>;</span><br></pre></td></tr></table></figure></li><li><p>表定义的更新（ALTER TABLE语句）</p></li></ol><ul><li>添加列<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> <span class="operator">&lt;</span>表名<span class="operator">&gt;</span> <span class="keyword">ADD</span> <span class="keyword">COLUMN</span> <span class="operator">&lt;</span>列的定义<span class="operator">&gt;</span>;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><figcaption><span>Sever</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ALTER TABLE &lt;表名&gt; ADD &lt;列名&gt; ;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ALTER TABLE &lt;表名&gt; ADD （&lt;列名&gt;,&lt;列名&gt;,……）;</span><br></pre></td></tr></table></figure></li><li>删除列<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> <span class="operator">&lt;</span>表名<span class="operator">&gt;</span> <span class="keyword">DROP</span> <span class="keyword">COLUMN</span> <span class="operator">&lt;</span>列名<span class="operator">&gt;</span>;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><figcaption><span>Sever</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ALTER TABLE &lt;表名&gt; DROP &lt;列名&gt; ;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ALTER TABLE &lt;表名&gt; DROP （&lt;列名&gt;,&lt;列名&gt;,……）;</span><br></pre></td></tr></table></figure></li></ul><ol start="3"><li>变更表名<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ALTER TABLE Poduct RENAME TO Product;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">RENAME TABLE Poduct TO Product;</span><br></pre></td></tr></table></figure><figure class="highlight sql"><figcaption><span>Sever</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sp_rename <span class="string">&#x27;Poduct&#x27;</span>, <span class="string">&#x27;Product&#x27;</span>;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">RENAME TABLE Poduct to Product;</span><br></pre></td></tr></table></figure></li></ol><h2 id="二、查询基础"><a href="#二、查询基础" class="headerlink" title="二、查询基础"></a>二、查询基础</h2><h3 id="SELECT语句基础"><a href="#SELECT语句基础" class="headerlink" title="SELECT语句基础"></a>SELECT语句基础</h3><h4 id="基本的SELECT语句"><a href="#基本的SELECT语句" class="headerlink" title="基本的SELECT语句"></a>基本的SELECT语句</h4><p>基本的SELECT语句</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">&lt;</span>列名<span class="operator">&gt;</span>,……</span><br><span class="line"><span class="keyword">FROM</span> <span class="operator">&lt;</span>表名<span class="operator">&gt;</span>;</span><br></pre></td></tr></table></figure><p>查询全部的列</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span></span><br><span class="line"><span class="keyword">FROM</span> <span class="operator">&lt;</span>表名<span class="operator">&gt;</span>;</span><br></pre></td></tr></table></figure><p>为列设定别名</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> product_id <span class="keyword">AS</span> id,</span><br><span class="line">    product_name <span class="keyword">AS</span> name,</span><br><span class="line">    purchase_price <span class="keyword">AS</span> price</span><br><span class="line"><span class="keyword">FROM</span> <span class="operator">&lt;</span>表名<span class="operator">&gt;</span>;</span><br></pre></td></tr></table></figure><p>设定中文别名</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> product_id <span class="keyword">AS</span> &quot;商品编号&quot;,</span><br><span class="line">product_name <span class="keyword">AS</span> &quot;商品名称&quot;,</span><br><span class="line">purchase_price <span class="keyword">AS</span> &quot;进货单价&quot;</span><br><span class="line"><span class="keyword">FROM</span> <span class="operator">&lt;</span>表名<span class="operator">&gt;</span>;</span><br></pre></td></tr></table></figure><p>查询常数</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="string">&#x27;商品&#x27;</span> <span class="keyword">AS</span> string, </span><br><span class="line"><span class="number">38</span> <span class="keyword">AS</span> number, </span><br><span class="line"><span class="string">&#x27;2009-02-24&#x27;</span> <span class="keyword">AS</span> <span class="type">date</span>,</span><br><span class="line">product_id,</span><br><span class="line">product_name</span><br><span class="line"><span class="keyword">FROM</span> <span class="operator">&lt;</span>表名<span class="operator">&gt;</span>;</span><br></pre></td></tr></table></figure><p>使用DISTINCT删除product_type列中重复的数据</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">DISTINCT</span> <span class="operator">&lt;</span>列名<span class="operator">&gt;</span></span><br><span class="line"><span class="keyword">FROM</span> <span class="operator">&lt;</span>表名<span class="operator">&gt;</span>;</span><br></pre></td></tr></table></figure><p>在多列之前使用DISTINCT</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">DISTINCT</span> <span class="operator">&lt;</span>列名<span class="operator">&gt;</span>，……</span><br><span class="line"><span class="keyword">FROM</span> <span class="operator">&lt;</span>表名<span class="operator">&gt;</span>;</span><br></pre></td></tr></table></figure><p><strong>DISTINCT 关键字只能用在第一个列名之前。</strong></p><h4 id="select语句子句顺序"><a href="#select语句子句顺序" class="headerlink" title="select语句子句顺序:"></a>select语句子句顺序:</h4><table><thead><tr><th>子句</th><th>说明</th><th>是否必须使用</th></tr></thead><tbody><tr><td>select</td><td>要返回的列或表达式</td><td>是</td></tr><tr><td>from</td><td>要从中检索数据的表</td><td>仅在要从表中选择数据时使用</td></tr><tr><td>where</td><td>行级过滤</td><td>否</td></tr><tr><td>group by</td><td>分组说明</td><td>仅在按组计算聚集时使用</td></tr><tr><td>having</td><td>组级过滤</td><td>否</td></tr><tr><td>order by</td><td>输出排序顺序</td><td>否</td></tr><tr><td>limit</td><td>要检索的行数</td><td>否</td></tr></tbody></table><h4 id="select语句完整执行顺序："><a href="#select语句完整执行顺序：" class="headerlink" title="select语句完整执行顺序："></a><strong>select语句完整执行顺序：</strong></h4><p>​1、<strong>from</strong> 子句组装来自不同数据源的数据；<br>​    2、<strong>where</strong> 子句基于指定的条件对记录行进行筛选；<br>​    3、<strong>group by</strong> 子句将数据划分为多个分组；<br>​    4、使用<strong>聚集函数</strong>进行计算；<br>​    5、使用<strong>having</strong> 子句筛选分组；<br>​    6、计算所有的<strong>表达式</strong>；<br>​    7、<strong>select</strong> 的字段；<br>​    8、使用<strong>order by</strong> 对结果集进行排序。</p><p>SQL 语言不同于其他编程语言的最明显特征是处理代码的顺序。在大多数据库语言中，代码按编码顺序被处理。但在SQL 语句中，第一个被处理的子句式FROM，而不是第一出现的SELECT。SQL 查询处理的步骤序号：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">(<span class="number">1</span>) <span class="keyword">FROM</span> <span class="operator">&lt;</span>left_table<span class="operator">&gt;</span></span><br><span class="line">(<span class="number">2</span>) <span class="operator">&lt;</span>join_type<span class="operator">&gt;</span> <span class="keyword">JOIN</span> <span class="operator">&lt;</span>right_table<span class="operator">&gt;</span></span><br><span class="line">(<span class="number">3</span>) <span class="keyword">ON</span> <span class="operator">&lt;</span>join_condition<span class="operator">&gt;</span></span><br><span class="line">(<span class="number">4</span>) <span class="keyword">WHERE</span> <span class="operator">&lt;</span>where_condition<span class="operator">&gt;</span></span><br><span class="line">(<span class="number">5</span>) <span class="keyword">GROUP</span> <span class="keyword">BY</span> <span class="operator">&lt;</span>group_by_list<span class="operator">&gt;</span></span><br><span class="line">(<span class="number">6</span>) <span class="keyword">WITH</span> &#123;<span class="keyword">CUBE</span> <span class="operator">|</span> <span class="keyword">ROLLUP</span>&#125;</span><br><span class="line">(<span class="number">7</span>) <span class="keyword">HAVING</span> <span class="operator">&lt;</span>having_condition<span class="operator">&gt;</span></span><br><span class="line">(<span class="number">8</span>) <span class="keyword">SELECT</span></span><br><span class="line">(<span class="number">9</span>) <span class="keyword">DISTINCT</span></span><br><span class="line">(<span class="number">9</span>) <span class="keyword">ORDER</span> <span class="keyword">BY</span> <span class="operator">&lt;</span>order_by_list<span class="operator">&gt;</span></span><br><span class="line">(<span class="number">10</span>) <span class="operator">&lt;</span>TOP_specification<span class="operator">&gt;</span> <span class="operator">&lt;</span>select_list<span class="operator">&gt;</span></span><br></pre></td></tr></table></figure><p>以上每个步骤都会产生一个虚拟表，该虚拟表被用作下一个步骤的输入。这些虚拟表对调用者(客户端应用程序或者外部查询)不可用。只有最后一步生成的表才会会给调用者。如果没有在查询中指定某一个子句，将跳过相应的步骤。</p><p><strong>逻辑查询处理阶段简介：</strong></p><p>​    1、<strong>FROM</strong>：对FROM 子句中的前两个表执行笛卡尔积(交叉联接)，生成虚拟表VT1。<br>​    2、<strong>ON</strong>：对VT1 应用ON 筛选器，只有那些使为真才被插入到TV2。<br>​    3、<strong>OUTER (JOIN)</strong>:如果指定了OUTER JOIN(相对于CROSS JOIN 或INNER JOIN)，保留表中未找到匹配的行将作为外部行添加到VT2，生成TV3。如果FROM 子句包含两个以上的表，则对上一个联接生成的结果表和下一个表重复执行步骤1 到步骤3，直到处理完所有的表位置。<br>​    4、<strong>WHERE</strong>：对TV3 应用WHERE 筛选器，只有使为true 的行才插入TV4。<br>​    5、<strong>GROUP BY</strong>：按GROUP BY 子句中的列列表对TV4 中的行进行分组，生成TV5。<br>​    6、<strong>CUTE|ROLLUP</strong>：把超组插入VT5，生成VT6。<br>​    7、<strong>HAVING</strong>：对VT6 应用HAVING 筛选器，只有使为true 的组插入到VT7。<br>​    8、<strong>SELECT</strong>：处理SELECT 列表，产生VT8。<br>​    9、<strong>DISTINCT</strong>：将重复的行从VT8 中删除，产品VT9。<br>​    10、<strong>ORDER BY</strong>：将VT9 中的行按ORDER BY 子句中的列列表顺序，生成一个游标(VC10)。<br>​    11、<strong>TOP</strong>：从VC10 的开始处选择指定数量或比例的行，生成表TV11，并返回给调用者。</p><h4 id="根据WHERE语句来选择记录"><a href="#根据WHERE语句来选择记录" class="headerlink" title="根据WHERE语句来选择记录"></a>根据WHERE语句来选择记录</h4><p>SELECT语句中的WHERE子句</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">&lt;</span>列名<span class="operator">&gt;</span>, ……</span><br><span class="line"><span class="keyword">FROM</span> <span class="operator">&lt;</span>表名<span class="operator">&gt;</span></span><br><span class="line"><span class="keyword">WHERE</span> <span class="operator">&lt;</span>条件表达式<span class="operator">&gt;</span>;</span><br></pre></td></tr></table></figure><h4 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 本SELECT语句会从结果中删除重复行。</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* 本SELECT语句，</span></span><br><span class="line"><span class="comment"> 会从结果中删除重复行。*/</span></span><br></pre></td></tr></table></figure><h3 id="算术运算符和比较运算符"><a href="#算术运算符和比较运算符" class="headerlink" title="算术运算符和比较运算符"></a>算术运算符和比较运算符</h3><h4 id="算术运算符"><a href="#算术运算符" class="headerlink" title="算术运算符"></a>算术运算符</h4><p><code>+ - / *</code></p><p><strong>所有包含NULL的计算，结果肯定是NULL</strong></p><h4 id="比较运算符"><a href="#比较运算符" class="headerlink" title="比较运算符"></a>比较运算符</h4><p><code>= &gt; &lt; &gt;= &lt;= &lt;&gt;</code></p><p>选取NULL的记录</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> product_name, purchase_price</span><br><span class="line"><span class="keyword">FROM</span> Product</span><br><span class="line"><span class="keyword">WHERE</span> purchase_price <span class="keyword">IS</span> <span class="keyword">NULL</span>;</span><br></pre></td></tr></table></figure><p>选取不为NULL的记录</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> product_name, purchase_price</span><br><span class="line"><span class="keyword">FROM</span> Product</span><br><span class="line"><span class="keyword">WHERE</span> purchase_price <span class="keyword">IS</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span>;</span><br></pre></td></tr></table></figure><h3 id="逻辑运算符"><a href="#逻辑运算符" class="headerlink" title="逻辑运算符"></a>逻辑运算符</h3><p><code>NOT 与 &lt;&gt; 等价</code></p><p><code>AND 运算符在其两侧的查询条件都成立时整个查询条件才成立</code></p><p><code>OR 运算符在其两侧的查询条件有一个成立时整个查询条件都成立</code></p><p><code>() 增加运算优先级</code></p><p><strong>含有NULL时的真值</strong></p><p>AND</p><table><thead><tr><th>P</th><th>Q</th><th>P AND Q</th></tr></thead><tbody><tr><td>真</td><td>真</td><td>真</td></tr><tr><td>真</td><td>假</td><td>假</td></tr><tr><td>真</td><td>不确定</td><td>不确定</td></tr><tr><td>假</td><td>真</td><td>假</td></tr><tr><td>假</td><td>假</td><td>假</td></tr><tr><td>假</td><td>不确定</td><td>假</td></tr><tr><td>不确定</td><td>真</td><td>不确定</td></tr><tr><td>不确定</td><td>假</td><td>假</td></tr><tr><td>不确定</td><td>不确定</td><td>不确定</td></tr></tbody></table><p>OR</p><table><thead><tr><th>P</th><th>Q</th><th>P OR Q</th></tr></thead><tbody><tr><td>真</td><td>真</td><td>真</td></tr><tr><td>真</td><td>假</td><td>真</td></tr><tr><td>真</td><td>不确定</td><td>真</td></tr><tr><td>假</td><td>真</td><td>真</td></tr><tr><td>假</td><td>假</td><td>假</td></tr><tr><td>假</td><td>不确定</td><td>不确定</td></tr><tr><td>不确定</td><td>真</td><td>真</td></tr><tr><td>不确定</td><td>假</td><td>不确定</td></tr><tr><td>不确定</td><td>不确定</td><td>不确定</td></tr></tbody></table><h2 id="三、聚合与排序"><a href="#三、聚合与排序" class="headerlink" title="三、聚合与排序"></a>三、聚合与排序</h2><h3 id="聚合-集-函数"><a href="#聚合-集-函数" class="headerlink" title="聚合(集)函数"></a>聚合(集)函数</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">COUNT：计算表中的记录数（行数）</span><br><span class="line">SUM： 计算表中数值列中数据的合计值</span><br><span class="line">AVG： 计算表中数值列中数据的平均值</span><br><span class="line">MAX： 求出表中任意列中数据的最大值</span><br><span class="line">MIN： 求出表中任意列中数据的最小值</span><br></pre></td></tr></table></figure><p>计算全部数据的行数</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="built_in">COUNT</span>(<span class="operator">*</span>)</span><br><span class="line"><span class="keyword">FROM</span> <span class="operator">&lt;</span>表名<span class="operator">&gt;</span>;</span><br></pre></td></tr></table></figure><p><em>对于 COUNT 函数来说，参数列不同计算的结果也会发生变化</em></p><p><em>将包含NULL的列作为参数时，COUNT（<code>*</code>）和COUNT（&lt;列名&gt;）的结果并不相同</em></p><p>计算合计值</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="built_in">SUM</span>(列名)</span><br><span class="line"><span class="keyword">FROM</span> <span class="operator">&lt;</span>表名<span class="operator">&gt;</span>;</span><br></pre></td></tr></table></figure><p><em>对于 SUM 函数来说，即使包含 NULL，也可以计算出合计值。</em></p><p>计算平均值</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="built_in">AVG</span>(列名)</span><br><span class="line"><span class="keyword">FROM</span> <span class="operator">&lt;</span>表名<span class="operator">&gt;</span>;</span><br></pre></td></tr></table></figure><p>计算最大值和最小值</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="built_in">MAX</span>(列名),<span class="built_in">MIN</span>(列名)</span><br><span class="line"><span class="keyword">FROM</span> <span class="operator">&lt;</span>表名<span class="operator">&gt;</span>;</span><br></pre></td></tr></table></figure><p><em>是 SUM&#x2F;AVG 函数只能对数值类型的列使用，而 MAX&#x2F;MIN 函数原则上可以适用于任何数据类型的列。</em></p><p>计算去除重复数据后的数据行数</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="built_in">COUNT</span>(<span class="keyword">DISTINCT</span> 列名)</span><br><span class="line"><span class="keyword">FROM</span> <span class="operator">&lt;</span>表名<span class="operator">&gt;</span>;</span><br></pre></td></tr></table></figure><p>先计算数据行数再删除重复数据的结果</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">DISTINCT</span> <span class="built_in">COUNT</span>(列名)</span><br><span class="line"><span class="keyword">FROM</span> <span class="operator">&lt;</span>表名<span class="operator">&gt;</span>;</span><br></pre></td></tr></table></figure><p><em>不仅限于 COUNT 函数，所有的聚合函数都可以使用 DISTINCT。</em></p><h3 id="对表进行分组"><a href="#对表进行分组" class="headerlink" title="对表进行分组"></a>对表进行分组</h3><p>使用GROUP BY<a name="group"></a>子句进行汇总</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">&lt;</span>列名<span class="number">1</span><span class="operator">&gt;</span>, <span class="operator">&lt;</span>列名<span class="number">2</span><span class="operator">&gt;</span>, <span class="operator">&lt;</span>列名<span class="number">3</span><span class="operator">&gt;</span>, ……</span><br><span class="line"><span class="keyword">FROM</span> <span class="operator">&lt;</span>表名<span class="operator">&gt;</span></span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> <span class="operator">&lt;</span>列名<span class="number">1</span><span class="operator">&gt;</span>, <span class="operator">&lt;</span>列名<span class="number">2</span><span class="operator">&gt;</span>, <span class="operator">&lt;</span>列名<span class="number">3</span><span class="operator">&gt;</span>, ……;</span><br></pre></td></tr></table></figure><p><em>在 GROUP BY 子句中指定的列称为<strong>聚合键</strong>或者<strong>分组列</strong></em></p><p><em>GROUP BY 子句的书写位置也有严格要求，一定要写在FROM 语句之后（如果有 WHERE 子句的话需要写在 WHERE 子句之后）。</em></p><p><em>当聚合键中包含 NULL 时，也会将NULL 作为一组特定的数据</em></p><p>使用WHERE子句和GROUP BY子句进行汇总处理</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">&lt;</span>列名<span class="number">1</span><span class="operator">&gt;</span>, <span class="operator">&lt;</span>列名<span class="number">2</span><span class="operator">&gt;</span>, <span class="operator">&lt;</span>列名<span class="number">3</span><span class="operator">&gt;</span>, ……</span><br><span class="line"><span class="keyword">FROM</span> <span class="operator">&lt;</span>表名<span class="operator">&gt;</span></span><br><span class="line"><span class="keyword">WHERE</span> </span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> <span class="operator">&lt;</span>列名<span class="number">1</span><span class="operator">&gt;</span>, <span class="operator">&lt;</span>列名<span class="number">2</span><span class="operator">&gt;</span>, <span class="operator">&lt;</span>列名<span class="number">3</span><span class="operator">&gt;</span>, ……;</span><br></pre></td></tr></table></figure><h3 id="为聚合结果指定条件"><a href="#为聚合结果指定条件" class="headerlink" title="为聚合结果指定条件"></a>为聚合结果指定条件</h3><p>HAVING<a name="having"></a> 子句</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">&lt;</span>列名<span class="number">1</span><span class="operator">&gt;</span>, <span class="operator">&lt;</span>列名<span class="number">2</span><span class="operator">&gt;</span>, <span class="operator">&lt;</span>列名<span class="number">3</span><span class="operator">&gt;</span>, ……</span><br><span class="line"><span class="keyword">FROM</span> <span class="operator">&lt;</span>表名<span class="operator">&gt;</span></span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> <span class="operator">&lt;</span>列名<span class="number">1</span><span class="operator">&gt;</span>, <span class="operator">&lt;</span>列名<span class="number">2</span><span class="operator">&gt;</span>, <span class="operator">&lt;</span>列名<span class="number">3</span><span class="operator">&gt;</span>, ……</span><br><span class="line"><span class="keyword">HAVING</span> <span class="operator">&lt;</span>分组结果对应的条件<span class="operator">&gt;</span>;</span><br></pre></td></tr></table></figure><p><em>WHERE 子句 &#x3D; 指定行所对应的条件</em></p><p><em>HAVING 子句 &#x3D; 指定组所对应的条件</em></p><p><em>将条件写在 WHERE 子句中要比写在 HAVING 子句中的处理速度更快，返回结果所需的时间更短。</em></p><h3 id="对查询结果进行排序"><a href="#对查询结果进行排序" class="headerlink" title="对查询结果进行排序"></a>对查询结果进行排序</h3><p>ORDER BY<a name="order"></a> 子句</p><p>升序</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">&lt;</span>列名<span class="number">1</span><span class="operator">&gt;</span>, <span class="operator">&lt;</span>列名<span class="number">2</span><span class="operator">&gt;</span>, <span class="operator">&lt;</span>列名<span class="number">3</span><span class="operator">&gt;</span>, ……</span><br><span class="line"><span class="keyword">FROM</span> <span class="operator">&lt;</span>表名<span class="operator">&gt;</span></span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> <span class="operator">&lt;</span>排序基准列<span class="number">1</span><span class="operator">&gt;</span>, <span class="operator">&lt;</span>排序基准列<span class="number">2</span><span class="operator">&gt;</span>, …… (<span class="keyword">ASC</span>);</span><br></pre></td></tr></table></figure><p>降序</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">&lt;</span>列名<span class="number">1</span><span class="operator">&gt;</span>, <span class="operator">&lt;</span>列名<span class="number">2</span><span class="operator">&gt;</span>, <span class="operator">&lt;</span>列名<span class="number">3</span><span class="operator">&gt;</span>, ……</span><br><span class="line"><span class="keyword">FROM</span> <span class="operator">&lt;</span>表名<span class="operator">&gt;</span></span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> <span class="operator">&lt;</span>排序基准列<span class="number">1</span><span class="operator">&gt;</span>, <span class="operator">&lt;</span>排序基准列<span class="number">2</span><span class="operator">&gt;</span>, …… <span class="keyword">DESC</span>;</span><br></pre></td></tr></table></figure><p><em>规则是优先使用左侧的键，如果该列存在相同值的话，再接着参考右侧的键。</em></p><p><em>NULL 会在结果的开头或末尾汇总显示</em></p><p><em>ORDER BY子句中可以使用列的别名</em></p><p><em>SELECT 子句中未包含的列也可以在 ORDER BY子句中使用</em></p><p><em>ORDER BY 子句中也可以使用聚合函数</em></p><p><em>ORDER BY子句中可以使用列的编号</em></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 通过列名指定</span></span><br><span class="line"><span class="keyword">SELECT</span> product_id, product_name, sale_price, purchase_price</span><br><span class="line"><span class="keyword">FROM</span> Product</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> sale_price <span class="keyword">DESC</span>, product_id;</span><br><span class="line"><span class="comment">-- 通过列编号指定</span></span><br><span class="line"><span class="keyword">SELECT</span> product_id, product_name, sale_price, purchase_price</span><br><span class="line"><span class="keyword">FROM</span> Product</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> <span class="number">3</span> <span class="keyword">DESC</span>, <span class="number">1</span>;</span><br></pre></td></tr></table></figure><p><strong>REMEMBER : FROM → WHERE → GROUP BY → HAVING → SELECT → ORDER BY</strong></p><h2 id="四、数据更新"><a href="#四、数据更新" class="headerlink" title="四、数据更新"></a>四、数据更新</h2><h3 id="数据的插入（INSERT语句的使用方法）"><a href="#数据的插入（INSERT语句的使用方法）" class="headerlink" title="数据的插入（INSERT语句的使用方法）"></a>数据的插入（<strong>INSERT</strong>语句的使用方法）</h3><p>INSERT语句</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="operator">&lt;</span>表名<span class="operator">&gt;</span> (列<span class="number">1</span>, 列<span class="number">2</span>, 列<span class="number">3</span>, ……) <span class="keyword">VALUES</span> (值<span class="number">1</span>, 值<span class="number">2</span>, 值<span class="number">3</span>, ……);</span><br></pre></td></tr></table></figure><p><em>表名后面的列清单和 VALUES 子句中的值清单的列数必须保持一致</em></p><p>通常的 INSERT 和多行 INSERT</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 通常的INSERT</span></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> ProductIns <span class="keyword">VALUES</span> (<span class="string">&#x27;0002&#x27;</span>, <span class="string">&#x27;打孔器&#x27;</span>, <span class="string">&#x27;办公用品&#x27;</span>, <span class="number">500</span>, <span class="number">320</span>, <span class="string">&#x27;2009-09-11&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> ProductIns <span class="keyword">VALUES</span> (<span class="string">&#x27;0003&#x27;</span>, <span class="string">&#x27;运动T恤&#x27;</span>, <span class="string">&#x27;衣服&#x27;</span>, <span class="number">4000</span>, <span class="number">2800</span>, <span class="keyword">NULL</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> ProductIns <span class="keyword">VALUES</span> (<span class="string">&#x27;0004&#x27;</span>, <span class="string">&#x27;菜刀&#x27;</span>, <span class="string">&#x27;厨房用具&#x27;</span>, <span class="number">3000</span>, <span class="number">2800</span>, <span class="string">&#x27;2009-09-20&#x27;</span>);</span><br><span class="line"><span class="comment">-- 多行INSERT （Oracle以外）</span></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> ProductIns <span class="keyword">VALUES</span> </span><br><span class="line">(<span class="string">&#x27;0002&#x27;</span>, <span class="string">&#x27;打孔器&#x27;</span>, <span class="string">&#x27;办公用品&#x27;</span>, <span class="number">500</span>, <span class="number">320</span>, <span class="string">&#x27;2009-09-11&#x27;</span>),</span><br><span class="line">(<span class="string">&#x27;0003&#x27;</span>, <span class="string">&#x27;运动T恤&#x27;</span>, <span class="string">&#x27;衣服&#x27;</span>, <span class="number">4000</span>, <span class="number">2800</span>, <span class="keyword">NULL</span>),</span><br><span class="line">(<span class="string">&#x27;0004&#x27;</span>, <span class="string">&#x27;菜刀&#x27;</span>, <span class="string">&#x27;厨房用具&#x27;</span>, <span class="number">3000</span>, <span class="number">2800</span>, <span class="string">&#x27;2009-09-20&#x27;</span>);</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">INSERT ALL INTO ProductIns VALUES (&#x27;0002&#x27;, &#x27;打孔器&#x27;, &#x27;办公用品&#x27;, 500, 320, &#x27;2009-09-11&#x27;)</span><br><span class="line">   INTO ProductIns VALUES (&#x27;0003&#x27;, &#x27;运动T恤&#x27;, &#x27;衣服&#x27;, 4000, 2800, NULL)</span><br><span class="line">   INTO ProductIns VALUES (&#x27;0004&#x27;, &#x27;菜刀&#x27;, &#x27;厨房用具&#x27;, 3000, 2800, &#x27;2009-09-20&#x27;)</span><br><span class="line">SELECT * FROM DUAL;</span><br></pre></td></tr></table></figure><p>省略列清单（ 对表进行全列 INSERT 时，可以省略表名后的列清单。)</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 包含列清单</span></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> ProductIns (product_id, product_name, product_type, sale_price, purchase_price, regist_date) <span class="keyword">VALUES</span> (<span class="string">&#x27;0005&#x27;</span>, <span class="string">&#x27;高压锅&#x27;</span>, <span class="string">&#x27;厨房用具&#x27;</span>, <span class="number">6800</span>, <span class="number">5000</span>, <span class="string">&#x27;2009-01-15&#x27;</span>);</span><br><span class="line"><span class="comment">-- 省略列清单</span></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> ProductIns <span class="keyword">VALUES</span> (<span class="string">&#x27;0005&#x27;</span>, <span class="string">&#x27;高压锅&#x27;</span>, <span class="string">&#x27;厨房用具&#x27;</span>, <span class="number">6800</span>, <span class="number">5000</span>, <span class="string">&#x27;2009-01-15&#x27;</span>);</span><br></pre></td></tr></table></figure><p><em>INSERT 语句中想给某一列赋予 NULL 值时，可以直接在 VALUES 子句的值清单中写入 NULL。但是，想要插入 NULL 的列一定不能设置 NOT NULL 约束。</em></p><p>可以在创建表的 CREATE TABLE 语句中设置 DEFAULT 约束来设定默认值</p><p><em>插入默认值有显式和隐式两种方法</em></p><p>从其他表中复制数据</p><p>INSERT … SELECT 语句</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 将商品表中的数据复制到商品复制表中</span></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> ProductCopy (product_id, product_name, product_type, sale_price, purchase_price, regist_date)</span><br><span class="line"><span class="keyword">SELECT</span> product_id, product_name, product_type, sale_price, purchase_price, regist_date</span><br><span class="line"><span class="keyword">FROM</span> Product;</span><br></pre></td></tr></table></figure><p>插入其他表中数据合计值的 INSERT … SELECT 语句</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> ProductType (product_type, sum_sale_price, sum_purchase_price)</span><br><span class="line"><span class="keyword">SELECT</span> product_type, <span class="built_in">SUM</span>(sale_price), <span class="built_in">SUM</span>(purchase_price)</span><br><span class="line"><span class="keyword">FROM</span> Product</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> product_type;</span><br></pre></td></tr></table></figure><h3 id="数据的删除（DELETE语句的使用方法）"><a href="#数据的删除（DELETE语句的使用方法）" class="headerlink" title="数据的删除（DELETE语句的使用方法）"></a>数据的删除（<strong>DELETE</strong>语句的使用方法）</h3><p>DELETE语句的基本语法（保留数据表，仅删除全部数据行的 DELETE 语句）</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DELETE</span> <span class="keyword">FROM</span> <span class="operator">&lt;</span>表名<span class="operator">&gt;</span>;</span><br></pre></td></tr></table></figure><p>删除部分数据行的搜索型 DELETE</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DELETE</span> <span class="keyword">FROM</span> <span class="operator">&lt;</span>表名<span class="operator">&gt;</span></span><br><span class="line"><span class="keyword">WHERE</span> <span class="operator">&lt;</span>条件<span class="operator">&gt;</span>;</span><br></pre></td></tr></table></figure><p>只能删除表中全部数据的 TRUNCATE 语句</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">TRUNCATE &lt;表名&gt;;</span><br></pre></td></tr></table></figure><h3 id="数据的更新（UPDATE语句的使用方法）"><a href="#数据的更新（UPDATE语句的使用方法）" class="headerlink" title="数据的更新（UPDATE语句的使用方法）"></a>数据的更新（<strong>UPDATE</strong>语句的使用方法）</h3><p>改变表中数据的 UPDATE 语句</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">UPDATE</span> <span class="operator">&lt;</span>表名<span class="operator">&gt;</span></span><br><span class="line"><span class="keyword">SET</span> <span class="operator">&lt;</span>列名<span class="operator">&gt;</span> <span class="operator">=</span> <span class="operator">&lt;</span>表达式<span class="operator">&gt;</span>;</span><br></pre></td></tr></table></figure><p>更新部分数据行的搜索型 UPDATE</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">UPDATE</span> <span class="operator">&lt;</span>表名<span class="operator">&gt;</span></span><br><span class="line"><span class="keyword">SET</span> <span class="operator">&lt;</span>列名<span class="operator">&gt;</span> <span class="operator">=</span> <span class="operator">&lt;</span>表达式<span class="operator">&gt;</span></span><br><span class="line"><span class="keyword">WHERE</span> <span class="operator">&lt;</span>条件<span class="operator">&gt;</span>;</span><br></pre></td></tr></table></figure><p><em>使用 UPDATE 也可以将列更新为 NULL（该更新俗称为 NULL 清空）。</em></p><p>UPDATE 语句的 SET 子句支持同时将多个列作为更新对象。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 使用逗号对列进行分隔排列</span></span><br><span class="line"><span class="keyword">UPDATE</span> Product</span><br><span class="line"><span class="keyword">SET</span> sale_price <span class="operator">=</span> sale_price <span class="operator">*</span> <span class="number">10</span>,</span><br><span class="line">purchase_price <span class="operator">=</span> purchase_price <span class="operator">/</span> <span class="number">2</span></span><br><span class="line"><span class="keyword">WHERE</span> product_type <span class="operator">=</span> <span class="string">&#x27;厨房用具&#x27;</span>;</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 将列用()括起来的清单形式</span></span><br><span class="line"><span class="keyword">UPDATE</span> Product</span><br><span class="line"><span class="keyword">SET</span> (sale_price, purchase_price) <span class="operator">=</span> (sale_price <span class="operator">*</span> <span class="number">10</span>, purchase_price <span class="operator">/</span> <span class="number">2</span>)</span><br><span class="line"><span class="keyword">WHERE</span> product_type <span class="operator">=</span> <span class="string">&#x27;厨房用具&#x27;</span>;</span><br></pre></td></tr></table></figure><h3 id="事务"><a href="#事务" class="headerlink" title="事务"></a>事务</h3><p>事务是需要在同一个处理单元中执行的一系列更新处理的集合。通过使用事务，可以对数据库中的数据更新处理的提交和取消进行管理。</p><p>事务的语法</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">事务开始语句;</span><br><span class="line">DML语句①;</span><br><span class="line">DML语句②;</span><br><span class="line">DML语句③;</span><br><span class="line"> . . .</span><br><span class="line">事务结束语句（<span class="keyword">COMMIT</span>或者<span class="keyword">ROLLBACK</span>）;</span><br></pre></td></tr></table></figure><p>开始语句</p><figure class="highlight sql"><figcaption><span>Server、PostgreSQL</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">BEGIN</span> TRANSACTION;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">START TRANSACTION;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">无</span><br></pre></td></tr></table></figure><p>更新商品信息的事务</p><figure class="highlight sql"><figcaption><span>Server、PostgreSQL</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">BEGIN</span> TRANSACTION;</span><br><span class="line"> <span class="comment">-- 将运动T恤的销售单价降低1000日元</span></span><br><span class="line"><span class="keyword">UPDATE</span> Product</span><br><span class="line"><span class="keyword">SET</span> sale_price <span class="operator">=</span> sale_price <span class="operator">-</span> <span class="number">1000</span></span><br><span class="line"><span class="keyword">WHERE</span> product_name <span class="operator">=</span> <span class="string">&#x27;运动T恤&#x27;</span>;</span><br><span class="line"> <span class="comment">-- 将T恤衫的销售单价上浮1000日元</span></span><br><span class="line"><span class="keyword">UPDATE</span> Product</span><br><span class="line"><span class="keyword">SET</span> sale_price <span class="operator">=</span> sale_price <span class="operator">+</span> <span class="number">1000</span></span><br><span class="line"><span class="keyword">WHERE</span> product_name <span class="operator">=</span> <span class="string">&#x27;T恤衫&#x27;</span>;</span><br><span class="line"><span class="keyword">COMMIT</span>;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">START TRANSACTION;</span><br><span class="line"> -- 将运动T恤的销售单价降低1000日元</span><br><span class="line">UPDATE Product</span><br><span class="line">SET sale_price = sale_price - 1000</span><br><span class="line">WHERE product_name = &#x27;运动T恤&#x27;;</span><br><span class="line"> -- 将T恤衫的销售单价上浮1000日元</span><br><span class="line">UPDATE Product</span><br><span class="line">SET sale_price = sale_price + 1000</span><br><span class="line">WHERE product_name = &#x27;T恤衫&#x27;;</span><br><span class="line">COMMIT;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"> -- 将运动T恤的销售单价降低1000日元</span><br><span class="line">UPDATE Product</span><br><span class="line">SET sale_price = sale_price - 1000</span><br><span class="line">WHERE product_name = &#x27;运动T恤&#x27;;</span><br><span class="line"> -- 将T恤衫的销售单价上浮1000日元</span><br><span class="line">UPDATE Product</span><br><span class="line">SET sale_price = sale_price + 1000</span><br><span class="line">WHERE product_name = &#x27;T恤衫&#x27;;</span><br><span class="line">COMMIT;</span><br></pre></td></tr></table></figure><p><em><strong>COMMIT</strong> 是提交事务包含的全部更新处理的结束指令，相当于文件处理中的覆盖保存。一旦提交，就无法恢复到事务开始前的状态了。</em></p><p><em><strong>ROLLBACK</strong> 是取消事务包含的全部更新处理的结束指令，相当于文件处理中的放弃保存。一旦回滚，数据库就会恢复到事务开始之前的状态。</em></p><p>事务回滚的例子</p><figure class="highlight sql"><figcaption><span>Server、PostgreSQL</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">BEGIN</span> TRANSACTION;</span><br><span class="line"> <span class="comment">-- 将运动T恤的销售单价降低1000日元</span></span><br><span class="line"><span class="keyword">UPDATE</span> Product</span><br><span class="line"><span class="keyword">SET</span> sale_price <span class="operator">=</span> sale_price <span class="operator">-</span> <span class="number">1000</span></span><br><span class="line"><span class="keyword">WHERE</span> product_name <span class="operator">=</span> <span class="string">&#x27;运动T恤&#x27;</span>;</span><br><span class="line"> <span class="comment">-- 将T恤衫的销售单价上浮1000日元</span></span><br><span class="line"><span class="keyword">UPDATE</span> Product</span><br><span class="line"><span class="keyword">SET</span> sale_price <span class="operator">=</span> sale_price <span class="operator">+</span> <span class="number">1000</span></span><br><span class="line"><span class="keyword">WHERE</span> product_name <span class="operator">=</span> <span class="string">&#x27;T恤衫&#x27;</span>;</span><br><span class="line"><span class="keyword">ROLLBACK</span>;</span><br></pre></td></tr></table></figure><p><strong>ACID特性</strong></p><ul><li><p><strong>原子性（Atomicity）:</strong></p><p>  原子性是指在事务结束时，其中所包含的更新处理要么全部执行，要么完全不执行，也就是要么占有一切要么一无所有。</p></li><li><p><strong>一致性&#x2F;完整性（Consistency）:</strong></p><p>  一致性指的是事务中包含的处理要满足数据库提前设置的约束，如主键约束或者 NOT NULL 约束等。</p></li><li><p><strong>隔离性（Isolation）:</strong></p><p>  隔离性指的是保证不同事务之间互不干扰的特性。</p></li><li><p><strong>持久性（Durability）:</strong></p><p>  持久性也可以称为耐久性，指的是在事务（不论是提交还是回滚）结束后，DBMS 能够保证该时间点的数据状态会被保存的特性。即使由于系统故障导致数据丢失，数据库也一定能通过某种手段进行恢复。</p></li></ul><h2 id="五、复杂查询"><a href="#五、复杂查询" class="headerlink" title="五、复杂查询"></a>五、复杂查询</h2><h3 id="视图-保存好的-SELECT-语句"><a href="#视图-保存好的-SELECT-语句" class="headerlink" title="视图 ( 保存好的 SELECT 语句 )"></a>视图 ( 保存好的 SELECT 语句 )</h3><p>从 SQL的角度来看，视图和表是相同的，两者的区别在于表中保存的是实际的数据，而视图中保存的是SELECT语句（视图本身并不存储数据）。</p><p><strong>视图的优点:</strong></p><ul><li>由于视图无需保存数据，因此可以节省存储设备的容量。</li><li>可以将频繁使用的 SELECT 语句保存成视图，这样就不用每次都重新书写了。</li></ul><p>创建视图的 CREATE VIEW 语句</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">VIEW</span> 视图名称(<span class="operator">&lt;</span>视图列名<span class="number">1</span><span class="operator">&gt;</span>, <span class="operator">&lt;</span>视图列名<span class="number">2</span><span class="operator">&gt;</span>, ……)</span><br><span class="line"><span class="keyword">AS</span></span><br><span class="line"><span class="operator">&lt;</span><span class="keyword">SELECT</span>语句<span class="operator">&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">VIEW</span> ProductSum (product_type, cnt_product)</span><br><span class="line"><span class="keyword">AS</span></span><br><span class="line"><span class="keyword">SELECT</span> product_type, <span class="built_in">COUNT</span>(<span class="operator">*</span>)</span><br><span class="line"><span class="keyword">FROM</span> Product</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> product_type;</span><br></pre></td></tr></table></figure><p>使用视图</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> product_type, cnt_product</span><br><span class="line"><span class="keyword">FROM</span> ProductSum;</span><br></pre></td></tr></table></figure><p><em>多重视图会降低 SQL 的性能。</em></p><p><strong>TIP:</strong></p><ol><li>定义视图时不能使用 ORDER BY 子句</li><li>对视图进行更新。标准 SQL 中有这样的规定：如果定义视图的 SELECT 语句能够满足某些条件，那么这个视图就可以被更新。<ul><li>SELECT 子句中未使用 DISTINCT</li><li>FROM 子句中只有一张表</li><li>未使用 GROUP BY 子句</li><li>未使用 HAVING 子句</li></ul></li></ol><p>删除视图的DROP VIEW语句</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DROP</span> <span class="keyword">VIEW</span> 视图名称(<span class="operator">&lt;</span>视图列名<span class="number">1</span><span class="operator">&gt;</span>, <span class="operator">&lt;</span>视图列名<span class="number">2</span><span class="operator">&gt;</span>, ……);</span><br></pre></td></tr></table></figure><h3 id="子查询"><a href="#子查询" class="headerlink" title="子查询"></a>子查询</h3><p>一言以蔽之，子查询就是一次性视图（SELECT语句）。与视图不同，子查询在SELECT语句执行完毕之后就会消失。</p><p>视图 ProductSum 和确认用的 SELECT 语句</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 根据商品种类统计商品数量的视图</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">VIEW</span> ProductSum (product_type, cnt_product)</span><br><span class="line"><span class="keyword">AS</span></span><br><span class="line"><span class="keyword">SELECT</span> product_type, <span class="built_in">COUNT</span>(<span class="operator">*</span>)</span><br><span class="line"><span class="keyword">FROM</span> Product</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> product_type;</span><br><span class="line"><span class="comment">-- 确认创建好的视图</span></span><br><span class="line"><span class="keyword">SELECT</span> product_type, cnt_product</span><br><span class="line"><span class="keyword">FROM</span> ProductSum;</span><br></pre></td></tr></table></figure><p>能够实现同样功能的子查询</p><figure class="highlight sql"><figcaption><span>Server、DB2、PostgreSQL、MySQL</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 在FROM子句中直接书写定义视图的SELECT语句</span></span><br><span class="line"><span class="keyword">SELECT</span> product_type, cnt_product</span><br><span class="line"><span class="keyword">FROM</span> ( <span class="keyword">SELECT</span> product_type, <span class="built_in">COUNT</span>(<span class="operator">*</span>) <span class="keyword">AS</span> cnt_product</span><br><span class="line"> <span class="keyword">FROM</span> Product</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> product_type ) </span><br><span class="line"><span class="keyword">AS</span> ProductSum;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*在Oracle的FROM子句中，不能使用AS（会发生错误），因此，在Oracle中执行代</span></span><br><span class="line"><span class="comment">码时，需要将“) AS ProductSum;”变为“) ProductSum;”。*/</span></span><br></pre></td></tr></table></figure><p>尝试增加子查询的嵌套层数</p><figure class="highlight sql"><figcaption><span>Server、DB2、PostgreSQL、MySQL</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> product_type, cnt_product</span><br><span class="line"><span class="keyword">FROM</span> (<span class="keyword">SELECT</span> <span class="operator">*</span></span><br><span class="line"> <span class="keyword">FROM</span> (<span class="keyword">SELECT</span> product_type, <span class="built_in">COUNT</span>(<span class="operator">*</span>) <span class="keyword">AS</span> cnt_product</span><br><span class="line"> <span class="keyword">FROM</span> Product</span><br><span class="line"> <span class="keyword">GROUP</span> <span class="keyword">BY</span> product_type) </span><br><span class="line">          <span class="keyword">AS</span> ProductSum </span><br><span class="line">          <span class="keyword">WHERE</span> cnt_product <span class="operator">=</span> <span class="number">4</span>)</span><br><span class="line">    <span class="keyword">AS</span> ProductSum2;</span><br></pre></td></tr></table></figure><p><em>原则上子查询必须设定名称，因此请大家尽量从处理内容的角度出发为子查询设定恰当的名称。</em></p><p><strong>标量子查询 :</strong> 必须而且只能返回 1 行 1列的结果</p><p><em>由于返回的是单一的值，因此标量子查询的返回值可以用在 &#x3D; 或者 &lt;&gt; 这样需要单一值的比较运算符之中。</em></p><p><em>标量子查询的书写位置并不仅仅局限于 WHERE 子句中，通常任何可以使用单一值的位置都可以使用。</em></p><p><em>注意事项 : 该子查询绝对不能返回多行结果。</em></p><h3 id="关联子查询"><a href="#关联子查询" class="headerlink" title="关联子查询"></a>关联子查询</h3><p>通过关联子查询按照商品种类对平均销售单价进行比较</p><figure class="highlight sql"><figcaption><span>Server、DB2、PostgreSQL、MySQL</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> product_type, product_name, sale_price</span><br><span class="line"><span class="keyword">FROM</span> Product <span class="keyword">AS</span> P1</span><br><span class="line"><span class="keyword">WHERE</span> sale_price <span class="operator">&gt;</span> (<span class="keyword">SELECT</span> <span class="built_in">AVG</span>(sale_price)</span><br><span class="line"> <span class="keyword">FROM</span> Product <span class="keyword">AS</span> P2</span><br><span class="line"> <span class="keyword">WHERE</span> P1.product_type <span class="operator">=</span> P2.product_type</span><br><span class="line"> <span class="keyword">GROUP</span> <span class="keyword">BY</span> product_type);</span><br></pre></td></tr></table></figure><p><em>关联子查询也是用来对集合进行切分的</em></p><p><em>结合条件一定要写在子查询中</em></p><h2 id="六、函数、谓词、CASE表达式"><a href="#六、函数、谓词、CASE表达式" class="headerlink" title="六、函数、谓词、CASE表达式"></a>六、函数、谓词、<strong>CASE</strong>表达式</h2><h3 id="各种各样的函数"><a href="#各种各样的函数" class="headerlink" title="各种各样的函数"></a>各种各样的函数</h3><p><strong>函数大致可以分为以下几种：</strong></p><ul><li>算术函数（用来进行数值计算的函数）</li><li>字符串函数（用来进行字符串操作的函数）</li><li>日期函数（用来进行日期操作的函数）</li><li>转换函数（用来转换数据类型和值的函数）</li><li>聚合函数（用来进行数据聚合的函数）</li></ul><p><em>补：NUMERIC 是大多数 DBMS 都支持的一种数据类型，通过 NUMBERIC( 全体位数 , 小数位数 ) 的形式来指定数值的大小</em></p><p><strong>算术函数:</strong></p><p> <strong>ABS ( 绝对值 )</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">ABS</span>(数值<span class="operator">/</span>列名)</span><br></pre></td></tr></table></figure><p><strong>MOD ( 求余 )</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">MOD</span>(被除数<span class="operator">/</span>列名，除数<span class="operator">/</span>列名)</span><br></pre></td></tr></table></figure><p><em>SQL Server使用特殊的运算符（函数）“%”来计算余数</em></p><p><strong>ROUND ( 四舍五入 )</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ROUND(对象数值<span class="operator">/</span>列名，保留小数的位数)</span><br></pre></td></tr></table></figure><p><strong>字符串函数:</strong></p><p><strong>|| ( 拼接 )</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">字符串<span class="number">1</span><span class="operator">||</span>字符串<span class="number">2</span></span><br></pre></td></tr></table></figure><p><em>进行字符串拼接时，如果其中包含 NULL，那么得到的结果也是NULL。</em></p><p><strong>TIP:</strong>|| 函数在 SQL Server 和 MySQL 中无法使用。</p><p><em>SQL Server使用 “+” 运算符（函数）来连接字符串A。MySQL使用CONCAT()函数来完成字符串的拼接。在 SQL Server 2012及其之后的版本中也可以使用CONCAT()函数。</em></p><p><strong>LENGTH ( 字符串长度 )</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">LENGTH(字符串<span class="operator">/</span>列名)</span><br></pre></td></tr></table></figure><p><em>SQL Server使用 LEN() 函数来计算字符串的长度。</em></p><p><strong>LOWER ( 小写转换 )</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">LOWER</span>(字符串<span class="operator">/</span>列名)</span><br></pre></td></tr></table></figure><p><em>LOWER 函数只能针对英文字母使用</em></p><p><strong>UPPER ( 大写转换 )</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">UPPER</span>(字符串<span class="operator">/</span>列名)</span><br></pre></td></tr></table></figure><p><em>UPPER 函数只能针对英文字母使用</em></p><p><strong>REPLACE ( 字符串的替换 )</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">REPLACE(对象字符串<span class="operator">/</span>列名，替换前的字符串<span class="operator">/</span>列名，替换后的字符串<span class="operator">/</span>列名)</span><br></pre></td></tr></table></figure><p><strong>SUBSTRING ( 字符串的截取 )</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SUBSTRING（对象字符串/列名 FROM 截取的起始位置 FOR 截取的字符数）</span><br></pre></td></tr></table></figure><figure class="highlight sql"><figcaption><span>Server</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">SUBSTRING</span>(对象字符串<span class="operator">/</span>列名，截取的起始位置，截取的字符数)</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SUBSTR(对象字符串/列名，截取的起始位置，截取的字符数)</span><br></pre></td></tr></table></figure><p><strong>日期函数:</strong></p><p><strong>CURRENT_DATE ( 当前日期 )</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">CURRENT_DATE</span></span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT CURRENT_DATE;</span><br></pre></td></tr></table></figure><figure class="highlight sql"><figcaption><span>Server</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="built_in">CAST</span>(<span class="built_in">CURRENT_TIMESTAMP</span> <span class="keyword">AS</span> <span class="type">DATE</span>) <span class="keyword">AS</span> CUR_DATE;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">SELECT CURRENT_DATE</span><br><span class="line">FROM dual;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">SELECT CURRENT DATE</span><br><span class="line">FROM SYSIBM.SYSDUMMY1;</span><br></pre></td></tr></table></figure><p><strong>CURRENT_TIME ( 当前时间 )</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">CURRENT_TIME</span></span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT CURRENT_TIME;</span><br></pre></td></tr></table></figure><figure class="highlight sql"><figcaption><span>Server</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="built_in">CAST</span>(<span class="built_in">CURRENT_TIMESTAMP</span> <span class="keyword">AS</span> <span class="type">TIME</span>) <span class="keyword">AS</span> CUR_TIME;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">SELECT CURRENT_TIMESTAMP</span><br><span class="line">FROM dual;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">SELECT CURRENT TIME</span><br><span class="line">FROM SYSIBM.SYSDUMMY1;</span><br></pre></td></tr></table></figure><p><strong>CURRENT_TIMESTAMP ( 当前日期和时间 )</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">CURRENT_TIMESTAMP</span></span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><figcaption><span>Server</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT CURRENT_TIMESTAMP;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">SELECT CURRENT_TIMESTAMP</span><br><span class="line">FROM dual;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">SELECT CURRENT TIMESTAMP</span><br><span class="line">FROM SYSIBM.SYSDUMMY1;</span><br></pre></td></tr></table></figure><p><strong>EXTRACT ( 截取日期元素 )</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">EXTRACT</span>(日期元素 <span class="keyword">FROM</span> 日期)</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">SELECT CURRENT_TIMESTAMP,</span><br><span class="line">EXTRACT(YEAR FROM CURRENT_TIMESTAMP) AS year,</span><br><span class="line">EXTRACT(MONTH FROM CURRENT_TIMESTAMP) AS month,</span><br><span class="line">EXTRACT(DAY FROM CURRENT_TIMESTAMP) AS day,</span><br><span class="line">EXTRACT(HOUR FROM CURRENT_TIMESTAMP) AS hour,</span><br><span class="line">EXTRACT(MINUTE FROM CURRENT_TIMESTAMP) AS minute,</span><br><span class="line">EXTRACT(SECOND FROM CURRENT_TIMESTAMP) AS second;</span><br></pre></td></tr></table></figure><figure class="highlight sql"><figcaption><span>Server</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="built_in">CURRENT_TIMESTAMP</span>,</span><br><span class="line">DATEPART(<span class="keyword">YEAR</span> , <span class="built_in">CURRENT_TIMESTAMP</span>) <span class="keyword">AS</span> <span class="keyword">year</span>,</span><br><span class="line">DATEPART(<span class="keyword">MONTH</span> , <span class="built_in">CURRENT_TIMESTAMP</span>) <span class="keyword">AS</span> <span class="keyword">month</span>,</span><br><span class="line">DATEPART(<span class="keyword">DAY</span> , <span class="built_in">CURRENT_TIMESTAMP</span>) <span class="keyword">AS</span> <span class="keyword">day</span>,</span><br><span class="line">DATEPART(<span class="keyword">HOUR</span> , <span class="built_in">CURRENT_TIMESTAMP</span>) <span class="keyword">AS</span> <span class="keyword">hour</span>,</span><br><span class="line">DATEPART(<span class="keyword">MINUTE</span> , <span class="built_in">CURRENT_TIMESTAMP</span>) <span class="keyword">AS</span> <span class="keyword">minute</span>,</span><br><span class="line">DATEPART(<span class="keyword">SECOND</span> , <span class="built_in">CURRENT_TIMESTAMP</span>) <span class="keyword">AS</span> <span class="keyword">second</span>;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">SELECT CURRENT_TIMESTAMP,</span><br><span class="line">EXTRACT(YEAR FROM CURRENT_TIMESTAMP) AS year,</span><br><span class="line">EXTRACT(MONTH FROM CURRENT_TIMESTAMP) AS month,</span><br><span class="line">EXTRACT(DAY FROM CURRENT_TIMESTAMP) AS day,</span><br><span class="line">EXTRACT(HOUR FROM CURRENT_TIMESTAMP) AS hour,</span><br><span class="line">EXTRACT(MINUTE FROM CURRENT_TIMESTAMP) AS minute,</span><br><span class="line">EXTRACT(SECOND FROM CURRENT_TIMESTAMP) AS second</span><br><span class="line">FROM DUAL;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">SELECT CURRENT TIMESTAMP,</span><br><span class="line">EXTRACT(YEAR FROM CURRENT TIMESTAMP) AS year,</span><br><span class="line">EXTRACT(MONTH FROM CURRENT TIMESTAMP) AS month,</span><br><span class="line">EXTRACT(DAY FROM CURRENT TIMESTAMP) AS day,</span><br><span class="line">EXTRACT(HOUR FROM CURRENT TIMESTAMP) AS hour,</span><br><span class="line">EXTRACT(MINUTE FROM CURRENT TIMESTAMP) AS minute,</span><br><span class="line">EXTRACT(SECOND FROM CURRENT TIMESTAMP) AS second</span><br><span class="line">FROM SYSIBM.SYSDUMMY1;</span><br></pre></td></tr></table></figure><p><strong>转换函数:</strong></p><p>SQL 中主要有两层意思：一是数据类型的转换，简称为类型转换，在英语中称为 castA ；另一层意思是值的转换。</p><p><strong>CAST ( 类型转换 )</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">CAST（转换前的值 <span class="keyword">AS</span> 想要转换的数据类型）</span><br></pre></td></tr></table></figure><ol><li>将字符串类型转换为数值类型</li></ol><figure class="highlight sql"><figcaption><span>Server、PostgreSQL</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="built_in">CAST</span>(<span class="string">&#x27;0001&#x27;</span> <span class="keyword">AS</span> <span class="type">INTEGER</span>) <span class="keyword">AS</span> int_col;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT CAST(&#x27;0001&#x27; AS SIGNED INTEGER) AS int_col;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">SELECT CAST(&#x27;0001&#x27; AS INTEGER) AS int_col</span><br><span class="line">FROM DUAL;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">SELECT CAST(&#x27;0001&#x27; AS INTEGER) AS int_col</span><br><span class="line">FROM SYSIBM.SYSDUMMY1;</span><br></pre></td></tr></table></figure><ol start="2"><li>将字符串类型转换为日期类型</li></ol><figure class="highlight sql"><figcaption><span>Server、PostgreSQL、MySQL</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="built_in">CAST</span>(<span class="string">&#x27;2009-12-14&#x27;</span> <span class="keyword">AS</span> <span class="type">DATE</span>) <span class="keyword">AS</span> date_col;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">SELECT CAST(&#x27;2009-12-14&#x27; AS DATE) AS date_col </span><br><span class="line">FROM DUAL;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">SELECT CAST(&#x27;2009-12-14&#x27; AS DATE) AS date_col </span><br><span class="line">FROM SYSIBM.SYSDUMMY1;</span><br></pre></td></tr></table></figure><p><strong>COALESCE ( 将NULL转换为其他值 )</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">COALESCE</span>(数据<span class="number">1</span>，数据<span class="number">2</span>，数据<span class="number">3</span>……)</span><br></pre></td></tr></table></figure><p><em>该函数会返回可变参数 A 中左侧开始第1个不是 NULL 的值</em></p><figure class="highlight sql"><figcaption><span>Server、PostgreSQL、MySQL</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="built_in">COALESCE</span>(<span class="keyword">NULL</span>, <span class="number">1</span>) <span class="keyword">AS</span> col_1,</span><br><span class="line"><span class="built_in">COALESCE</span>(<span class="keyword">NULL</span>, <span class="string">&#x27;test&#x27;</span>, <span class="keyword">NULL</span>) <span class="keyword">AS</span> col_2,</span><br><span class="line"><span class="built_in">COALESCE</span>(<span class="keyword">NULL</span>, <span class="keyword">NULL</span>, <span class="string">&#x27;2009-11-01&#x27;</span>) <span class="keyword">AS</span> col_3;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">SELECT COALESCE(NULL, 1) AS col_1,</span><br><span class="line">COALESCE(NULL, &#x27;test&#x27;, NULL) AS col_2,</span><br><span class="line">COALESCE(NULL, NULL, &#x27;2009-11-01&#x27;) AS col_3 </span><br><span class="line">FROM DUAL;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">SELECT COALESCE(NULL, 1) AS col_1,</span><br><span class="line">COALESCE(NULL, &#x27;test&#x27;, NULL) AS col_2,</span><br><span class="line">COALESCE(NULL, NULL, &#x27;2009-11-01&#x27;) AS col_3 </span><br><span class="line">FROM SYSIBM.SYSDUMMY1;</span><br></pre></td></tr></table></figure><h3 id="谓词"><a href="#谓词" class="headerlink" title="谓词"></a>谓词</h3><p>谓词就是返回值为真值的函数。</p><p><strong>LIKE谓词 ( 字符串的部分一致查询 )</strong></p><ol><li>前方一致：选取出“<strong>ddd</strong>abc”</li></ol><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span></span><br><span class="line"><span class="keyword">FROM</span> SampleLike</span><br><span class="line"><span class="keyword">WHERE</span> strcol <span class="keyword">LIKE</span> <span class="string">&#x27;ddd%&#x27;</span>;</span><br></pre></td></tr></table></figure><ol start="2"><li>中间一致：选取出“abc<strong>ddd</strong>” “<strong>ddd</strong>abc” “ab<strong>ddd</strong>c”</li></ol><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span></span><br><span class="line"><span class="keyword">FROM</span> SampleLike</span><br><span class="line"><span class="keyword">WHERE</span> strcol <span class="keyword">LIKE</span> <span class="string">&#x27;%ddd%&#x27;</span>;</span><br></pre></td></tr></table></figure><ol start="3"><li>后方一致：选取出“abc<strong>ddd</strong>”</li></ol><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span></span><br><span class="line"><span class="keyword">FROM</span> SampleLike</span><br><span class="line"><span class="keyword">WHERE</span> strcol <span class="keyword">LIKE</span> <span class="string">&#x27;%ddd&#x27;</span>;</span><br></pre></td></tr></table></figure><p><em><strong>%</strong> 是代表 “0 字符以上的任意字符串”的特殊符号</em></p><p>***_*<em>（下划线）代表 “任意 1 个字符”</em></p><p>使用 LIKE 和 _（下划线）进行后方一致查询</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span></span><br><span class="line"><span class="keyword">FROM</span> SampleLike</span><br><span class="line"><span class="keyword">WHERE</span> strcol <span class="keyword">LIKE</span> <span class="string">&#x27;abc__&#x27;</span>;</span><br></pre></td></tr></table></figure><p><strong>BETWEEN谓词 ( 范围查询 )</strong></p><p>选取销售单价为100～1000 ( 闭区间 )日元的商品</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> product_name, sale_price</span><br><span class="line"><span class="keyword">FROM</span> Product</span><br><span class="line"><span class="keyword">WHERE</span> sale_price <span class="keyword">BETWEEN</span> <span class="number">100</span> <span class="keyword">AND</span> <span class="number">1000</span>;</span><br></pre></td></tr></table></figure><p><strong>IS NULL、IS NOT NULL （ 判断是否为NULL ）</strong></p><p><strong>IN谓词 ( OR的简便用法 )</strong></p><p>通过 OR 指定多个进货单价进行查询</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> product_name, purchase_price</span><br><span class="line"><span class="keyword">FROM</span> Product</span><br><span class="line"><span class="keyword">WHERE</span> purchase_price <span class="operator">=</span> <span class="number">320</span></span><br><span class="line"><span class="keyword">OR</span> purchase_price <span class="operator">=</span> <span class="number">500</span></span><br><span class="line"><span class="keyword">OR</span> purchase_price <span class="operator">=</span> <span class="number">5000</span>;</span><br></pre></td></tr></table></figure><p>通过 IN 来指定多个进货单价进行查询</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> product_name, purchase_price</span><br><span class="line"><span class="keyword">FROM</span> Product</span><br><span class="line"><span class="keyword">WHERE</span> purchase_price <span class="keyword">IN</span> (<span class="number">320</span>, <span class="number">500</span>, <span class="number">5000</span>);</span><br></pre></td></tr></table></figure><p><em>使用 IN 和 NOT IN 时是无法选取出 NULL 数据的</em></p><p><em>可以使用子查询作为 IN 谓词的参数以应对数据变更</em></p><p><strong>EXIST谓词</strong></p><p>为 EXIST 是只有 1 个参数的谓词。EXIST 只需要在右侧书写 1 个参数，该参数通常都会是一个子查询。</p><p>EXIST 只会判断是否存在满足子查询中 WHERE 子句指定的条件，只有存在这样的记录时才返回真</p><h3 id="CASE表达式"><a href="#CASE表达式" class="headerlink" title="CASE表达式"></a><strong>CASE</strong>表达式</h3><p>CASE 表达式是在区分情况时使用的，这种情况的区分在编程中通常称为<strong>（条件）分支</strong></p><p>CASE表达式的语法分为<strong>简单CASE表达式</strong>和<strong>搜索CASE表达式</strong>两种。</p><p><strong>搜索CASE表达式</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CASE</span> <span class="keyword">WHEN</span> <span class="operator">&lt;</span>求值表达式<span class="operator">&gt;</span> <span class="keyword">THEN</span> <span class="operator">&lt;</span>表达式<span class="operator">&gt;</span></span><br><span class="line"><span class="keyword">WHEN</span> <span class="operator">&lt;</span>求值表达式<span class="operator">&gt;</span> <span class="keyword">THEN</span> <span class="operator">&lt;</span>表达式<span class="operator">&gt;</span></span><br><span class="line"> <span class="keyword">WHEN</span> <span class="operator">&lt;</span>求值表达式<span class="operator">&gt;</span> <span class="keyword">THEN</span> <span class="operator">&lt;</span>表达式<span class="operator">&gt;</span></span><br><span class="line"> . . .</span><br><span class="line"> <span class="keyword">ELSE</span> <span class="operator">&lt;</span>表达式<span class="operator">&gt;</span></span><br><span class="line"><span class="keyword">END</span></span><br></pre></td></tr></table></figure><p><em>ELSE 子句也可以省略不写，这时会被默认为 ELSE NULL。</em></p><p><em>可以利用 CASE 表达式将 SELECT 语句结果中的行和列进行互换。</em></p><p><strong>简单CASE表达式</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CASE</span> <span class="operator">&lt;</span>表达式<span class="operator">&gt;</span></span><br><span class="line">    <span class="keyword">WHEN</span> <span class="operator">&lt;</span>表达式<span class="operator">&gt;</span> <span class="keyword">THEN</span> <span class="operator">&lt;</span>表达式<span class="operator">&gt;</span></span><br><span class="line"><span class="keyword">WHEN</span> <span class="operator">&lt;</span>表达式<span class="operator">&gt;</span> <span class="keyword">THEN</span> <span class="operator">&lt;</span>表达式<span class="operator">&gt;</span></span><br><span class="line"><span class="keyword">WHEN</span> <span class="operator">&lt;</span>表达式<span class="operator">&gt;</span> <span class="keyword">THEN</span> <span class="operator">&lt;</span>表达式<span class="operator">&gt;</span></span><br><span class="line"> . . .</span><br><span class="line"><span class="keyword">ELSE</span> <span class="operator">&lt;</span>表达式<span class="operator">&gt;</span></span><br><span class="line"><span class="keyword">END</span></span><br></pre></td></tr></table></figure><p><em>两者的不同之处在于，简单 CASE 表达式最初的 “CASE&lt; 表达式 &gt;” 也会作为求值的对象。</em></p><h2 id="七、集合运算"><a href="#七、集合运算" class="headerlink" title="七、集合运算"></a>七、集合运算</h2><h3 id="表的加减法"><a href="#表的加减法" class="headerlink" title="表的加减法"></a>表的加减法</h3><p><strong>UNION ( 选取表中非公共部分&#x2F;并集 )</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> (列<span class="number">1</span>, 列<span class="number">2</span>, 列<span class="number">3</span>, ……)</span><br><span class="line"><span class="keyword">FROM</span> <span class="operator">&lt;</span>表<span class="number">1</span><span class="operator">&gt;</span>...</span><br><span class="line"><span class="keyword">UNION</span></span><br><span class="line"><span class="keyword">SELECT</span> (列<span class="number">1</span>, 列<span class="number">2</span>, 列<span class="number">3</span>, ……)</span><br><span class="line"><span class="keyword">FROM</span> <span class="operator">&lt;</span>表<span class="number">2</span><span class="operator">&gt;</span>...;</span><br><span class="line">(<span class="keyword">ORDER</span> <span class="keyword">BY</span>)</span><br></pre></td></tr></table></figure><p><em>注意事项：</em></p><ol><li><em>作为运算对象的记录的列数必须相同</em></li><li><em>作为运算对象的记录中列的类型必须一致，一定要使用不同数据类型的列时，可以使用类型转换函数 CAST。</em></li><li><em>可以使用任何 SELECT 语句，但 ORDER BY 子句只能在最后使用一次</em></li></ol><p><strong>UNION ALL ( 包含重复行的集合运算 )</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> (列<span class="number">1</span>, 列<span class="number">2</span>, 列<span class="number">3</span>, ……)</span><br><span class="line"><span class="keyword">FROM</span> <span class="operator">&lt;</span>表<span class="number">1</span><span class="operator">&gt;</span>...</span><br><span class="line"><span class="keyword">UNION</span> <span class="keyword">ALL</span> <span class="comment">/*保留重复行*/</span></span><br><span class="line"><span class="keyword">SELECT</span> (列<span class="number">1</span>, 列<span class="number">2</span>, 列<span class="number">3</span>, ……)</span><br><span class="line"><span class="keyword">FROM</span> <span class="operator">&lt;</span>表<span class="number">2</span><span class="operator">&gt;</span>...;</span><br><span class="line">(<span class="keyword">ORDER</span> <span class="keyword">BY</span>)</span><br></pre></td></tr></table></figure><p><strong>INTERSECT ( 选取表中公共部分&#x2F;交集 )</strong></p><figure class="highlight plaintext"><figcaption><span>Server、DB2、PostgreSQL</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">SELECT (列1, 列2, 列3, ……)</span><br><span class="line">FROM &lt;表1&gt;...</span><br><span class="line">INTERSECT</span><br><span class="line">SELECT (列1, 列2, 列3, ……)</span><br><span class="line">FROM &lt;表2&gt;...;</span><br><span class="line">(ORDER BY)</span><br></pre></td></tr></table></figure><p><strong>INTERSECT ALL ( 包含重复行的集合运算 )</strong></p><figure class="highlight plaintext"><figcaption><span>Server、DB2、PostgreSQL</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">SELECT (列1, 列2, 列3, ……)</span><br><span class="line">FROM &lt;表1&gt;...</span><br><span class="line">INTERSECT ALL</span><br><span class="line">SELECT (列1, 列2, 列3, ……)</span><br><span class="line">FROM &lt;表2&gt;...;</span><br><span class="line">(ORDER BY)</span><br></pre></td></tr></table></figure><p><strong>EXCEPT ( 记录的减法&#x2F;差集 )</strong></p><figure class="highlight sql"><figcaption><span>Server、DB2、PostgreSQL</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> (列<span class="number">1</span>, 列<span class="number">2</span>, 列<span class="number">3</span>, ……)</span><br><span class="line"><span class="keyword">FROM</span> <span class="operator">&lt;</span>表<span class="number">1</span><span class="operator">&gt;</span>...</span><br><span class="line"><span class="keyword">EXCEPT</span></span><br><span class="line"><span class="keyword">SELECT</span> (列<span class="number">1</span>, 列<span class="number">2</span>, 列<span class="number">3</span>, ……)</span><br><span class="line"><span class="keyword">FROM</span> <span class="operator">&lt;</span>表<span class="number">2</span><span class="operator">&gt;</span>...;</span><br><span class="line">(<span class="keyword">ORDER</span> <span class="keyword">BY</span>)</span><br></pre></td></tr></table></figure><p><em>Oracle需用 MINUS 代替 EXCEPT</em></p><p><em>与 UNION 和 INTERSECT 不同，被减数和减数位置不同，得到的结果不同</em></p><h3 id="联结（以列为单位对表进行联结）"><a href="#联结（以列为单位对表进行联结）" class="headerlink" title="联结（以列为单位对表进行联结）"></a>联结（以列为单位对表进行联结）</h3><p>联结（JOIN）就是将其他表中的列添加过来，进行“添加列”的集合运算。UNION是以行（纵向）为单位进行操作，而联结则是以列（横向）为单位进行的。</p><p><strong>INNER JOIN ( 内联结 )</strong></p><p>将两张表进行内联结</p><figure class="highlight sql"><figcaption><span>Server、DB2、PostgreSQL、MySQL</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> (<span class="operator">&lt;</span>表<span class="number">1</span><span class="operator">&gt;</span>.列<span class="number">1</span>, <span class="operator">&lt;</span>表<span class="number">1</span><span class="operator">&gt;</span>.列<span class="number">2</span>, <span class="operator">&lt;</span>表<span class="number">1</span><span class="operator">&gt;</span>.列<span class="number">3</span>, ……<span class="operator">&lt;</span>表<span class="number">2</span><span class="operator">&gt;</span>.列<span class="number">1</span>, <span class="operator">&lt;</span>表<span class="number">2</span><span class="operator">&gt;</span>.列<span class="number">2</span>……)</span><br><span class="line"><span class="keyword">FROM</span> <span class="operator">&lt;</span>表<span class="number">1</span><span class="operator">&gt;</span> <span class="keyword">AS</span> SP <span class="keyword">INNER</span> <span class="keyword">JOIN</span> <span class="operator">&lt;</span>表<span class="number">2</span><span class="operator">&gt;</span> <span class="keyword">AS</span> P</span><br><span class="line"><span class="keyword">ON</span> SP.共有的列 <span class="operator">=</span> P.共有的列;</span><br></pre></td></tr></table></figure><p><em>要点：</em></p><ol><li><em>FROM 子句同时使用了两张表，别名并不是必需的</em></li><li><em><strong>ON</strong><a name= "on"></a> 是专门用来指定联结条件的，它能起到与 WHERE 相同的作用。需要指定多个键时，同样可以使用 AND、OR。在进行内联结时 ON 子句是必不可少的（如果没有 ON会发生错误），并且 ON 必须书写在 FROM 和 WHERE 之间。联结条件也可以使用 “&#x3D;” 来记述。在语法上，还可以使用 &lt;&#x3D; 和 BETWEEN 等谓词。</em></li><li><em>为了避免混乱，在使用联结时按照“&lt; 表的别名 &gt;.&lt; 列名 &gt;”的格式来书写 SELECT 子句中全部的列。</em></li></ol><p><strong>OUTER JOIN ( 外联结 )</strong></p><figure class="highlight sql"><figcaption><span>Server、DB2、PostgreSQL、MySQL</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> (<span class="operator">&lt;</span>表<span class="number">1</span><span class="operator">&gt;</span>.列<span class="number">1</span>, <span class="operator">&lt;</span>表<span class="number">1</span><span class="operator">&gt;</span>.列<span class="number">2</span>, <span class="operator">&lt;</span>表<span class="number">1</span><span class="operator">&gt;</span>.列<span class="number">3</span>, ……<span class="operator">&lt;</span>表<span class="number">2</span><span class="operator">&gt;</span>.列<span class="number">1</span>, <span class="operator">&lt;</span>表<span class="number">2</span><span class="operator">&gt;</span>.列<span class="number">2</span>……)</span><br><span class="line"><span class="keyword">FROM</span> <span class="operator">&lt;</span>表<span class="number">1</span><span class="operator">&gt;</span> <span class="keyword">AS</span> SP <span class="keyword">RIGHT</span><span class="operator">/</span><span class="keyword">LEFT</span> <span class="keyword">OUTER</span> <span class="keyword">JOIN</span> <span class="operator">&lt;</span>表<span class="number">2</span><span class="operator">&gt;</span> <span class="keyword">AS</span> P</span><br><span class="line"><span class="keyword">ON</span> SP.共有的列 <span class="operator">=</span> P.共有的列;</span><br></pre></td></tr></table></figure><p><em>要点：</em></p><ol><li><em>内联结只能选取出同时存在于两张表中的数据。对于外联结来说，只要数据存在于某一张表当中，就能够读取出来。</em></li><li>*最终的结果中会包含主表内所有的数据。指定主表的关键字是 <strong>LEFT</strong> 和 <strong>RIGHT</strong>。使用 <strong>LEFT</strong> 时 FROM 子句中写在左侧的表是主表，使用  <strong>RIGHT</strong> 时右侧的表是主表。*</li></ol><p><strong>3张以上的表的联结</strong></p><p>对3张表进行内联结</p><figure class="highlight sql"><figcaption><span>Server、DB2、PostgreSQL、MySQL</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> (<span class="operator">&lt;</span>表<span class="number">1</span><span class="operator">&gt;</span>.列<span class="number">1</span>, <span class="operator">&lt;</span>表<span class="number">1</span><span class="operator">&gt;</span>.列<span class="number">2</span>, <span class="operator">&lt;</span>表<span class="number">1</span><span class="operator">&gt;</span>.列<span class="number">3</span>, ……<span class="operator">&lt;</span>表<span class="number">2</span><span class="operator">&gt;</span>.列<span class="number">1</span>, <span class="operator">&lt;</span>表<span class="number">2</span><span class="operator">&gt;</span>.列<span class="number">2</span>……<span class="operator">&lt;</span>表<span class="number">3</span><span class="operator">&gt;</span>.列<span class="number">1</span>, <span class="operator">&lt;</span>表<span class="number">3</span><span class="operator">&gt;</span>.列<span class="number">2</span>……)</span><br><span class="line"><span class="keyword">FROM</span> <span class="operator">&lt;</span>表<span class="number">1</span><span class="operator">&gt;</span> <span class="keyword">AS</span> SP <span class="keyword">INNER</span> <span class="keyword">JOIN</span> <span class="operator">&lt;</span>表<span class="number">2</span><span class="operator">&gt;</span> <span class="keyword">AS</span> P</span><br><span class="line"><span class="keyword">ON</span> SP.共有的列 <span class="operator">=</span> P.共有的列;</span><br><span class="line"><span class="keyword">INNER</span> <span class="keyword">JOIN</span> <span class="operator">&lt;</span>表<span class="number">3</span><span class="operator">&gt;</span> <span class="keyword">AS</span> IP</span><br><span class="line"><span class="keyword">ON</span> SP.共有的列 <span class="operator">=</span> IP.共有的列;</span><br></pre></td></tr></table></figure><p><em>原则上联结表的数量并没有限制</em></p><p><strong>CROSS JOIN ( 交叉联结 )</strong></p><figure class="highlight sql"><figcaption><span>Server、DB2、PostgreSQL、MySQL</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> (<span class="operator">&lt;</span>表<span class="number">1</span><span class="operator">&gt;</span>.列<span class="number">1</span>, <span class="operator">&lt;</span>表<span class="number">1</span><span class="operator">&gt;</span>.列<span class="number">2</span>, <span class="operator">&lt;</span>表<span class="number">1</span><span class="operator">&gt;</span>.列<span class="number">3</span>, ……<span class="operator">&lt;</span>表<span class="number">2</span><span class="operator">&gt;</span>.列<span class="number">1</span>, <span class="operator">&lt;</span>表<span class="number">2</span><span class="operator">&gt;</span>.列<span class="number">2</span>……)</span><br><span class="line"><span class="keyword">FROM</span> <span class="operator">&lt;</span>表<span class="number">1</span><span class="operator">&gt;</span> <span class="keyword">AS</span> SP <span class="keyword">CROSS</span> <span class="keyword">JOIN</span> <span class="operator">&lt;</span>表<span class="number">2</span><span class="operator">&gt;</span> <span class="keyword">AS</span> P;</span><br></pre></td></tr></table></figure><p><em>交叉联结是对两张表中的全部记录进行交叉组合，因此结果中的记录数通常是两张表中行数的乘积。</em></p><h2 id="八、SQL高级处理"><a href="#八、SQL高级处理" class="headerlink" title="八、SQL高级处理"></a>八、SQL高级处理</h2><h3 id="窗口函数"><a href="#窗口函数" class="headerlink" title="窗口函数"></a>窗口函数</h3><p>窗口函数也称为 <strong>OLAP 函数</strong>，<strong>OLAP</strong> 是 OnLine Analytical Processing 的简称，意思是对数据库数据</p><p>进行实时分析处理。</p><p><strong>窗口函数</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="operator">&lt;</span>窗口函数<span class="operator">&gt;</span> <span class="keyword">OVER</span> ([<span class="keyword">PARTITION</span> <span class="keyword">BY</span> <span class="operator">&lt;</span>列清单<span class="operator">&gt;</span>] </span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> <span class="operator">&lt;</span>排序用列清单<span class="operator">&gt;</span>)</span><br></pre></td></tr></table></figure><p><em>PARTITION BY 能够设定排序的对象范围。ORDER BY 能够指定按照哪一列、何种顺序进行排序。</em></p><p><em>通过PARTTION BY分组后的记录的集合可以称为窗口</em></p><p><em>窗口函数大体可以分为以下两种 :</em></p><ol><li><em>能够作为窗口函数的聚合函数（SUM、AVG、COUNT、MAX、MIN）</em></li><li><em>RANK、DENSE_RANK、ROW_NUMBER 等*<em>专用窗口函数</em></em> ( 标准 SQL 定义的 OLAP 专用函数 )*</li></ol><p><strong>无需指定 PARTITION BY</strong></p><p>使用窗口函数时起到关键作用的是 PARTITION BY 和 GROUP BY。其中，PARTITION BY 并不是必需的，即使不指定也可以正常使用窗口函数。</p><p><strong>具有代表性的专用窗口函数:</strong></p><ul><li>RANK 函数</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">计算排序时，如果存在相同位次的记录，则会跳过之后的位次。</span><br><span class="line">Eg : 有 <span class="number">3</span> 条记录排在第 <span class="number">1</span> 位时：<span class="number">1</span> 位、<span class="number">1</span> 位、<span class="number">1</span> 位、<span class="number">4</span> 位……</span><br></pre></td></tr></table></figure><ul><li>DENSE_RANK 函数</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">同样是计算排序，即使存在相同位次的记录，也不会跳过之后的位次。</span><br><span class="line">Eg : 有 <span class="number">3</span> 条记录排在第 <span class="number">1</span> 位时：<span class="number">1</span> 位、<span class="number">1</span> 位、<span class="number">1</span> 位、<span class="number">2</span> 位……</span><br></pre></td></tr></table></figure><ul><li>ROW_NUMBER 函数</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">赋予唯一的连续位次。</span><br><span class="line">Eg : 有 <span class="number">3</span> 条记录排在第 <span class="number">1</span> 位时：<span class="number">1</span> 位、<span class="number">2</span> 位、<span class="number">3</span> 位、<span class="number">4</span> 位……</span><br></pre></td></tr></table></figure><p>**窗口函数的适用范围 : **窗口函数只能书写在SELECT 子句之中。( ORDER BY 子句或者 UPDATE 语句的 SET 子句中也可以使用。)</p><p><strong>作为窗口函数使用的聚合函数 :</strong> 累计</p><p>**计算移动平均 : **用框架。只需要在 ORDER BY 子句之后使用指定范围的关键字</p><p><strong>指定框架（汇总范围）: ROWS(“行”)</strong> 、<strong>PRECEDING(“之前”)<strong>、</strong>FOLLOWING(“之后”)</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> product_id, product_name, sale_price,</span><br><span class="line"><span class="built_in">AVG</span> (sale_price) <span class="keyword">OVER</span> (<span class="keyword">ORDER</span> <span class="keyword">BY</span> product_id</span><br><span class="line"><span class="keyword">ROWS</span> <span class="number">2</span> PRECEDING) <span class="comment">/*截止到之前 2 行*/</span></span><br><span class="line">    <span class="keyword">AS</span> moving_avg</span><br><span class="line"><span class="keyword">FROM</span> Product;</span><br></pre></td></tr></table></figure><p><strong>两个ORDER BY :</strong> OVER 子句中的 ORDER BY 只是用来决定窗口函数按照什么样的顺序进行计算的，对结果的排列顺序并没有影响。因此也有可能得到一个记录的排列顺序比较混乱的结果。</p><h3 id="GROUPING运算符"><a href="#GROUPING运算符" class="headerlink" title="GROUPING运算符"></a><strong>GROUPING</strong>运算符</h3><p><strong>GROUPING 运算符包含以下 3 种 :</strong></p><ul><li>ROLLUP</li><li>CUBE</li><li>GROUPING SETS</li></ul><p><strong>ROLLUP ( 同时得出合计和小计 )</strong></p><figure class="highlight plaintext"><figcaption><span>Server、DB2、PostgreSQL</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">SELECT product_type, SUM(sale_price) AS sum_price</span><br><span class="line">FROM Product</span><br><span class="line">GROUP BY ROLLUP(product_type);</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">SELECT product_type, SUM(sale_price) AS sum_price</span><br><span class="line">FROM Product</span><br><span class="line">GROUP BY product_type WITH ROLLUP(product_type);</span><br></pre></td></tr></table></figure><p><strong>GROUPING ( 让NULL更加容易分辨 )</strong></p><p><em>该函数在其参数列的值为超级分组记录所产生的 NULL 时返回 1，其他情况返回 0</em></p><figure class="highlight plaintext"><figcaption><span>Server、DB2、PostgreSQL</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">SELECT GROUPING(product_type) AS product_type, </span><br><span class="line">GROUPING(regist_date) AS regist_date, SUM(sale_price) AS sum_price</span><br><span class="line">FROM Product</span><br><span class="line">GROUP BY ROLLUP(product_type, regist_date);</span><br></pre></td></tr></table></figure><p>在超级分组记录的键值中插入恰当的字符串</p><figure class="highlight plaintext"><figcaption><span>Server、DB2、PostgreSQL</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">SELECT CASE WHEN GROUPING(product_type) = 1 </span><br><span class="line">THEN &#x27;商品种类 合计&#x27; </span><br><span class="line">ELSE product_type END AS product_type,</span><br><span class="line">   CASE WHEN GROUPING(regist_date) = 1 </span><br><span class="line">THEN &#x27;登记日期 合计&#x27; </span><br><span class="line">ELSE CAST(regist_date AS VARCHAR(16)) END AS regist_date,</span><br><span class="line">    SUM(sale_price) AS sum_price</span><br><span class="line"> FROM Product</span><br><span class="line"> GROUP BY ROLLUP(product_type, regist_date);</span><br></pre></td></tr></table></figure><p><strong>CUBE</strong></p><p>CUBE 的语法和 ROLLUP 相同</p><p><em>所谓 CUBE，就是将 GROUP BY 子句中聚合键的“所有可能的组合”的汇总结果集中到一个结果中。</em></p><p><strong>GROUPING SETS</strong></p><p>该运算符可以用于从 ROLLUP 或者 CUBE 的结果中取出部分记录</p><h1 id="法则"><a href="#法则" class="headerlink" title="法则"></a>法则</h1><h2 id="一"><a href="#一" class="headerlink" title="一"></a>一</h2><ol><li><p>关系数据库以行为单位读写数据。</p></li><li><p>一个单元格中只能输入一个数据。</p></li><li><p>学会标准 SQL就可以在各种RDBMS中书写 SQL语句了。</p></li><li><p>SQL根据功能不同可以分为三类，其中使用最多的是 DML。</p></li><li><p>SQL语句以分号（;）结尾。</p></li><li><p>关键字不区分大小写。</p></li><li><p>字符串和日期常数需要使用单引号（’）括起来，数字常数无需加注单引号（直接书写数字即可）。</p></li><li><p>单词之间需要使用半角空格或者换行符进行分隔。</p></li><li><p>数据库名称、表名和列名等可以使用以下三种字符。</p><p><code>角英文字母　 半角数字　　下划线（_）</code></p></li><li><p>名称必须以半角英文字母作为开头。</p></li><li><p>名称不能重复。</p></li><li><p>删除了的表是无法恢复的。在执行DROP TABLE语句之前请务必仔细确认。</p></li><li><p>表定义变更之后无法恢复。在执行ALTER TABLE语句之前请务必仔细确认。</p></li></ol><h2 id="二"><a href="#二" class="headerlink" title="二"></a>二</h2><ol><li>星号（*）代表全部列的意思。</li><li>设定汉语别名时需要使用双引号（”）括起来。</li><li>在SELECT语句中使用DISTINCT可以删除重复行。在使用 DISTINCT 时，NULL 也被视为一类数据。</li><li>WHERE子句要紧跟在FROM子句之后。</li><li>注释是 SQL语句中用来标识说明或者注意事项的部分。分为 1行注释和多行注释两种。</li><li>SELECT子句中可以使用常数或者表达式。</li><li>使用比较运算符时一定要注意不等号和等号的位置。</li><li>字符串类型的数据原则上按照字典顺序进行排序，不能与数字的大小顺序混淆。</li><li>希望选取NULL记录时，需要在条件表达式中使用IS NULL运算符。希望选取不是NULL的记录时，需要在条件表达式中使用IS NOT NULL运算符。</li><li>NOT运算符用来否定某一条件，但是不能滥用。</li><li>多个查询条件进行组合时，需要使用AND运算符或者OR运算符。</li><li>文氏图很方便。</li><li>AND运算符的优先级高于OR运算符。想要优先执行OR运算符时可以使用括号。</li><li>通过创建真值表，无论多复杂的条件，都会更容易理解。</li></ol><h2 id="三"><a href="#三" class="headerlink" title="三"></a>三</h2><ol><li>COUNT函数的结果根据参数的不同而不同。COUNT(*)会得到包含NULL的数据行数，而COUNT(&lt;列名&gt;)会得到NULL之外的数据行数。</li><li>聚合函数会将NULL排除在外。但COUNT(*)例外，并不会排除NULL。</li><li>MAX&#x2F;MIN函数几乎适用于所有数据类型的列。SUM&#x2F;AVG函数只适用于数值类型的列。</li><li>想要计算值的种类时，可以在COUNT函数的参数中使用DISTINCT。</li><li>在聚合函数的参数中使用DISTINCT，可以删除重复数据。</li><li>GROUP BY就像是切分表的一把刀。</li><li>SQL子句的顺序不能改变，也不能互相替换。</li><li>聚合键中包含NULL时，在结果中会以“不确定”行（空行）的形式表现出来。</li><li>使用GROUP BY子句时，SELECT子句中不能出现聚合键之外的列名。</li><li>在GROUP BY子句中不能使用SELECT子句中定义的别名。</li><li>GROUP BY子句结果的显示是无序的。</li><li>只有SELECT子句和HAVING子句（以及ORDER BY子句）中能够使用聚合函数。</li><li>HAVING子句要写在GROUP BY子句之后。</li><li>聚合键所对应的条件不应该书写在HAVING子句当中，而应该书写在WHERE子句当中。</li><li>ORDER BY子句通常写在SELECT语句的末尾。</li><li>未指定ORDER BY子句中排列顺序时会默认使用升序进行排列。</li><li>排序键中包含NULL时，会在开头或末尾进行汇总。</li><li>在ORDER BY子句中可以使用SELECT子句中定义的别名。</li><li>在ORDER BY子句中可以使用SELECT子句中未使用的列和聚合函数。</li><li>在ORDER BY子句中不要使用列编号。</li></ol><h2 id="四"><a href="#四" class="headerlink" title="四"></a>四</h2><ol><li>原则上，执行一次INSERT语句会插入一行数据。</li><li>省略INSERT语句中的列名，就会自动设定为该列的默认值（没有默认值时会设定为NULL）。</li><li>INSERT语句的SELECT语句中，可以使用WHERE子句或者GROUP BY子句等任何 SQL语法（但使用ORDER BY子句并不会产生任何效果）。</li><li>DELETE语句的删除对象并不是表或者列，而是记录（行）。</li><li>可以通过WHERE子句指定对象条件来删除部分数据。</li><li>使用UPDATE语句可以将值清空为NULL（但只限于未设置NOT NULL约束的列）。</li><li>事务是需要在同一个处理单元中执行的一系列更新处理的集合。</li><li>虽然我们可以不清楚事务开始的时间点，但是在事务结束时一定要仔细进行确认。</li></ol><h2 id="五"><a href="#五" class="headerlink" title="五"></a>五</h2><ol><li>表中存储的是实际数据，而视图中保存的是从表中取出数据所使用的SELECT语句。</li><li>应该将经常使用的SELECT语句做成视图。</li><li>应该避免在视图的基础上创建视图。</li><li>定义视图时不要使用ORDER BY子句。</li><li>视图和表需要同时进行更新，因此通过汇总得到的视图无法进行更新。</li><li>子查询作为内层查询会首先执行。</li><li>标量子查询就是返回单一值的子查询。</li><li>在细分的组内进行比较时，需要使用关联子查询。</li></ol><h2 id="六"><a href="#六" class="headerlink" title="六"></a>六</h2><ol><li>通常指定关联子查询作为EXIST的参数。</li><li>作为EXIST参数的子查询中经常会使用SELECT *。</li><li>虽然CASE表达式中的ELSE子句可以省略，但还是希望大家不要省略。</li><li>CASE表达式中的END不能省略。</li></ol><h2 id="七"><a href="#七" class="headerlink" title="七"></a>七</h2><ol><li>集合运算符会除去重复的记录。</li><li>在集合运算符中使用ALL选项，可以保留重复行。</li><li>进行联结时需要在FROM子句中使用多张表。</li><li>进行内联结时必须使用ON子句，并且要书写在FROM和WHERE之间。</li><li>使用联结时SELECT子句中的列需要按照“&lt;表的别名&gt;.&lt;列名&gt;”的格式进行书写。</li><li>外联结中使用LEFT、RIGHT来指定主表。使用二者所得到的结果完全相同。</li><li>对于联结的过时语法和特定语法，虽然不建议使用，但还是需要能够读懂。</li></ol><h2 id="八"><a href="#八" class="headerlink" title="八"></a>八</h2><ol><li>窗口函数兼具分组和排序两种功能。</li><li>通过PARTITION BY分组后的记录集合称为“窗口”。</li><li>由于专用窗口函数无需参数，因此通常括号中都是空的。</li><li>原则上窗口函数只能在SELECT子句中使用。</li><li>将聚合函数作为窗口函数使用时，会以当前记录为基准来决定汇总对象的记录。</li><li>超级分组记录默认使用NULL作为聚合键。</li><li>ROLLUP可以同时得出合计和小计，是非常方便的工具。</li><li>使用GROUPING函数能够简单地分辨出原始数据中的NULL和超级分组记录中的NULL。</li><li>可以把CUBE理解为将使用聚合键进行切割的模块堆积成一个立方体。</li></ol><h1 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h1><blockquote><p>SQL基础教程第二版</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SQL </tag>
            
            <tag> 教程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Jdbc和数据库连接池</title>
      <link href="/2022/12/14/learn/Java/Jdbc%20%E5%92%8C%E6%95%B0%E6%8D%AE%E5%BA%93%E8%BF%9E%E6%8E%A5%E6%B1%A0/"/>
      <url>/2022/12/14/learn/Java/Jdbc%20%E5%92%8C%E6%95%B0%E6%8D%AE%E5%BA%93%E8%BF%9E%E6%8E%A5%E6%B1%A0/</url>
      
        <content type="html"><![CDATA[<blockquote><p>JDBC：Java 提供的一套用于操作数据库的接口 API。Java 程序员只需要面向该接口即可连接任何提供了 JDBC 驱动程序的数据库，完成对数据库的各种操作。不同的数据库厂商，需要针对这套接口提供不同的实现。</p></blockquote><p><strong>JDBC 程序编写步骤（示范）：</strong></p><blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">/* [0] 前置操作 */</span><br><span class="line">/* [1] 注册驱动 */</span><br><span class="line">Driver driver = new com.mysql.cj.jdbc.Driver();</span><br><span class="line">/* [2] 获取连接 */</span><br><span class="line">String url = &quot;jdbc:mysql://localhost:3306/melody&quot;;</span><br><span class="line">Properties properties = new Properties();</span><br><span class="line">properties.setProperty(&quot;user&quot;, &quot;root&quot;);</span><br><span class="line">properties.setProperty(&quot;password&quot;, &quot;******&quot;);</span><br><span class="line">Connection connect = driver.connect(url, properties);</span><br><span class="line">/* [3] 执行语句 */</span><br><span class="line">String sql = &quot;insert into customer (customer_id,name,card_id) values(0004,&#x27;赫尔&#x27;,&#x27;00000000000000000O&#x27;)&quot;;</span><br><span class="line">Statement statement = connect.createStatement();</span><br><span class="line">int rows = statement.executeUpdate(sql);</span><br><span class="line">System.out.println(rows);</span><br><span class="line">/* [4] 释放资源 */</span><br><span class="line">statement.close();</span><br><span class="line">connect.close();</span><br></pre></td></tr></table></figure><ol start="0"><li><p>前置操作：将 <code>mysql-connector-java-8.0.27.jar</code> 该文件拷贝到项目目录下，选中后右键选择 <code>Add as library</code></p></li><li><p>注册驱动：加载 <code>Driver</code> 类</p><p>这里我导入了 <code>com.mysql.cj.jdbc.Driver</code>。根据前面的 <code>jar</code> 包的版本不同，应该导入的路径也会不同。</p><p>旧版本的 <code>jar</code> 包可能应该导入 <code>com.mysql.jdbc.Driver</code> 这个包。</p></li><li><p>获取连接：得到 <code>Connection</code></p><blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">String url = &quot;jdbc:mysql://localhost:3306/melody&quot;;</span><br></pre></td></tr></table></figure><p>这里表示进入 <code>melody</code> 这个数据库。</p></blockquote></li><li><p>执行语句：发送 SQL 命令给 MySQL 执行</p><blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">int rows = statement.executeUpdate(sql);</span><br></pre></td></tr></table></figure><p>如果是 dml 语句，这里返回的 rows 是影响的行数。返回 0 表示失败。</p></blockquote></li><li><p>释放资源：关闭相关连接<strong>（切记！）</strong></p></li></ol></blockquote><h2 id="连接数据库的-5-种方式"><a href="#连接数据库的-5-种方式" class="headerlink" title="连接数据库的 5 种方式"></a>连接数据库的 5 种方式</h2><ul><li><p>方式 1：直接创建 <code>Driver</code>，调用 <code>driver.connet(url, properties);</code></p><p>这个方法就是 [23.0] 示范的方法</p><blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Driver driver = new com.mysql.cj.jdbc.Driver();</span><br><span class="line">String url = &quot;jdbc:mysql://localhost:3306/melody&quot;;</span><br><span class="line">Properties properties = new Properties();</span><br><span class="line">properties.setProperty(&quot;user&quot;, &quot;root&quot;);</span><br><span class="line">properties.setProperty(&quot;password&quot;, &quot;******&quot;);</span><br><span class="line">Connection connect = driver.connect(url, properties);</span><br></pre></td></tr></table></figure></blockquote></li><li><p>方式 2：使用反射加载 <code>Driver</code> 类</p><p>这个方式是动态加载，更加灵活。</p><blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Class&lt;?&gt; aClass = Class.forName(&quot;com.mysql.cj.jdbc.Driver&quot;);</span><br><span class="line">Driver driver = (Driver) aClass.newInstance();</span><br><span class="line">Properties properties = new Properties();</span><br><span class="line">properties.setProperty(&quot;user&quot;, &quot;root&quot;);</span><br><span class="line">properties.setProperty(&quot;password&quot;, &quot;******&quot;);</span><br><span class="line">Connection connect = driver.connect(url, properties);</span><br></pre></td></tr></table></figure></blockquote></li><li><p>方式 3：使用 <code>DriverManager</code> 替代 <code>Driver</code> 进行统一管理</p><p>这个方式扩展性更好，更加清晰</p><blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Class&lt;?&gt; aClass = Class.forName(&quot;com.mysql.cj.jdbc.Driver&quot;);</span><br><span class="line">Driver driver = (Driver) aClass.newInstance();</span><br><span class="line">String url = &quot;jdbc:mysql://localhost:3306/melody&quot;;</span><br><span class="line">String name = &quot;root&quot;;</span><br><span class="line">String password = &quot;******&quot;;</span><br><span class="line">DriverManager.registerDriver(driver);</span><br><span class="line">Connection connection = DriverManager.getConnection(url, name, password);</span><br></pre></td></tr></table></figure><p>这里，<code>DriverManager.getConnetion()</code> 有三种方法。分别是：</p><ul><li><code>getConnetion(url);</code></li><li><code>getConnetion(url, properties);</code></li><li><code>getConnetion(url, name, password);</code></li></ul></blockquote></li><li><p>方式 4：使用 <code>Class.forName()</code> 自动完成注册驱动</p><blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Class&lt;?&gt; aClass = Class.forName(&quot;com.mysql.cj.jdbc.Driver&quot;);</span><br><span class="line">String url = &quot;jdbc:mysql://localhost:3306/melody&quot;;</span><br><span class="line">String name = &quot;root&quot;;</span><br><span class="line">String password = &quot;******&quot;;</span><br><span class="line">Connection connection = DriverManager.getConnection(url, name, password);</span><br></pre></td></tr></table></figure><p><code>Class.forName()</code> 在加载 <code>Driver</code> 类时，会自动完成注册。</p></blockquote><p>原理：</p><blockquote><p><code>Driver</code> 类的源码中有这样一段</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">static &#123;</span><br><span class="line">     try &#123;</span><br><span class="line">         DriverManager.registerDriver(new Driver());</span><br><span class="line">     &#125; catch (SQLException var1) &#123;</span><br><span class="line">         throw new RuntimeException(&quot;Can&#x27;t register driver!&quot;);</span><br><span class="line">     &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个静态代码块在类加载时会被执行。</p></blockquote><blockquote><p>另外，其实不执行 <code>Class.forName(...);</code> 语句的场合，也能正确获取 <code>Connection</code>。</p><p>这是因为 JDK 1.5 以后使用了 jdbc4。这个场合，系统会自动调用 jar 包下 <code>META-INF\services\java.sql.Driver</code> 这个文件中的类名称去注册。</p><p>……打开上述文件看看，里面赫然写着：<code>com.mysql.cj.jdbc.Driver</code></p><p>即使如此，还是建议写上 <code>Class.forName(...)</code> 语句！</p></blockquote></li><li><p>方式 5（推荐）：在方式 4 的基础上，使用配置文件，连接数据库更灵活。</p><p>这种方式是实际开发最常用的方式。</p><blockquote><p>配置文件（创建 src.properties）：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">url=jdbc:mysql://localhost:3306/melody</span><br><span class="line">user=root</span><br><span class="line">password=******</span><br><span class="line">driver=com.mysql.cj.jdbc.Driver</span><br></pre></td></tr></table></figure><p>代码：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Properties pro = new Properties();</span><br><span class="line">pro.load(new FileInputStream(&quot;src\\mysql.properties&quot;))</span><br><span class="line">String url = pro.getProperties(&quot;url&quot;);</span><br><span class="line">String user = pro.getProperties(&quot;user&quot;);</span><br><span class="line">String password = pro.getProperties(&quot;password&quot;);</span><br><span class="line">String driver = pro.getProperties(&quot;driver&quot;);</span><br><span class="line">Class&lt;?&gt; aClass = Class.forName(driver);</span><br><span class="line">Connection connection = DriverManager.getConnection(url, user, password);</span><br></pre></td></tr></table></figure></blockquote></li></ul><h2 id="ReaultSet-结果集"><a href="#ReaultSet-结果集" class="headerlink" title="ReaultSet 结果集"></a>ReaultSet 结果集</h2><blockquote><p>ResultSet：表示数据库结果集的数据表。通常通过执行查询数据库的语句生成。</p><p>ResultSet 对象保持一个光标指向其当前的数据行。该光标的初始位置在第一行之前。调用 next 方法将光标下移，移动到末端的场合会返回 false。</p></blockquote><p><strong>如何取出数据（示例）：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">String sql = &quot;select * from customer&quot;;</span><br><span class="line">ResultSet resset = statement.executeQuery(sql);</span><br><span class="line">while (resset.next()) &#123;</span><br><span class="line">    int id = resset.getInt(1);</span><br><span class="line">    String name = resset.getString(2);</span><br><span class="line">    String sex = resset.getString(5);</span><br><span class="line">    String card_id = resset.getString(6);</span><br><span class="line">    System.out.println(id + &quot;\t&quot; + name + &quot;\t&quot; + sex + &quot;\t&quot; + card_id);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其中 <code>String sex = resset.getString(5);</code> 表示取出该行数据的第 5 列的字符串数据。</p><p>ResultSet 的数据是以类似二维数组的形式保存在对象中。这不难理解，毕竟表格是二维的嘛。</p><h2 id="Statement"><a href="#Statement" class="headerlink" title="Statement"></a>Statement</h2><blockquote><p><code>Statment</code> 对象用于执行静态 SQL 语句，并返回其生成的结果的对象</p><p>在连接建立后，需要访问数据库、执行命名或 SQL 语句，有如下方式：</p><ul><li><code>Statment</code>（存在 SQL 注入问题，在实际开发中基本不使用）</li><li><code>PerparedStatement</code>（预处理）</li><li><code>CallableStatement</code>（存储过程）</li></ul><p>SQL 注入：利用某些系统没有对用户输入的数据进行充分的检查，故意注入非法的 SQL 语句段或命令，恶意攻击数据库。</p><p>使用 <code>PreparedStatement</code> 可以防范 SQL 注入</p></blockquote><h3 id="PreparedStatement-预处理"><a href="#PreparedStatement-预处理" class="headerlink" title="PreparedStatement 预处理"></a>PreparedStatement 预处理</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">/* [1] */</span><br><span class="line">String sql = &quot;select * from customer where customer_id = ? and name = ?&quot;;</span><br><span class="line">PreparedStatement ps = connection.prepareStatement(sql);</span><br><span class="line">/* [2] */</span><br><span class="line">ps.setInt(1, 0);</span><br><span class="line">ps.setString(2, &quot;萝茵&quot;);</span><br><span class="line">/* [3] */</span><br><span class="line">ResultSet rs = ps.executeQuery();</span><br></pre></td></tr></table></figure><ol><li><p><code>PreparedStatement</code> 执行的 SQL 语句的参数用 <code>?</code> 表示。</p></li><li><p>调用方法设置 SQL 语句中的参数。</p><p>这些方法的两个参数中，第一个是设置的参数的索引，第二个是设置值</p></li><li><p>调用 <code>executeQuery()</code> 返回 <code>ResultSet</code> 对象。或者调用 <code>executeUpdate()</code> 执行增删改</p><p>这里，调用的方法不需要再传入参数</p></li></ol><p><strong>预处理的好处</strong></p><ol><li>不再使用拼接语句，增加代码可读性，减少语法错误</li><li>解决了 SQL 注入问题</li><li>大大减少了编译次数，效率提高</li></ol><table><thead><tr><th>类 &#x2F; 接口</th><th>方法</th></tr></thead><tbody><tr><td>DriverManager 驱动管理类</td><td>getConnection(url, user, pwd) 获取连接</td></tr><tr><td>Connection 接口</td><td>createStatement() 创建 Statement 对象</td></tr><tr><td></td><td>preparedStatement(sql) 生成预处理 PreparedStatement 对象</td></tr><tr><td>Statement 接口</td><td>executeUpdate(sql) 执行 dml 语句，返回影响行数</td></tr><tr><td></td><td>executeQuery(sql) 执行查询语句，返回 ResultSet</td></tr><tr><td></td><td>execute(sql) 执行任意 SQL 语句，返回布尔值</td></tr><tr><td>PreparedStatement 接口</td><td>executeUpdate() 执行 dml 语句，返回影响行数</td></tr><tr><td></td><td>executeQuery() 执行查询语句，返回 ResultSet</td></tr><tr><td></td><td>execute() 执行任意 SQL 语句，返回布尔值</td></tr><tr><td></td><td>setXXX(int, xxx) 设置 SQL 语句中占位符的值</td></tr><tr><td></td><td>setObject(int, xxx) 设置 SQL 语句中占位符的值</td></tr><tr><td>ResultSet 结果集</td><td>next() 向下移动一行。没有下一行的场合返回 false</td></tr><tr><td></td><td>previous() 向上移动一行。没有上一行的场合返回 false</td></tr><tr><td></td><td>getXXX(int)、getXXX(name) 返回 int 列 &#x2F; name 列的值</td></tr><tr><td></td><td>getObject(int)、getObject(name) 返回 int 列 &#x2F; name 列的值</td></tr></tbody></table><h2 id="JDBCUtils"><a href="#JDBCUtils" class="headerlink" title="JDBCUtils"></a>JDBCUtils</h2><blockquote><p>实际操作中，获取连接 和 释放资源 操作经常使用。可以把这些操作封装成工具类 JDBCUtils</p></blockquote><p><strong>JDCUtils.java</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line">package com.melody;</span><br><span class="line"></span><br><span class="line">import java.io.FileInputStream;</span><br><span class="line">import java.io.IOException;</span><br><span class="line">import java.sql.*;</span><br><span class="line">import java.util.Properties;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * @author Melody</span><br><span class="line"> * @version 1.0</span><br><span class="line"> */</span><br><span class="line">public class JDBCUtils &#123;</span><br><span class="line">    private static String url;</span><br><span class="line">    private static String user;</span><br><span class="line">    private static String pw;</span><br><span class="line">    private static String driver;</span><br><span class="line"></span><br><span class="line">    static &#123;</span><br><span class="line">        try &#123;</span><br><span class="line">            Properties properties = new Properties();</span><br><span class="line">            properties.load(new FileInputStream(&quot;src/com/melody/mysql.properties&quot;));</span><br><span class="line">            url = properties.getProperty(&quot;url&quot;);</span><br><span class="line">            user = properties.getProperty(&quot;user&quot;);</span><br><span class="line">            pw = properties.getProperty(&quot;password&quot;);</span><br><span class="line">            driver = properties.getProperty(&quot;driver&quot;);</span><br><span class="line">            Class&lt;?&gt; aClass = Class.forName(driver);</span><br><span class="line">        &#125; catch (IOException | ClassNotFoundException e) &#123;</span><br><span class="line">            throw new RuntimeException(e);//[1]</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public static Connection getConnection() throws SQLException &#123;</span><br><span class="line">        return DriverManager.getConnection(url, user, pw);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public static boolean close(Connection c, Statement s, ResultSet r) &#123;</span><br><span class="line">        try &#123;</span><br><span class="line">            if (!(c == null))&#123;</span><br><span class="line">                c.close();</span><br><span class="line">            &#125;</span><br><span class="line">            if (!(s == null))&#123;</span><br><span class="line">                s.close();</span><br><span class="line">            &#125;</span><br><span class="line">            if (!(r == null))&#123;</span><br><span class="line">                r.close();</span><br><span class="line">            &#125;</span><br><span class="line">            return true;</span><br><span class="line">        &#125; catch (SQLException e) &#123;</span><br><span class="line">            throw new RuntimeException(e);//[1]</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li>实际开发中，可以把编译异常转换为运行异常。这样，调用者可以自行选择捕获异常还是默认处理。</li></ol><h2 id="事务"><a href="#事务" class="headerlink" title="事务"></a>事务</h2><blockquote><p>事务：JDBC 程序中，当一个 <code>Connection</code> 对象创建时，默认情况下会自动提交事务。为了让多个 SQL 语句一体执行，需要使用事务。</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">Connection connection = null;</span><br><span class="line">try &#123;</span><br><span class="line">    connection = JDBCUtils.getConnection();</span><br><span class="line">    connection.setAutoCommit(false);//[1] 取消自动提交事务</span><br><span class="line">    String sql = &quot;insert into actor values(9, &#x27;赫尔萝茵&#x27;)&quot;;</span><br><span class="line">    PreparedStatement preparedStatement = connection.prepareStatement(sql);</span><br><span class="line">    preparedStatement.executeUpdate();</span><br><span class="line">    sql = &quot;delete from actor where name = &#x27;萝茵&#x27; and id &gt; (select * from (select min(id) from actor where name = &#x27;萝茵&#x27;) a)&quot;;</span><br><span class="line">    //[2]</span><br><span class="line">    preparedStatement = connection.prepareStatement(sql);</span><br><span class="line">    preparedStatement.executeUpdate();</span><br><span class="line">    connection.commit();//[3] 提交事务</span><br><span class="line">    System.out.println(&quot;complete&quot;);</span><br><span class="line">&#125; catch (SQLException e) &#123;</span><br><span class="line">    System.out.println(&quot;fail&quot;);</span><br><span class="line">    System.out.println(e);</span><br><span class="line">    connection.rollback();//[4] 回滚事务</span><br><span class="line">&#125; finally &#123;</span><br><span class="line">    connection.close();//[5] 关闭连接</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li><p>取消自动提交事务：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">connection.setAutoCommit(false);</span><br></pre></td></tr></table></figure></li><li><p>这是一个 SQL 语句。表示在 name &#x3D; 萝茵 的数据中只保留 id 最小的一条。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">delete from actor where name = &#x27;萝茵&#x27; and id &gt; (select * from (select min(id) from actor where name = &#x27;萝茵&#x27;) a)</span><br></pre></td></tr></table></figure><p>正常写法会提示不能同表查询（在 MySQL 中，不能在同一语句中先 select 出同一表中的某些值，再 update 这个表）。使用一个额外的 select 过渡就解决了这个问题。特此记录。</p></li><li><p>提交事务：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">connection.commit();</span><br></pre></td></tr></table></figure></li><li><p>回滚事务：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">connection.rollback();</span><br></pre></td></tr></table></figure><p>写在 catch 里。这样，语句错误抛出异常的场合会执行到这句话。</p></li><li><p>关闭连接：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">connection.close();</span><br></pre></td></tr></table></figure><p>写在 finally 里。这样，执行完语句总会关闭连接。这很好。</p></li></ol><h2 id="批处理"><a href="#批处理" class="headerlink" title="批处理"></a>批处理</h2><blockquote><p>批处理：把多条语句一次性提交给数据库进行批量处理。这样做比单独提交更有效率。</p></blockquote><p>要使用批处理功能，需要在 url 中加入 <code>?rewriteBatchedStatements=true</code>，即在配置文件中写成：</p><blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">url=jdbc:mysql://localhost:3306/test?rewriteBatchedStatements=true</span><br></pre></td></tr></table></figure></blockquote><p>批处理往往和 PerparedStatement 搭配使用，既减少编译次数，又减少运行次数，岂不美哉？</p><p><strong>示例：</strong></p><blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">//[0] 事前准备</span><br><span class="line">Connection connection = JDBCUtils.getConnection();</span><br><span class="line">String sql = &quot;insert into test1 values(?)&quot;;</span><br><span class="line">PreparedStatement ps = connection.prepareStatement(sql);</span><br><span class="line">for (int i = 0; i &lt; 1000; i++) &#123;</span><br><span class="line">ps.setInt(1,i);</span><br><span class="line">ps.addBatch();//[1]</span><br><span class="line">&#125;</span><br><span class="line">ps.executeBatch();//[2]</span><br><span class="line">JDBCUtils.close(connection, ps, null);</span><br></pre></td></tr></table></figure><ol start="0"><li><p>修改配置文件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">url=jdbc:mysql://localhost:3306/test?rewriteBatchedStatements=true</span><br><span class="line">...</span><br></pre></td></tr></table></figure></li><li><p>添加需要批量处理的 SQL 语句</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">preparedStatement.addBatch();</span><br></pre></td></tr></table></figure></li><li><p>执行批量处理语句</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">preparedStatement.executeBatch();</span><br></pre></td></tr></table></figure></li><li><p>（前面的例子里没有这句）清空批处理包的语句</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">preparedStatement.clearBatch();</span><br></pre></td></tr></table></figure></li></ol></blockquote><h3 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h3><ol><li><p>第一次添加批处理语句时，创建一个 ArrayList。</p><blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line">if (this.batchedArgs == null) &#123;</span><br><span class="line">    this.batchedArgs = new ArrayList();</span><br><span class="line">&#125;</span><br><span class="line">...</span><br></pre></td></tr></table></figure></blockquote><p>……会在其中放置批处理语句（指令的数据）</p></li><li><p>该数组满后，按照 1.5 倍扩容</p></li><li><p>达到指定的值后，执行 executeBatch 吧</p></li><li><p>批处理能减少编译次数，也能减少发送 SQL 语句的网络开销。</p></li></ol><h2 id="数据库连接池"><a href="#数据库连接池" class="headerlink" title="数据库连接池"></a>数据库连接池</h2><blockquote><p><strong>传统获取 Connection 方法的问题：</strong></p><ol><li>传统的 JDBC 数据库连接使用 DriverManager 获取，每次建立连接都会把 Connection 载入内存，再进行身份验证。每次连接都会重复验证请求，这样会占用过多系统资源，容易造成服务器崩溃。</li><li>每次连接，使用完毕后必须断开。如果不断开操作，会致使数据库内存泄漏，最终不得不重启数据库。</li><li>传统连接方式不能控制创建的连接数量。连接数量过多的场合，也可能导致内存泄漏，MySQL 崩溃</li></ol></blockquote><p><strong>因此，需要使用连接池技术：</strong></p><ol><li>预先在缓冲池放入一定数量的连接。需要建立数据库连接时，从缓冲池中取出一个连接。使用完后，把该连接放回缓冲池。</li><li>数据库连接池负责分配、管理和释放数据库连接。其允许应用程序重复使用一个现有的数据库连接，而非建立新的连接。</li><li>当请求连接的数量超过最大数量，这些连接请求会被加入等待队列。</li></ol><p><strong>数据库连接池种类：</strong></p><p>JDBC 数据库连接池使用 javax.sql.DataSource 表示。DataSource 是一个接口，通常由第三方提供实现（提供 jar 包）</p><ul><li>C3P0：速度稍慢，稳定性好……但是速度再慢也不是传统 JDBC 能比得上的，不自量力！</li><li>DBCP：速度稍快，稳定性差</li><li>Proxool：可以监控连接池状态，稳定性稍差</li><li>BoneCP：速度快</li><li>Druid：阿里提供的数据库连接池，集 DBCP、C3P0、Proxool 优点于一身</li></ul><h3 id="C3P0"><a href="#C3P0" class="headerlink" title="C3P0"></a>C3P0</h3><p>写在前面：C3P0 连接时跳一堆红字，不一定是报错……他就这样。</p><p><strong>使用 C3P0 的前置工作：</strong></p><ol><li><p>[C3P0 jar 包下载]</p></li><li><p>……和前面一样，把 jar 包装载好。</p><p>为了正常运行程序，这里（上面连接下载的） jar 包（似乎）至少是：</p><p><code>mchange-commons-java-0.2.19.jar</code></p><p><code>c3p0-0.9.5.5.jar</code></p></li></ol><ul><li><p>方式一：在程序中指定相关参数 &gt; &gt;</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">/* [1] */</span><br><span class="line">ComboPooledDataSource cpds = new ComboPooledDataSource();</span><br><span class="line">/* [2] */</span><br><span class="line">cpds.setDriverClass(dirver);</span><br><span class="line">cpds.setUser(user);</span><br><span class="line">cpds.setPassword(password);</span><br><span class="line">cpds.serJdbcUrl(url);</span><br><span class="line">/* [3] */</span><br><span class="line">cpds.setInitialPoolSize(10);</span><br><span class="line">/* [4] */</span><br><span class="line">cpds.setMaxPoolSize(50);</span><br><span class="line">/* [5] */</span><br><span class="line">Connection connection = cpds.getConnection();</span><br><span class="line">...</span><br><span class="line">connection.close();</span><br></pre></td></tr></table></figure><blockquote><blockquote><ol><li>创建数据源对象 &gt;</li></ol></blockquote></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ComboPooledDataSource cpds = new ComboPooledDataSource();</span><br></pre></td></tr></table></figure><blockquote><ol start="2"><li>设置参数 &gt; &gt;</li></ol></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">cpds.setDriverClass(String dirver);</span><br><span class="line">cpds.setUser(String user);</span><br><span class="line">cpds.setPassword(String password);</span><br><span class="line">cpds.serJdbcUrl(String url);</span><br></pre></td></tr></table></figure><blockquote><blockquote><p>……上面输入的形参 <code>user</code> 是字符串 <code>&quot;root&quot;</code>。其他同理。 &gt; &gt; 3. 设置初始化连接数 &gt;  </p></blockquote></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cpds.setInitialPoolSize(10);</span><br></pre></td></tr></table></figure><blockquote><p>初始化连接数，就是指连接池创建时，初始持有的连接数 &gt;<br>4. 设置最大连接数 &gt; &gt;</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cpds.setMaxPoolSize(50);</span><br></pre></td></tr></table></figure><blockquote><blockquote><ol start="5"><li>获取一个连接 &gt;</li></ol></blockquote></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Connection connection = cpds.getConnection();</span><br></pre></td></tr></table></figure><blockquote></blockquote></li><li><p>方式二：使用配置文件模板完成</p><blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">/* [0] 前置操作 */ </span><br><span class="line">/* [1] 获取数据源对象 */ </span><br><span class="line">ComboPooledDataSource cpds = new ComboPooledDataSource(&quot;Heruin&quot;);</span><br><span class="line">/* [2] 获取连接 */ </span><br><span class="line">Connection connection = cpds.getConnection();</span><br><span class="line">...</span><br><span class="line">connection.close();</span><br></pre></td></tr></table></figure><ol start="0"><li><p>加入配置文件</p><p><strong>c3p0-config.xml：</strong>配置文件，文件名固定，放在 <code>src/c3p0-config.xml</code> 这个位置</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">&lt;c3p0-config&gt;</span><br><span class="line">        &lt;!-- 数据源（连接池）名称 --&gt;</span><br><span class="line">    &lt;named-config name=&quot;Heruin&quot;&gt;</span><br><span class="line">            &lt;!-- 驱动类 --&gt;</span><br><span class="line">        &lt;property name=&quot;driverClass&quot;&gt;com.mysql.cj.jdbc.Driver&lt;/property&gt;</span><br><span class="line">            &lt;!-- url --&gt;</span><br><span class="line">        &lt;property name=&quot;jdbcUrl&quot;&gt;jdbc:mysql://localhost:3306/test&lt;/property&gt;</span><br><span class="line">            &lt;!-- 用户名 --&gt;</span><br><span class="line">        &lt;property name=&quot;user&quot;&gt;root&lt;/property&gt;</span><br><span class="line">            &lt;!-- 密码 --&gt;</span><br><span class="line">        &lt;property name=&quot;password&quot;&gt;******&lt;/property&gt;</span><br><span class="line">            &lt;!-- 初始化连接数 --&gt;</span><br><span class="line">        &lt;property name=&quot;initialPoolSize&quot;&gt;10&lt;/property&gt;</span><br><span class="line">            &lt;!-- 最大空闲时间 --&gt;</span><br><span class="line">        &lt;property name=&quot;maxIdleTime&quot;&gt;30&lt;/property&gt;</span><br><span class="line">            &lt;!-- 最大连接数 --&gt;</span><br><span class="line">        &lt;property name=&quot;maxPoolSize&quot;&gt;100&lt;/property&gt;</span><br><span class="line">            &lt;!-- 最小连接数 --&gt;</span><br><span class="line">        &lt;property name=&quot;minPoolSize&quot;&gt;10&lt;/property&gt;</span><br><span class="line">            &lt;!-- 每次增长的连接数 --&gt;</span><br><span class="line">        &lt;property name=&quot;acquireIncrement&quot;&gt;10&lt;/property&gt;</span><br><span class="line">            &lt;!-- 可连接的最多的命令对象数 --&gt;</span><br><span class="line">        &lt;property name=&quot;maxStatements&quot;&gt;10&lt;/property&gt;</span><br><span class="line">            &lt;!-- 每个连接可连接的最多的命令对象数 --&gt;</span><br><span class="line">        &lt;property name=&quot;maxStatementsPerConnection&quot;&gt;5&lt;/property&gt;</span><br><span class="line">    &lt;/named-config&gt;</span><br><span class="line">&lt;/c3p0-config&gt;</span><br></pre></td></tr></table></figure></li><li><p>获取数据源对象</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ComboPooledDataSource cpds = new ComboPooledDataSource(String name);</span><br></pre></td></tr></table></figure><p>这里的 <code>name</code> 就是配置文件中的 <code>数据源名称</code></p></li><li><p>获取连接</p></li></ol></blockquote></li></ul><h3 id="Druid（德鲁伊）连接池"><a href="#Druid（德鲁伊）连接池" class="headerlink" title="Druid（德鲁伊）连接池"></a>Druid（德鲁伊）连接池</h3><p>有的人因为看见而相信，有的人因为相信而看见！</p><p><strong>使用 Druid 的前置工作：</strong></p><ol><li><p>[Druid jar 包下载]</p></li><li><p>配置 jar 包</p></li><li><p>加入配置文件</p><blockquote><p><strong>durid.properties：</strong>配置文件，文件名任意，放在 <code>src/druid.properties</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">driverClassName=com.mysql.cj.jdbc.Driver</span><br><span class="line">url=jdbc:mysql://localhost:3306/test?rewriteBatchedStatements=true</span><br><span class="line">username=root</span><br><span class="line">password=720mel\im</span><br><span class="line">initialSize=10</span><br><span class="line">minIdle=5</span><br><span class="line">maxActive=20</span><br><span class="line">maxWait=5000</span><br></pre></td></tr></table></figure></blockquote></li></ol><ul><li><p>使用 Druid：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">/* [1] 加载配置文件 */</span><br><span class="line">Properties properties = new Properties();</span><br><span class="line">properties.load(new FileInputStream(&quot;src\\Druid.properties&quot;));</span><br><span class="line">/* [2] 初始化数据池 */</span><br><span class="line">DataSource dataSource = DruidDataSourceFactory.createDataSource(properties);</span><br><span class="line">/* [3] 获取连接 */</span><br><span class="line">Connection connection = dataSource.getConnection();</span><br><span class="line">...</span><br><span class="line">connection.close();</span><br></pre></td></tr></table></figure><ol start="2"><li><p>初始化数据池</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">DataSource dataSource = DruidDataSourceFactory.createDataSource(properties);</span><br></pre></td></tr></table></figure></li><li><p>……没什么好说的，但要说一下这个：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">connection.close();</span><br></pre></td></tr></table></figure><p><code>Connection</code> 是一个接口，对于方法 <code>close()</code>，不同供应商有不同实现方法。</p><p>原生的 <code>MySQL</code> 的实现方法是关闭连接，而这些连接池的实现方法是取消引用（放回连接池）。</p></li></ol></li></ul><h2 id="Apache-DbUtils"><a href="#Apache-DbUtils" class="headerlink" title="Apache - DbUtils"></a>Apache - DbUtils</h2><blockquote><p><code>commons-DbUtils</code>：是 Apache 组织提供的一个开源的 JDBC 工具库。它是对 JDBC 的封装。使用 dbutils 能极大简化 JDBC 编码的工作量</p><p><strong>DbUtils 的常用类：</strong></p><ul><li><code>QueryRunner</code> 类：封装了 SQL 的执行。是线程安全的，可以实现增、删、改、查、批处理操作</li><li><code>ResultSetHandler</code> 接口：用于处理 <code>ResultSet</code>，按照需求将数据转化为其他形式</li></ul></blockquote><p>JDBC 传统方法的不足：</p><ol><li>结果集和连接是关联的。在连接关闭后，就不能使用结果集。</li><li>结果集只能使用一次，这样不便于数据管理</li><li>使用返回信息不方便</li></ol><p>解决方案：</p><ul><li><p>土方法：创建一个类，其属性与表格的列一一对应。将数据遍历并读取到一个个类对象中，再将这些类对象放置到集合中。这样，就得到了一个与表格数据关联的数据集合。</p><blockquote><p>数据类，根据需要创建：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">public class SQL_Data &#123;</span><br><span class="line">    private int id;</span><br><span class="line">    private Date date;</span><br><span class="line">    private String name;        </span><br><span class="line"></span><br><span class="line">    /* 一定要有无参构造器。这是因为后面会用到反射 */</span><br><span class="line">    public SQL_Data()&#123;&#125;</span><br><span class="line"></span><br><span class="line">    public SQL_Data(int id, Date date, String name) &#123;</span><br><span class="line">        this.id = id;</span><br><span class="line">        this.date = date;</span><br><span class="line">        this.name = name;</span><br><span class="line">    &#125;   </span><br><span class="line">    </span><br><span class="line">    /* Geter &amp; Seter 笔记里就省略不记了。光占地方又没技术含量 */</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>……然后遍历 ResultSet，存放。就不写了。</p></blockquote></li><li><p>使用 <code>DbUtils</code>：</p><blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">/* [0] 前置操作 */</span><br><span class="line">String sql = &quot;select * from account where ? = ?&quot;;</span><br><span class="line">/* [1] 创建 QueryRunner */</span><br><span class="line">QueryRunner qr = new QueryRunner();</span><br><span class="line">/* [2] 执行相关方法 */</span><br><span class="line">List&lt;SQL_Data&gt; list = </span><br><span class="line">qr.query(connection, sql, new BeanListHandler&lt;&gt;(SQL_Data.class), &quot;id&quot;, 1);</span><br><span class="line">...</span><br><span class="line">/* [3] 释放资源*/</span><br><span class="line">connection.close();</span><br></pre></td></tr></table></figure><ol start="0"><li><p>前置操作：</p><p>[获取 jar 包]，并完成配置</p><p>得到连接 <code>Connection connection</code>，创建数据类（这里是 <code>SQL_Data</code>）</p></li><li><p>执行相关方法，返回结果集</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">List&lt;SQL_Data&gt; list = </span><br><span class="line">    queryRunner.query(connection, sql, new BeanListHandler&lt;&gt;(SQL_Data.class), ...);</span><br></pre></td></tr></table></figure><ul><li><p><code>queryRunner.query</code> 方法：执行 SQL 语句，把得到的 <code>ResultSet</code> 封装到 List 集合。这个方法会自动关闭获得的 <code>ResultSet</code>，所以不会造成资源泄漏</p></li><li><p><code>connection</code>：前置操作中得到的连接</p></li><li><p><code>sql</code>：SQL 语句</p></li><li><p><code>new BeanListHander&lt;&gt;(SQL_Data.class)</code>：利用反射机制，将数据封装到 <code>SQL_Data</code> 对象中</p></li><li><p><code>&quot;id&quot;, 1</code>：给 SQL 语句中的 <code>?</code> 赋值。因为是可变参数，可以写多个，如：<code>queryRunner.query(connection, sql, new BeanListHandler&lt;&gt;(SQL_Data.class), &quot;id&quot;, 1, &quot;name&quot;, &quot;识之律者&quot;);</code></p><p>……这里，可变参数也包含列名的场合，筛选似乎会失效。还不知道原理。特此记录。</p></li></ul></li><li><p>此时只需要关闭 <code>Connection</code></p><p><code>query()</code> 方法已经关闭了 <code>ResultSet</code> 和 <code>PreparedStatement</code></p></li></ol></blockquote></li></ul><h3 id="Apache-DbUtils-常用方法"><a href="#Apache-DbUtils-常用方法" class="headerlink" title="Apache-DbUtils 常用方法"></a>Apache-DbUtils 常用方法</h3><ul><li><p><code>queryRunner.update(connection, sql, ...)</code>：DML 语句。增删改。</p><p>后面传入可变参数，用于给 SQL 语句中的 <code>?</code> 赋值</p><p>返回值 int 代表被影响的行数。</p></li><li><p><code>queryRunner.query(connection, sql, ResultSetHandler, ...)</code>：查询。</p><p>后面传入可变参数，用于给 SQL 语句中的 <code>?</code> 赋值</p><p>关于 <code>ResultSetHandler</code>：</p><ul><li>传入 <code>new BeanListHander&lt;&gt;(SQL_Data.class)</code>：返回多行多列。这个场合，用 <code>List</code> 接收返回值。</li><li>传入 <code>new BeanHandler&lt;&gt;(SQL_Data.class)</code>：返回单行。这个场合，用 <code>SQL_Data data</code> 接收返回值。</li><li>传入 <code>new ScalarHander&lt;&gt;()</code>：返回单行单列。这个场合，用 <code>Object</code> 接收返回值。</li></ul></li></ul><h3 id="表和-JavaBean-的对应关系"><a href="#表和-JavaBean-的对应关系" class="headerlink" title="表和 JavaBean 的对应关系"></a>表和 JavaBean 的对应关系</h3><table><thead><tr><th>表类型</th><th>JavaBean类型</th></tr></thead><tbody><tr><td>int、samllint……</td><td>Integer</td></tr><tr><td>char、varchar……</td><td>String</td></tr><tr><td>double</td><td>Double</td></tr><tr><td>date</td><td>java.util.Date</td></tr></tbody></table><h2 id="BasicDAO"><a href="#BasicDAO" class="headerlink" title="BasicDAO"></a>BasicDAO</h2><blockquote><p>Apache - DbUtils + Druid 简化了 JDBC 开发，但还有不足。</p><ol><li>SQL 语句固定，不能通过传入参数控制，通用性不好。</li><li>select 操作的返回类型未知，需要使用泛型。</li><li>将来的表很多，业务需求复杂，不可能只靠一个 Java 类完成</li></ol></blockquote><p>DAO：数据访问对象（data access object）</p><ol><li><p>我们把通用的和数据库交互的操作封装到一个通用类中，称为 BasicDAO。</p></li><li><p>在 BasicDAO 基础上，每张表对应一个特化的 DAO（继承 BasicDAO），从而更好地完成功能。</p><p>比如：Data 表 -&gt; Data.java 类（JavaBean）-&gt; DataDAO.java</p></li></ol><p><strong>BasicDAO.java（示例）</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line">public class BasicDAO&lt;T&gt; &#123;</span><br><span class="line">    private QueryRunner qr = new QueryRunner();</span><br><span class="line"></span><br><span class="line">    public int update(String sql, Object... parameters)&#123;</span><br><span class="line">        Connection connection = null;</span><br><span class="line">        try &#123;</span><br><span class="line">            connection = JDBCUtils.getConnection();</span><br><span class="line">            return qr.update(connection, sql, parameters);</span><br><span class="line">        &#125; catch (SQLException e) &#123;</span><br><span class="line">            throw new RuntimeException(e);</span><br><span class="line">        &#125; finally &#123;</span><br><span class="line">            JDBCUtils.close(connection, null, null);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public List&lt;T&gt; queryMulti(String sql, Class&lt;T&gt; tClass, Object... parameters)&#123;</span><br><span class="line">        Connection connection = null;</span><br><span class="line">        try &#123;</span><br><span class="line">            connection = JDBCUtils.getConnection();</span><br><span class="line">            return qr.query(connection, sql, new BeanListHandler&lt;T&gt;(tClass), parameters);</span><br><span class="line">        &#125; catch (SQLException e) &#123;</span><br><span class="line">            throw new RuntimeException(e);</span><br><span class="line">        &#125; finally &#123;</span><br><span class="line">            JDBCUtils.close(connection, null, null);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public T querySingle(String sql, Class&lt;T&gt; tClass, Object... parameters)&#123;</span><br><span class="line">        Connection connection = null;</span><br><span class="line">        try &#123;</span><br><span class="line">            connection = JDBCUtils.getConnection();</span><br><span class="line">            return qr.query(connection, sql, new BeanHandler&lt;T&gt;(tClass), parameters);</span><br><span class="line">        &#125; catch (SQLException e) &#123;</span><br><span class="line">            throw new RuntimeException(e);</span><br><span class="line">        &#125; finally &#123;</span><br><span class="line">            JDBCUtils.close(connection, null, null);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public Object queryScalar(String sql, Object... parameters)&#123;</span><br><span class="line">        Connection connection = null;</span><br><span class="line">        try &#123;</span><br><span class="line">            connection = JDBCUtils.getConnection();</span><br><span class="line">            return qr.query(connection, sql, new ScalarHandler&lt;&gt;(), parameters);</span><br><span class="line">        &#125; catch (SQLException e) &#123;</span><br><span class="line">            throw new RuntimeException(e);</span><br><span class="line">        &#125; finally &#123;</span><br><span class="line">            JDBCUtils.close(connection, null, null);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 教程 </tag>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java 正则表达式</title>
      <link href="/2022/12/13/learn/Java/Java%20%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/"/>
      <url>/2022/12/13/learn/Java/Java%20%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<blockquote><p>正则表达式：对字符串执行模式匹配的技术。一个正则表达式，就是用某种模式去匹配字符串的一个公式。除 Java 外，还有许多语言支持正则表达式。</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">String content = &quot;HeruinKCoin&quot;;//对象文本</span><br><span class="line">String regular = &quot;[A-Z]&quot;;//[1] 创建规则</span><br><span class="line">Pattern pattern = Pattern.compile(regular);//[2] 创建模式对象</span><br><span class="line">Matcher matcher = pattern.matcher(content);//[3] 创建匹配器</span><br><span class="line">while (matcher.find())&#123;//[4] find() 是否找到下一个</span><br><span class="line">    System.out.println(matcher.group(0));//[5] group(0) 输出找到的当前对象</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p><code>Matcher</code> 底层维护了一个 <code>group[]</code> 数组。如果 <strong>[4]</strong> 在文本里匹配到对象，会在 <code>group[0]</code> 记载该起始位置 n1，在 <code>group[1]</code> 记录该结束位置的下一位 n2。即 [n1,n2) 为匹配的字符串，n2 位置是下次匹配的起始位置。</p><p>当 <strong>[1]</strong> 创建的规则包含分组（如 <code>String regular = &quot;(\\d\\d)(\\d\\d)&quot;;</code>），则第一组的起止位置记录在 <code>group[2]</code>、<code>group[3]</code>，第二组在 <code>group[4]</code>、<code>group[5]</code>。以此类推。这时，**[5]** 的 <code>group(0)</code> 代表输出全部，<code>group[1]</code> 代表输出第一组，以此类推。</p></blockquote><h2 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h2><p><strong>元字符</strong></p><ul><li>限定符</li><li>选择匹配符</li><li>分组组合和反向引用符</li><li>特殊字符</li><li>字符匹配符</li><li>定位符</li></ul><h3 id="转义符号"><a href="#转义符号" class="headerlink" title="转义符号 \"></a>转义符号 \</h3><p>使用正则表达式去检索某些特殊字符时，需要加上转义符号（如：<code>(</code> 需要写成 <code>\(</code>）</p><p>在 Java 的正则表达式中，<code>\\</code> 代表一个 <code>\</code>。**<em>——见 [[1 Java 概述]]</em>**</p><p>需要用到转义符号的字符有：<code>.</code>、<code>+</code>、<code>(</code>、<code>)</code>、<code>$</code>、<code>/</code>、<code>\</code>、<code>?</code>、<code>[</code>、<code>]</code>、<code>^</code>、<code>&#123;</code>、<code>&#125;</code></p><h3 id="字符匹配符"><a href="#字符匹配符" class="headerlink" title="字符匹配符"></a>字符匹配符</h3><table><thead><tr><th>符号</th><th>含义</th><th>示例</th><th>解释</th></tr></thead><tbody><tr><td><code>[ ]</code></td><td>可接收的字符列表</td><td><code>[abcd]</code></td><td>abcd 中的任一字符</td></tr><tr><td><code>[^]</code></td><td>不接收的字符列表</td><td><code>[^abcd]</code></td><td>非 abcd 的任意字符</td></tr><tr><td><code>-</code></td><td>连字符</td><td><code>[a-z]</code></td><td>a - z 中的任意字符</td></tr><tr><td><code>.</code></td><td>匹配除 <code>\n</code> 外的任意字符</td><td><code>a..b</code></td><td>a 开头，b结尾，中间含 2 字符</td></tr><tr><td><code>\d</code></td><td>匹配单个数字字符</td><td><code>\d&#123;3&#125;</code></td><td>包含 3 个数字</td></tr><tr><td><code>\D</code></td><td>匹配单个非数字字符</td><td><code>\D(\d)*</code></td><td>单个非数字字符开头，后接任意个数字字符</td></tr><tr><td><code>\w</code></td><td>匹配单个数字、大小写字母字符</td><td><code>\w&#123;2&#125;\d&#123;3&#125;</code></td><td>2 个数字字母字符开头，后接 3 个数字字符</td></tr><tr><td><code>\W</code></td><td>匹配单个非数字、非大小写字母字符</td><td><code>\W+\d&#123;2&#125;</code></td><td>以至少 1 个非数字字母字符开头，后接 2 个数字字符</td></tr><tr><td><code>\s</code></td><td>匹配空白字符（空格、制表位等）</td><td><code>\S</code></td><td>匹配非空白字符</td></tr></tbody></table><ul><li><p>关于 <code>.</code>：特别地，出现 <code>[.]</code> 的场合，那个小圆点依然表示小圆点。<code>[?]</code> 同理，表示问号</p></li><li><p>正则表达式默认区分大小写。要不区分大小写，就加上 <code>(?i)</code></p><ul><li><p><code>(?i)abc</code>：即 abc 都不区分大小写</p></li><li><p><code>a(?i)bc</code>：即仅 bc 不区分大小写</p></li><li><p><code>a((?i)b)c</code>：即仅 b 不区分大小写</p></li><li><p>创建模式对象时，若如此做：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Pattern pattern = Pattern.compile(regular, Pattern.CASE_INSENSITIVE);</span><br></pre></td></tr></table></figure><p>这个场合，也能不区分大小写。</p></li></ul></li></ul><h3 id="选择匹配符"><a href="#选择匹配符" class="headerlink" title="选择匹配符 |"></a>选择匹配符 |</h3><p>和 Java 的逻辑或 <code>|</code> 一样！</p><h3 id="限定符"><a href="#限定符" class="headerlink" title="限定符"></a>限定符</h3><table><thead><tr><th>符号</th><th>含义</th><th>示例</th><th>解释</th></tr></thead><tbody><tr><td><code>*</code></td><td>指定字符重复任意次（可以为 0 次）</td><td><code>(abc)*</code></td><td>仅包含任意个 abc 字符串的字符串</td></tr><tr><td><code>+</code></td><td>指定字符重复至少一次</td><td><code>m+(abc)*</code></td><td>以任意个 m 开头，后面可以有 abc 字符串的字符串</td></tr><tr><td><code>?</code></td><td>指定字符重复最多一次（可以为 0 次）</td><td><code>m+abc?</code></td><td>以任意个 m 开头，后面可以有最多一个 abc 字符串的字符串</td></tr><tr><td><code>&#123;n&#125;</code></td><td>n 个匹配</td><td><code>[abc]&#123;3&#125;</code></td><td>长度为 3 的 abc 中的任意字符的组合</td></tr><tr><td><code>&#123;n,&#125;</code></td><td>至少 n 个匹配</td><td><code>[abc]&#123;3,&#125;</code></td><td>长度不小于 3 的 abc 中的任意字符的组合</td></tr><tr><td><code>&#123;n,m&#125;</code></td><td>n 到 m 个匹配</td><td><code>[abc]&#123;3,5&#125;</code></td><td>长度介于 3 到 5 之间的 abc 中的任意字符的组合</td></tr></tbody></table><ul><li><p>Java 的匹配模式默认是贪婪匹配。即：<code>aaaaa</code> 匹配 <code>a&#123;3,5&#125;</code> 的场合，会匹配到 <code>aaaaa</code></p><p>希望实现非贪婪匹配，可以添加额外的 <code>?</code>。如：<code>*?</code>、<code>+?</code>、<code>??</code> 代表各自规则的非贪婪匹配</p></li></ul><h3 id="定位符"><a href="#定位符" class="headerlink" title="定位符"></a>定位符</h3><table><thead><tr><th>符号</th><th>含义</th><th>示例</th><th>解释</th></tr></thead><tbody><tr><td><code>^</code></td><td>指定起始字符</td><td><code>^[0-9]+[a-z]*</code></td><td>至少一个数字开头，后接任意小写字母字符串</td></tr><tr><td><code>&amp;</code></td><td>指定结束字符</td><td><code>^[0-9][a]$</code></td><td>一个数字开头，一个 a 结尾</td></tr><tr><td><code>\b</code></td><td>匹配目标字符串的边界</td><td><code>K\.C\b</code></td><td>匹配边界的 K.C</td></tr><tr><td><code>\B</code></td><td>匹配目标字符串的非边界</td><td><code>K\.C\B</code></td><td>匹配非边界的 K.C</td></tr></tbody></table><ul><li>边界即字符串的末尾，或字符串中空格间隔的子串的末尾。</li></ul><h3 id="分组"><a href="#分组" class="headerlink" title="分组"></a>分组</h3><table><thead><tr><th>符号</th><th>含义</th></tr></thead><tbody><tr><td><code>(pattern)</code></td><td>非命名捕获。捕获匹配的字符串</td></tr><tr><td><code>(?&lt;name&gt;pattern)</code>、<code>(?&#39;name&#39;pattern)</code></td><td>命名捕获。用于 name 的字符串不能包含标点符号，也不能以数字开头</td></tr></tbody></table><ul><li>编号为 0 的第一个捕获是由整个正则表达式匹配的文本。其他捕获结果根据左括号的顺序从 1 开始自动编号。</li></ul><h3 id="非捕获分组"><a href="#非捕获分组" class="headerlink" title="非捕获分组"></a>非捕获分组</h3><table><thead><tr><th>符号</th><th>含义</th><th>示例</th><th>解释</th></tr></thead><tbody><tr><td><code>(?:pattern)</code></td><td>匹配 pattern 但不捕获该匹配的子表达式</td><td>&#96;industr(?:y</td><td>ies)&#96;</td></tr><tr><td><code>(?=pattern)</code></td><td>匹配处于 pattern 前的搜索字符串。非捕获分组</td><td>&#96;Windows(?&#x3D;7</td><td>10</td></tr><tr><td><code>(?!pattern)</code></td><td>匹配不处于 pattern 前的搜索字符串。非捕获分组</td><td>&#96;Windows(?!7</td><td>10</td></tr></tbody></table><h2 id="常用类"><a href="#常用类" class="headerlink" title="常用类"></a>常用类</h2><ul><li><p><code>Pattern</code> 类：</p><p><code>Pattern</code> 对象是一个正则表达式对象，该类没有公共构造方法。</p><p>用 <code>Pattern.compile(reg)</code> 获取一个 <code>Pattern</code> 对象。</p></li><li><p><code>Matcher</code> 类：</p><p><code>Matcher</code> 对象是输入字符串进行解释和匹配的引擎，也没有公共构造方法。</p><p>用 <code>Pattern</code> 对象的 <code>matcher(content)</code> 方法获得一个 <code>Matcher</code> 对象。</p></li><li><p><code>PatternSyntaxExcption</code> 类：</p><p><code>PatternSyntaxExcption</code> 是一个非强制异常类，表示一个正则表达式中的语法错误。</p></li></ul><h3 id="Pattern-类常用方法"><a href="#Pattern-类常用方法" class="headerlink" title="Pattern 类常用方法"></a>Pattern 类常用方法</h3><ul><li><p><code>Pattern.matches(reg, content)</code>：整体匹配，输入的字符串是否符合表达式。返回布尔值。</p><p><code>matcher.matches()</code>：整体匹配，字符串是否符合表达式。返回布尔值。前面的方法实际上就是这个方法。</p></li><li><p><code>Pattern.compile(reg)</code>：返回一个指定表达式的 <code>Pattern</code> 对象</p></li><li><p><code>pattern.matcher(content)</code>：返回一个字串的 <code>Matcher</code> 对象</p></li><li><p><code>matcher.pattern()</code>：返回该 <code>Matcher</code> 对象的表达式</p><p><code>pattern.pattern()</code>：返回该 <code>Pattern</code> 对象的表达式</p></li><li><p><code>matcher.find()</code>：尝试查找下一个匹配的序列，返回布尔值</p><p><code>matcher.find(int)</code>：重置该匹配器，从指定索引位置开始重新查找</p></li><li><p><code>matcher.start()</code>：返回本次匹配的字符起始位置的索引</p><p><code>matcher.end()</code>：返回本次匹配的字符结束位置 + 1 的索引</p><p>这个场合，<code>content.substring(matcher.start(), matcher.end())</code> 就是匹配的字符串</p></li><li><p><code>matcher.start(int)</code>：返回本次匹配的字符的该组内容的起始位置的索引</p><p><code>matcher.end(int)</code>：返回本次匹配的字符的该组内容的结束位置 + 1 的索引</p></li><li><p><code>matcher.replaceAll(str)</code>：替换匹配到的全部内容</p><p><code>matcher.replaceFirst(str)</code>：替换第一次匹配到的内容</p><p>这些场合，返回的字符串才是替换后的字符串。原字符串不变。</p></li></ul><h2 id="分组、捕获、反向引用"><a href="#分组、捕获、反向引用" class="headerlink" title="分组、捕获、反向引用"></a>分组、捕获、反向引用</h2><ul><li><p>分组（子表达式）</p></li><li><p>捕获：把正则表达式中，子表达式（分组）的内容保存到内存中以数字编号或显式命名的组里，方便后面引用。以分组的左括号为标志，第一组组号为 1，第二组为 2，以 0 代表整个正则表达式。</p></li><li><p>反向引用：分组的内容被捕获后，可以在这个括号后使用。这种引用既可以是在正则表达式内部，也可以在外部。内部反向引用 <code>\分组号</code>、外部反向引用 <code>$分组号</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">String regular = &quot;(\\w)\\1+&quot;;//即，重复的字母或数字</span><br><span class="line">Matcher matcher = Pattern.compile(regular).mathcer(content);</span><br><span class="line">content = matcher.replaceAll(&quot;$1&quot;);//这样，就完成了去重</span><br></pre></td></tr></table></figure></li></ul><h2 id="在-String-中使用正则表达式"><a href="#在-String-中使用正则表达式" class="headerlink" title="在 String 中使用正则表达式"></a>在 String 中使用正则表达式</h2><ul><li><code>str.matches(reg)</code>：整体匹配</li><li><code>str.replaceAll(reg, reg)</code>：替换匹配到的全部内容</li><li><code>str.split(reg)</code>：分割内容</li></ul>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 教程 </tag>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java 反射</title>
      <link href="/2022/12/12/learn/Java/Java%20%E5%8F%8D%E5%B0%84/"/>
      <url>/2022/12/12/learn/Java/Java%20%E5%8F%8D%E5%B0%84/</url>
      
        <content type="html"><![CDATA[<blockquote><ol><li>反射机制（Reflection）允许程序在执行期借助于 Reflection API 取得任何类的内部信息（如成员变量、成员方法等），并能操作对象的属性及方法。反射在设计模式和框架底层都会用到。</li><li>加载完类之后，在堆中就产生了一个 <code>Class</code> 类型的对象（一个类只有一个 <code>Class</code> 对象），这个对象包含了类的完整结构信息。通过这个对象得到类的结构。这个对象就像一面镜子，透过这个镜子看到类的结构。所以，形象地称之为：反射</li></ol><p>ocp 原则（开闭原则）：不修改源码来扩展功能</p></blockquote><p><strong>计算机的三个阶段</strong></p><ol><li><p>代码阶段 &#x2F; 编译阶段</p><blockquote><p>编写代码 ——（Javac 编译）——&gt; .class 字节码文件</p></blockquote></li><li><p>Class 类阶段 &#x2F; 加载阶段</p><blockquote><p>字节码文件 ——（ClassLoader 类加载器）——&gt; <code>Class</code> 类对象（堆中）· 字节码二进制数据 &#x2F; 元数据（方法区）</p><p><code>Class</code> 类对象包含：成员变量 <code>Field[] fields</code>、构造器 <code>Constructor[] cons</code>、成员方法 <code>Methord[] ms</code></p></blockquote></li><li><p>Runtime 运行阶段</p><blockquote><p>创建对象，该对象知道其属于哪个 <code>Class</code> 对象</p></blockquote></li></ol><p><strong>反射机制可以完成</strong></p><ol><li>在运行时判断任意一个对象所属的类</li><li>在运行时构造任意一个类的对象</li><li>在运行时得到任意一个类所具有的成员变量和方法</li><li>在运行时调用任意一个对象的成员变量和方法</li><li>生成动态代理</li></ol><h2 id="反射相关的常用类"><a href="#反射相关的常用类" class="headerlink" title="反射相关的常用类"></a>反射相关的常用类</h2><ol><li><p><code>java.lang.Class</code>：代表一个类。<code>Class</code> 对象表示某个类加载后在堆中的对象</p><blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Class cls = Class.forName(classFullPath);//[1]</span><br><span class="line">Object o = cls.newInstance();//[2]</span><br></pre></td></tr></table></figure><ol><li>通过完整类名得到一个类的 Class 对象</li><li>通过该 Class 对象创建一个该类的 对象实例</li></ol></blockquote></li><li><p><code>java.lang.reflect.Method</code>：代表类的方法。<code>Method</code> 对象表示某个类的某个方法</p><blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Method method = cls.getMethod(methodName);//[1]</span><br><span class="line">method.invoke(o);//[2]</span><br></pre></td></tr></table></figure><ol><li>通过该 Class 对象得到一个 方法对象</li><li>方法对象.invoke：调用该方法</li></ol></blockquote></li><li><p><code>java.lang.reflect.Field</code>：代表类的成员变量</p><blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Field field = cls.getField(fieldName);//[1]</span><br></pre></td></tr></table></figure><ol><li>该方法只能得到非私有对象</li></ol></blockquote></li><li><p><code>java.lang.reflect.Constructor</code>：代表类的构造方法</p><blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Constructor constructor = cls.getConstructor();//[1]</span><br><span class="line">Constructor constructor2 = cls.getConstructor(String.class)</span><br><span class="line">    //[2]</span><br></pre></td></tr></table></figure><ol><li>得到一个无参构造器</li><li>得到一个形参是 <code>(String str)</code> 的构造器</li></ol></blockquote></li></ol><p><strong>反射的优点和缺点</strong></p><ul><li>优点：可以动态地创建和使用对象（也是框架底层核心），使用灵活。没有反射机制，框架技术就失去底层支撑</li><li>缺点：使用反射基本是解释执行。这对执行速度有影响。</li></ul><p><strong>反射调用优化 - 关闭访问检查</strong></p><ol><li><p><code>Method</code> 和 <code>Field</code>、<code>Constructor</code> 对象都有 <code>setAccessible()</code> 方法</p></li><li><p><code>setAccessible()</code> 作用是启动和禁用访问安全检查的开关</p></li><li><p>参数值为 true，表示反射对象在使用时取消访问检查，这样能提高反射效率。</p><p>为 false 表示执行访问检查</p></li></ol><h2 id="Class-类"><a href="#Class-类" class="headerlink" title="Class 类"></a>Class 类</h2><ol><li><code>Class</code> 也是类，因此也继承 <code>Object</code> 类</li><li><code>Class</code> 类不是 new 出来的，而是系统创建的</li><li>对于某个类的 <code>Class</code> 类对象，在内存中只有一份，因为类只加载一次</li><li>每个类的实例都会记得自己是由哪个 <code>Class</code> 实例生成</li><li>通过 <code>Class</code> 可以完整地得到一个类的完整结构，通过一系列 API</li><li><code>Class</code> 对象是存放在堆的</li><li>类的字节码二进制数据，是放在方法区的。有的地方称为类的元数据（包括 方法代码、变量名、方法名、访问权限 等）</li></ol><h3 id="Class-类的常用方法"><a href="#Class-类的常用方法" class="headerlink" title="Class 类的常用方法"></a>Class 类的常用方法</h3><ul><li><p><code>Class.forName(String)</code>：返回指定类名的 <code>Class</code> 对象</p></li><li><p><code>newInstance()</code>：返回一个无参构造器创建的实例</p></li><li><p><code>getName()</code>：返回该 <code>Class</code> 对象表示的实体的全类名</p></li><li><p><code>getClass()</code>：返回该 <code>Class</code> 对象的运行类型 <code>java.lang.Class</code></p></li><li><p><code>getPackage()</code>：返回该 <code>Class</code> 对象所在的包</p></li><li><p><code>getSuperClass()</code>：返回该 <code>Class</code> 对象的父类 <code>Class</code> 对象</p></li><li><p><code>getInterface()</code>：返回该 <code>Class</code> 对象的接口（数组）</p></li><li><p><code>getAnnotations()</code>：返回注解信息（<code>Annotation[]</code>）</p></li><li><p><code>getClassLoader()</code>：返回该 <code>Class</code> 对象的加载器（<code>ClassLoader</code> 类型）</p></li><li><p><code>getSuperclass()</code>：返回该 <code>Class</code> 对象实体的超类的 <code>Class</code></p></li><li><p><code>getConstructors()</code>：返回本类所有包含 <code>public</code> 修饰的构造器的 <code>Constructor</code> 对象数组</p><p>该方法返回的构造器不含父类构造器！</p></li><li><p><code>getDeclaredConstructer()</code>：返回本类所有构造器的 <code>Constructor</code> 对象数组</p></li><li><p><code>getFileds()</code>：返回一个包含 <code>public</code> 修饰的属性的 <code>Field</code> 对象的数组</p><p><code>getFiled(String name)</code>：返回指定的 <code>Field</code></p></li><li><p><code>getDeclaredFields()</code>：获取本类中所有属性</p></li><li><p><code>field.get(instance)</code>：返回指定实例的指定属性</p></li><li><p><code>field.set(instance, ..)</code>：给指定实例的指定属性赋值</p></li><li><p><code>getMethod()</code>：获得所有 <code>public</code> 修饰的方法的 <code>Method</code> 对象</p></li><li><p><code>getMethod(String name, Class paramTypes, ...)</code>：返回一个 <code>Method</code> 对象，其形参类型为 paramType</p></li><li><p><code>getDeclaredMethod()</code>：获取本类中所有方法</p></li></ul><h3 id="获取-Class-对象"><a href="#获取-Class-对象" class="headerlink" title="获取 Class 对象"></a>获取 Class 对象</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">package com.melody.note;</span><br><span class="line">class Test &#123;&#125;</span><br></pre></td></tr></table></figure><ol><li><p>（编译阶段）已知一个类的全类名，且该类在类路径下：</p><blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Class cls1 = Class.forName(&quot;com.melody.note.Test&quot;);</span><br></pre></td></tr></table></figure><p>应用场景：配置文件，读取类全路径，加载类。</p><p>可能抛出 <code>ClassNotFoundExcption</code></p></blockquote></li><li><p>（加载阶段）已知具体的类：</p><blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Class cls2 = Test.class;</span><br></pre></td></tr></table></figure><p>应用场景：参数传递。</p><p>该方法最为安全</p></blockquote></li><li><p>（运行阶段）已知某个类的实例：</p><blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Class cls3 = new Test().getClass();</span><br></pre></td></tr></table></figure><p>应用场景：通过创建好的对象获取 <code>Class</code> 对象</p></blockquote></li><li><p>通过类加载器：</p><blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ClassLoader cll = new Test().getClass().getClassLoader();</span><br><span class="line">Class cls4 = cll.loadClass(&quot;com.melody.note.Test&quot;);</span><br></pre></td></tr></table></figure></blockquote></li><li><p>基本数据类型：</p><blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Class clsB1 = int.class;</span><br><span class="line">Class`&lt;Boolean&gt;` clsB2 = boolean.class;</span><br></pre></td></tr></table></figure></blockquote></li><li><p>基本数据类型包装类：</p><blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Class clsB3 = Character.TYPE;</span><br><span class="line">Class`&lt;Long&gt;` clsB4 = Long.TYPE;</span><br></pre></td></tr></table></figure></blockquote></li></ol><h3 id="哪些类有-Class-对象"><a href="#哪些类有-Class-对象" class="headerlink" title="哪些类有 Class 对象"></a>哪些类有 Class 对象</h3><ol><li>外部类、成员内部类、静态内部类、局部内部类、匿名内部类</li><li>接口（interface）</li><li>数组</li><li>枚举（enum）</li><li>注解</li><li>基本数据类型</li><li>void</li></ol><h2 id="类的加载"><a href="#类的加载" class="headerlink" title="类的加载"></a>类的加载</h2><p><strong>基本说明</strong></p><blockquote><p>反射机制是 Java 实现动态语言的关键，也就是通过反射实现类动态加载</p></blockquote><ol><li>静态加载：编译时加载相关的类，如果没有则报错。依赖性强</li><li>静态加载：运行时加载需要的类，如果运行时不用该类，则不报错。降低了依赖性</li></ol><p><strong>类加载时机</strong></p><ol><li>创建对象时（new） [静态加载]</li><li>子类被加载时，父类也被加载 [静态加载]</li><li>调用类中的静态成员 [静态加载]</li><li>通过反射 [动态加载]</li></ol><p><a href="https://i-melody.github.io/img/Java_InputImage/%E7%B1%BB%E5%8A%A0%E8%BD%BD%E5%9B%BE_21.3.png"><img src="https://i-melody.github.io/img/Java_InputImage/%E7%B1%BB%E5%8A%A0%E8%BD%BD%E5%9B%BE_21.3.png"></a></p><p><em>（类加载图_21.3）</em></p><ul><li><p>加载（Loading）：</p><p>将类的 .class 文件读入内存，并为之创建一个 java.lang.Class 对象。此过程由类加载器完成</p></li><li><p>连接（Linking）：</p><p>将类的二进制数据合并进 JRE 中</p></li><li><p>初始化（initialization）：</p><p>JVM 负责对类进行初始化。这里主要是静态成员</p></li></ul><h3 id="类加载的五个阶段"><a href="#类加载的五个阶段" class="headerlink" title="类加载的五个阶段"></a>类加载的五个阶段</h3><ul><li><p><strong>加载阶段</strong></p><p>JVM 在该阶段的主要目的是将字节码从不同数据源（.class 文件、jar 包、网络等）转化为二进制字节流加载到内存中，并生成一个代表该类的 <code>java.lang.Class</code> 对象</p></li><li><p><strong>连接阶段 - 验证</strong></p><p>目的是确保 <code>Class</code> 文件的字节流中包含的信息符合当前虚拟机的要求，并且不会危害虚拟机自身的安全。</p><p>包括：文件格式验证（是否以魔数 0xcafebabe 开头）、元数据验证、字节码验证、符号引用验证</p><p>可以考虑使用 <code>-Xverify:none</code> 参数来关闭大部分的类验证措施，以缩短虚拟机加载的时间</p></li><li><p><strong>连接阶段 - 准备</strong></p><p>JVM 会在该阶段对 静态变量 分配内存并执行默认初始化。这些变量使用的内存都将在方法区中进行分配</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">public int n1 = 1;//实例属性，非静态变量，此阶段不分配内存</span><br><span class="line">public static int n2 = 2;//静态变量，默认初始化为 0</span><br><span class="line">public static final int n3 = 3;//static final 常量，静态初始化为 3</span><br></pre></td></tr></table></figure></li><li><p><strong>连接阶段 - 解析</strong></p><p>JVM 将常量池内符号引用替换为直接引用的过程</p></li><li><p><strong>初始化</strong></p><p>到初始化阶段，才真正开始执行类中定义的 Java 程序代码。此阶段是执行 <code>&lt;clinit&gt;()</code> 方法的过程</p><p><code>&lt;clinit&gt;()</code> 方法是由编译器按语句在文件中出现的顺序，依次自动收集类中所有静态变量的赋值动作和静态代码块中的语句，并进行合并</p><p>JVM 会保证一个类的 <code>&lt;clinit&gt;()</code> 方法在多线程环境中被正确地加锁、同步。如果多个线程去初始化一个类，那么只会有一个线程去执行这个类的 <code>&lt;clinit&gt;()</code> 方法，其他线程都需要阻塞等待，直到活动线程执行 <code>&lt;clinit&gt;()</code> 方法完毕</p></li></ul><h2 id="通过反射获取类的结构信息"><a href="#通过反射获取类的结构信息" class="headerlink" title="通过反射获取类的结构信息"></a>通过反射获取类的结构信息</h2><p><strong><code>java.lang.Class</code> 类（与前面的的重复）</strong></p><blockquote><ul><li><p><code>getSuperClass()</code>：返回该 <code>Class</code> 对象的父类 <code>Class</code> 对象</p></li><li><p><code>getInterface()</code>：返回该 <code>Class</code> 对象的接口（数组）</p></li><li><p><code>getAnnotations()</code>：返回注解信息（<code>Annotation[]</code>）</p></li><li><p><code>getClassLoader()</code>：返回该 <code>Class</code> 对象的加载器（<code>ClassLoader</code> 类型）</p></li><li><p><code>getSuperclass()</code>：返回该 <code>Class</code> 对象实体的超类的 <code>Class</code></p></li><li><p><code>getConstructors()</code>：返回本类所有包含 <code>public</code> 修饰的构造器的 <code>Constructor</code> 对象数组</p><p>该方法返回的构造器不含父类构造器！</p></li><li><p><code>getDeclaredConstructer()</code>：返回本类所有构造器的 <code>Constructor</code> 对象数组</p></li><li><p><code>getFileds()</code>：返回一个包含 <code>public</code> 修饰的属性的 <code>Field</code> 对象的数组</p><p><code>getFiled(String name)</code>：返回指定的 <code>Field</code></p></li><li><p><code>getDeclaredFields()</code>：获取本类中所有属性</p></li><li><p><code>field.get(instance)</code>：返回指定实例的指定属性</p></li><li><p><code>field.set(instance, ..)</code>：给指定实例的指定属性赋值</p></li><li><p><code>getMethod()</code>：获得所有 <code>public</code> 修饰的方法的 <code>Method</code> 对象</p></li><li><p><code>getMethod(String name, Class paramTypes, ...)</code>：返回一个 <code>Method</code> 对象，其形参类型为 paramType</p></li><li><p><code>getDeclaredMethod()</code>：获取本类中所有方法</p></li></ul></blockquote><p><strong><code>java.lang.reflect.Field</code> 类</strong></p><blockquote><ul><li><p><code>getModifiers()</code>：以 int 形式返回修饰符</p><p>默认修饰符 [0]、public [1]、private [2]、protected [4]、static [8]、final [16]</p><p>示例：</p><blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">public static final int n = 0;</span><br></pre></td></tr></table></figure><p>这个变量的修饰符的 int 表示 &#x3D; 1 + 8 + 16 &#x3D; 25</p></blockquote></li><li><p><code>getType()</code>：以 <code>Class</code> 形式返回类型</p><blockquote><p>上例变量的 <code>getType()</code> 等同于 <code>Integer.getClass()</code></p></blockquote></li><li><p><code>getName()</code>：返回属性名</p></li></ul></blockquote><p><strong><code>java.lang.reflect.Method</code> 类</strong></p><blockquote><ul><li><code>getModifiers()</code>：以 int 形式返回修饰符（同上）</li><li><code>getName()</code>：返回方法名</li><li><code>getReturnType()</code>：以 <code>Class</code> 形式返回返回类型</li><li><code>getParameterTypes()</code>：以 <code>Class[]</code> 形式返回形参类型数组</li></ul></blockquote><p><strong><code>java.lang.reflect.Constructer</code> 类</strong></p><blockquote><ul><li><code>getModifiers()</code>：以 int 形式返回修饰符</li><li><code>getName()</code>：返回构造器名（和全类名相等）</li><li><code>getParameterTypes()</code>：以 <code>Class[]</code> 形式返回形参类型数组</li></ul></blockquote><h2 id="通过反射创建对象"><a href="#通过反射创建对象" class="headerlink" title="通过反射创建对象"></a>通过反射创建对象</h2><ol><li><p>调用类中的 public 修饰的无参构造器</p><blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Object obj1 = cls.newInstance();</span><br></pre></td></tr></table></figure></blockquote></li><li><p>调用类中指定的构造器</p><blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Constructer cons = cls.getConstructer(int.class, String.class, ...);</span><br><span class="line">Object obj2 = cons.newInstance(1, &quot;nnn&quot;, ...);</span><br></pre></td></tr></table></figure></blockquote></li><li><p><code>setAccessible(true)</code>：爆破（暴力破解）。使用反射可以访问 private 构造器</p><blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Constructer cons2 = cls.getDeclaredConstructer(boolean.class ...);</span><br><span class="line">cons2.setAccessible(true);</span><br><span class="line">Object obj3 = cons.newInstance(false, ...);</span><br></pre></td></tr></table></figure></blockquote></li></ol><h2 id="通过反射访问成员"><a href="#通过反射访问成员" class="headerlink" title="通过反射访问成员"></a>通过反射访问成员</h2><blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Field field = cla.getDeclaredField(&quot;name&quot;);</span><br><span class="line">field.setAccessible(true);</span><br><span class="line">field.set(o, &quot;111&quot;);//[1]</span><br></pre></td></tr></table></figure><ol><li><p>o 表示一个类的实例</p><p>如果该属性是静态属性，则对象 o 可以是 null</p></li></ol></blockquote><blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Method method = cls.getDeclaredMethod(&quot;m1&quot;);</span><br><span class="line">method.setAccessible(true);</span><br><span class="line">Object returnObj = method.invoke(o, &#x27;c&#x27;, ...);//[1]</span><br></pre></td></tr></table></figure><ol><li><p>o 表示一个类的实例，后面是实参列表</p><p>同理，静态方法的场合，对象 o 可以是 null</p></li></ol></blockquote>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 教程 </tag>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java 网络编程</title>
      <link href="/2022/12/11/learn/Java/Java%20%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/"/>
      <url>/2022/12/11/learn/Java/Java%20%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<p>网络通信：两台设备之间通过网络实现数据传输。</p><p><code>java.net</code> 包下提供了一系列类或接口，供程序员使用，完成网络通信</p><h2 id="网络的相关概念"><a href="#网络的相关概念" class="headerlink" title="网络的相关概念"></a>网络的相关概念</h2><p><strong>网络</strong></p><p>网络：两台或多台设备通过一定物理设备连接起来构成了网络</p><p>根据网络覆盖范围的不同，对网络进行分类：</p><ul><li>局域网：覆盖范围最小，仅覆盖一个教室·机房</li><li>城域网：覆盖范围较大，可覆盖一个城市</li><li>广域网：覆盖范围最大，可以覆盖全国，甚至全球。万维网 是广域网的代表</li></ul><p><strong>IP 地址</strong></p><p>IP 地址：用于唯一标识网络中的每台计算机 &#x2F; 主机</p><p>查看 IP 地址：<code>ipconfig</code></p><p>IPv4 是 4 个字节（32位）表示。每个字节范围是 [0,255]</p><p>IP 地址的表示形式：点分十进制（xx.xx.xx.xx），每个十进制数范围是 [0,255]</p><p>IP 地址的组成 &#x3D; 网络地址 + 主机地址</p><ul><li>A类：0 + 7 位网络号 + 24 位主机号（0.0.0.0 ~ 127.255.255.255）</li><li>B类：1 + 0 + 14 位网络号 + 16 位主机号（128.0.0.0 ~ 191.255.255.255）</li><li>C类：1 + 1 + 0 + 21 位网络号 + 8 位主机号（192.0.0.0 ~ 223.255.255.255）</li><li>D类：1 + 1 + 1 + 0 + 28 位多播组号（224.0.0.0 ~ 239.255.255.255）</li><li>E类：1 + 1 + 1 + 1 + 0 + 27 位（留待后用）（240.0.0.0 ~ 247.255.255.255）</li></ul><p>IPv6 是互联网工程任务组设计的用于替代 IPv4 的下一代 IP 协议。其地址数量可以为全世界每一粒沙子编上一个地址</p><p>IPv4 最大的问题在于网络地址资源有限，严重制约了互联网的应用和发展。IPv6 的使用，不仅能解决网络地址资源数量的问题，也解决了多种接入设备接入互联网的障碍</p><p>IPv6 使用 16 个字节（128 位）表示地址。</p><p>表示形式有：</p><ul><li><p>冒分十六进制表示法： （X:X:X:X:X:X:X:X）</p><p><code>:</code> 之间的部分，出现 0 开头的场合，那些 0 可以省略</p></li><li><p>0 位压缩表示法：把连续的 <code>0</code> 压缩为 <code>::</code>，这个压缩只能出现一次（X::X:X）</p></li><li><p>内嵌 IPv4 地址表示法：前 96位 用冒分十六进制表示，后面 32位 用 IPv4 的点分十进制（X:X:X:X:X:XX:d.d.d.d）</p></li></ul><p><strong>子网掩码</strong></p><p>只用一个 IP 地址，无法分辨网络部分与主机部分的分界线。因此，使用子网掩码来表示分界线。</p><p>这个场合，对应的网络部分的子网掩码的二进制数字设为 1</p><p><a href="https://i-melody.github.io/img/Java_InputImage/%E5%AD%90%E7%BD%91%E6%8E%A9%E7%A0%81%E5%9B%BE_19.1.png"><img src="https://i-melody.github.io/img/Java_InputImage/%E5%AD%90%E7%BD%91%E6%8E%A9%E7%A0%81%E5%9B%BE_19.1.png"></a><em>(子网掩码图_19.1)</em></p><p>此外，还能把子网掩码与 IP 地址组合</p><ul><li>在 IP 地址后加斜线及网络部分二进制数字数（IPV4）：192.168.15.1&#x2F;16</li><li>IPv6：X:X:X:X:X:X:X:X&#x2F;64</li></ul><p>通过更改子网掩码，可以细分网络为多个子网。</p><p><a href="https://i-melody.github.io/img/Java_InputImage/%E5%AD%90%E7%BD%91%E5%9B%BE_19.1.png"><img src="https://i-melody.github.io/img/Java_InputImage/%E5%AD%90%E7%BD%91%E5%9B%BE_19.1.png"></a><em>(子网图_19.1)</em></p><p><strong>保留地址</strong></p><p>IP 还定义了一套特殊的地址格式，称为保留地址，这些保留地址不分配给任何主机。</p><table><thead><tr><th>网络号</th><th>主机号</th><th>地址类型</th><th>举例</th><th>用途</th></tr></thead><tbody><tr><td>全 0</td><td>全 0</td><td>本机地址</td><td>0.0.0.0</td><td>启动时使用</td></tr><tr><td>任意</td><td>全 0</td><td>网络地址</td><td>61.0.0.0</td><td>标识一个网络</td></tr><tr><td>任意</td><td>全 1</td><td>直接广播地址</td><td>129.21.255.255</td><td>在特定网络上广播</td></tr><tr><td>全 1</td><td>全 1</td><td>有线广播地址</td><td>255.255.255.255</td><td>在本网段上广播</td></tr><tr><td>第一段为 127</td><td>任意</td><td>回送地址</td><td>127.0.0.1</td><td>测试</td></tr></tbody></table><p><strong>私有地址</strong></p><p>私有地址：与 IP 地址（全局地址）相比，在不同的网络中可以重复的地址。</p><p>私有地址是以下范围中的地址。这些地址不能作为全局地址使用：</p><ul><li>10.0.0.0 ~ 10.255.255.255</li><li>172.16.0.0 ~ 172.31.255.255</li><li>192.168.0.0 ~ 192.168.255.255</li></ul><p>将私有地址连接到全局地址的方法：</p><ul><li>NAT：一种私有地址与全局地址一一对应的机制</li><li>NAPT：一种用一个全局地址连接多个计算机的机制</li></ul><p><strong>域名</strong></p><p>示例：<a href="http://bbs.tianya.cn/post-house-252774-1.shtml">http://bbs.tianya.cn/post-house-252774-1.shtml</a></p><p>为了方便记忆，解决记忆 IP 的困难</p><p>IP 地址根据 HTTP 协议 映射成域名</p><p>通过 DNS（Domain Name System）服务将域名转化为 IP 地址</p><p><strong>端口号</strong></p><p>用于标识计算机上某个特定的网络程序</p><p>表示形式：以整数形式，范围 [0,65535]</p><p>0 ~ 1024 已经被占用，不要使用。比如 ssh 22、ftp 21、smtp 25、http 80</p><p>常见的网络程序端口号：</p><ul><li>tomcat：8080</li><li>mysql：3306</li><li>oracle：1521</li><li>sqlserver：1433</li></ul><p><strong>网络通信协议</strong></p><p>协议（TCP&#x2F;IP）</p><p>TCP&#x2F;IP：传输控制协议 &#x2F; 因特网互联协议（Transmission Control Protocol &#x2F; Internet Protocol），又叫 网络通讯协议。这个协议是 Internet 最基本的协议、Internet 国际互联网络的基础。简单来讲，就是由 网络层的 IP 协议 和传输层的 TCP 协议 组成</p><p><a href="https://i-melody.github.io/img/Java_InputImage/%E6%95%B0%E6%8D%AE%E5%B0%81%E8%A3%85%E5%9B%BE_19.1.png"><img src="https://i-melody.github.io/img/Java_InputImage/%E6%95%B0%E6%8D%AE%E5%B0%81%E8%A3%85%E5%9B%BE_19.1.png"></a></p><p><em>(数据封装图_19.1)</em></p><table><thead><tr><th>OSI 模型（理论）</th><th>TCP&#x2F;IP 模型（实际使用）</th><th>TCP&#x2F;IP 模型各层对应协议</th></tr></thead><tbody><tr><td>应用层</td><td>应用层</td><td>HTTP、ftp、telent、DNS……</td></tr><tr><td>表示层</td><td>应用层</td><td>同上</td></tr><tr><td>会话层</td><td>应用层</td><td>同上</td></tr><tr><td>传输层</td><td>传输层（TCP）</td><td>TCP、UDP……</td></tr><tr><td>网络层</td><td>网络层（IP）</td><td>IP、ICMP、ARP……</td></tr><tr><td>数据链路层</td><td>物理 + 数据链路层</td><td>Link</td></tr><tr><td>物理层</td><td>物理 + 数据链路层</td><td>同上</td></tr></tbody></table><h3 id="TCP-和-UDP"><a href="#TCP-和-UDP" class="headerlink" title="TCP 和 UDP"></a>TCP 和 UDP</h3><p><strong>TCP</strong></p><p>传输控制协议</p><ol><li>使用 TCP 协议前，须先建立 TCP 连接，形成传输数据通道。TCP 通信是一对一通信</li><li>传输前，采用 “三次握手” 方式，是可靠的</li><li>TCP 协议进行通信的两个应用进程：客户端、服务端</li><li>在连接中可进行大数据量的传输。传输前，先确认要交流的数据量。那个数据量、数据窗口取较小方的数值。</li><li>发送方没有收到接收方的确认应答时，（在一定次数内）会再次发送数据包</li><li>传输完毕，需释放已建立的连接，效率低</li></ol><p><strong>UDP</strong></p><p>用户数据协议</p><ol><li>将 数据、源、目的 封装成数据包，不需要建立连接。可以同时向多个接收方发送</li><li>每个数据包大小限制在 64K 以内，不适合传输大量数据</li><li>因无需连接，所以是不可靠的</li><li>接收方无需发送确认应答</li><li>发送数据结束时无需释放资源（因为不是面向连接的），速度快</li></ol><h2 id="InetAddress-类"><a href="#InetAddress-类" class="headerlink" title="InetAddress 类"></a>InetAddress 类</h2><p><strong>相关方法</strong></p><ul><li><code>getLocalHost</code>：获取本机 <code>InetAddress</code> 对象</li><li><code>getByName</code>：根据指定主机名 &#x2F; 域名获取 IP 地址对象</li><li><code>getHostName</code>：获取 <code>InetAddress</code> 对象的主机名</li><li><code>getHostAddress</code>：获取 <code>InetAddress</code> 对象的地址</li></ul><h2 id="Socket"><a href="#Socket" class="headerlink" title="Socket"></a>Socket</h2><ol><li>套接字（Socket）开发网络应用程序被广泛采用，以至于成为了事实上的标准</li><li>通信的两端都要有 Socket，是两台机器间通信的端点</li><li>网络通信其实就是 Socket 间的通信</li><li>Socket 允许程序把网络连接当成一个流，数据在两个 Socket 间通过 IO 传输</li><li>一般主动发起通信的应用程序属于客户端，等待通信请求的为服务端</li></ol><h3 id="TCP-网络通信编程"><a href="#TCP-网络通信编程" class="headerlink" title="TCP 网络通信编程"></a>TCP 网络通信编程</h3><ol><li>基于客户端——服务端的网络通信</li><li>底层使用的是 TCP &#x2F; IP 协议</li><li>应用场景距离：客户端发送数据，服务端接收并显示</li><li>基于 Socket 的 TCP 编程</li></ol><p><strong>下面，示范一个 服务端</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">public void server() throws IOException&#123;</span><br><span class="line"> ServerSocket serverSocket = new ServerSocket(9000);//[1]</span><br><span class="line"> Socket clientSocket = serverSocket.accept();   //[2]</span><br><span class="line"> //下面是输入流，不解释了</span><br><span class="line"> InputStream inputStream = clientSocket.getInputStream();</span><br><span class="line"> System.out.println(clientSocket.getInetAddress());</span><br><span class="line"> int n;</span><br><span class="line"> byte[] b = new byte[1024];</span><br><span class="line"> byte[] B = new byte[0];</span><br><span class="line"> while ((n = inputStream.read(b, 0, 1024)) != -1) &#123;</span><br><span class="line">     B = Arrays.copyOf(B, B.length + n);</span><br><span class="line">     for (int i = 0; i &lt; n; i++) &#123;</span><br><span class="line">         B[B.length - n + i] = b[i];</span><br><span class="line">     &#125;</span><br><span class="line"> &#125;</span><br><span class="line"> serverSocket.close();//[3]</span><br><span class="line"> System.out.println(new String(B));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li><p><code>ServerSocket serverSocket = new ServerSocket(9000);</code></p><p>这个语句用以监听 9000 这个端口</p><p>细节：这里要求该端口没有被其他服务占用。</p></li><li><p><code>Socket clientSocket = serverSocket.accept();</code></p><p>这个语句用以接收连接的 <code>Socket</code>。没有连接时，程序会阻滞在这里</p><p>细节：此处 <code>accept()</code> 可以返回多个 <code>Socket</code>，即多并发</p></li><li><p><code>serverSocket.close();</code></p><p>结束后，务必关闭！</p></li></ol><p><strong>下面，示范一个客户端</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">public void client() throws IOException&#123;</span><br><span class="line"> String serverIP = &quot;192.168.3.16&quot;;//[1]</span><br><span class="line"> Socket socket = new Socket(serverIP, 9000);//[2]</span><br><span class="line"> OutputStream outputStream = socket.getOutputStream();</span><br><span class="line"> outputStream.write(&quot;hello,Server!&quot;.getBytes(StandardCharsets.UTF_8));</span><br><span class="line"> socket.shutdownOutput();//[3]</span><br><span class="line"> outputStream.close();</span><br><span class="line"> socket.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li><p>这个 IP 是我的本机地址。代表的是 服务端 地址</p></li><li><p><code>Socket socket = new Socket(serverIP, 9000);</code></p><p>表示访问指定 IP 的 9000 端口</p></li><li><p><code>socket.shutdownOutput();</code></p><p>这里是输出一个结束标记。若不如此做，socket 就不知道是否数据发送完成</p><p>特别的，由 字节流 输出的场合，<code>writer.newLine()</code> 可以替代结束标记。但是这个场合，接收必须是 <code>reader.readLine()</code></p></li></ol><h4 id="netstat-指令"><a href="#netstat-指令" class="headerlink" title="netstat 指令"></a>netstat 指令</h4><ol><li><p><code>netstat -an</code> 可以查看当前主机网络情况，包括端口监听情况和网络连接情况</p></li><li><p><code>netstat -an | more</code> 可以分页显示</p></li><li><p><code>netstat -anb</code> 可以显示占用端口的应用</p></li><li><p>要求在 dos 控制台下执行</p></li><li><p>Listening 表示某个端口在监听。</p><p>如果有一个外部程序连接到该端口，就会显示一条连接信息 Established</p></li></ol><h4 id="TCP-连接秘密"><a href="#TCP-连接秘密" class="headerlink" title="TCP 连接秘密"></a>TCP 连接秘密</h4><p><strong>当客户端连接到服务端后，实际上客户端也是通过一个端口和服务端进行通讯的。这个端口由 TCP&#x2F;IP 来分配，是不确定的，随机的。</strong></p><h3 id="UDP-网络通信编程"><a href="#UDP-网络通信编程" class="headerlink" title="UDP 网络通信编程"></a>UDP 网络通信编程</h3><ol><li>类 <code>DatagramSocket</code> 和 <code>DatagramPacket</code> 实现了基于 UDP 协议网络程序</li><li>没有明确的服务端和客户端，演变成数据的发送端和接收端</li><li>UDP 数据报通过数据报套接字 <code>DatagramSocket</code> 发送和接收。系统不保证 UDP 数据报一定能安全送到目的地，也不能确定什么时候能抵达</li><li><code>DatagramPacket</code> 对象封装了 UDP 数据报，在数据报中包含了发送端的 IP 地址和端口号以及接收端的 IP 地址和端口号</li><li>接收到 <code>DtagramPacket</code> 对象时，需要进行拆包，取出数据</li><li><code>DatagramSocket</code> 可以指定在哪个端口接收数据</li><li>UDP 协议中每个数据报都给出了完整的地址信息，因此无需发送方和接收方的连接</li></ol><p><strong>下面，示范一个接收端</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">DatagramSocket ds = new DatagramSocket(9000);//[1]</span><br><span class="line">byte[] bytes = new byte[1024];</span><br><span class="line">DatagramPacket dp = new DatagramPacket(bytes, bytes.length);//[2]</span><br><span class="line">System.out.println(&quot;萝茵 聆听中……&quot;);</span><br><span class="line">ds.receive(dp);//[3]</span><br><span class="line">int len = dp.getLength();</span><br><span class="line">bytes = dp.getData();</span><br><span class="line">System.out.println(&quot;萝茵听到了如下内容：\n&quot; + new String(bytes, 0, len));</span><br><span class="line">ds.close();//[4]</span><br></pre></td></tr></table></figure><ol><li><p><code>DatagramSocket ds = new DatagramSocket(9000);</code></p><p>以 9000 这个端口作为监听端口</p></li><li><p><code>DatagramPacket dp = new DatagramPacket(bytes, bytes.length);</code></p><p>构建 <code>DatagramPacket</code> 对象，准备接收数据</p></li><li><p><code>ds.receive(dp);</code></p><p>监听信息，放到刚刚创建的 <code>DatagramPacket</code> 对象</p></li><li><p><code>ds.close()</code></p><p>要记得关闭呦 ★ ~</p></li></ol><p><strong>下面，示范一个发送端</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">System.out.println(&quot;萝茵，大声喊道：你好，世界！&quot;);</span><br><span class="line">DatagramSocket ds = new DatagramSocket(8000);//[1]</span><br><span class="line">InetAddress ia = InetAddress.getByName(serverIP);</span><br><span class="line">byte[] bytes = &quot;你好，世界&quot;.getBytes(StandardCharsets.UTF_8);</span><br><span class="line">DatagramPacket dp = new DatagramPacket(bytes, bytes.length, ia, 9001);</span><br><span class="line">//[2]</span><br><span class="line">ds.send(dp);//[3]</span><br><span class="line">System.out.println(&quot;声音在虚无中回荡着……&quot;);</span><br><span class="line">ds.close();//[4]</span><br></pre></td></tr></table></figure><ol><li><p><code>DatagramSocket ds = new DatagramSocket(8000);</code></p><p>以 8000 这个端口作为发送端口</p></li><li><p><code>DatagramPacket dp = new DatagramPacket(bytes, bytes.length, ia, 9001);</code></p><p>把要发送的数据、数据长度、对象地址、对象端口 放到包里</p></li><li><p><code>ds.send(dp);</code></p><p>走你 ★ ~</p></li><li><p><code>ds.close();</code></p><p>鸟尽弓藏</p></li></ol><h2 id="附录"><a href="#附录" class="headerlink" title="附录"></a>附录</h2><h3 id="项目开发流程"><a href="#项目开发流程" class="headerlink" title="项目开发流程"></a>项目开发流程</h3><h4 id="1-需求分析"><a href="#1-需求分析" class="headerlink" title="1 需求分析"></a>1 需求分析</h4><p><strong>需求分析师（懂技术 + 懂行业）</strong></p><ol><li>需求分析报告<ul><li>项目功能</li><li>客户要求</li></ul></li></ol><h4 id="2-设计阶段"><a href="#2-设计阶段" class="headerlink" title="2 设计阶段"></a>2 设计阶段</h4><p><strong>架构师 &#x2F; 项目经理</strong></p><ol><li>设计工作<ul><li>UML 类图</li><li>流程图</li><li>模块设计</li><li>数据库设计</li><li>架构</li></ul></li><li>原型开发</li><li>组建团队</li></ol><h4 id="3-实现阶段"><a href="#3-实现阶段" class="headerlink" title="3 实现阶段"></a>3 实现阶段</h4><p><strong>程序员 &#x2F; 码农</strong></p><ol><li>完成架构师的模块功能</li><li>测试自己的模块</li></ol><h4 id="4-测试阶段"><a href="#4-测试阶段" class="headerlink" title="4 测试阶段"></a>4 测试阶段</h4><p><strong>测试工程师</strong></p><ol><li>单元测试</li><li>测试用例</li><li>白盒测试</li><li>黑盒测试</li><li>集成测试</li></ol><h4 id="5-实施阶段"><a href="#5-实施阶段" class="headerlink" title="5 实施阶段"></a>5 实施阶段</h4><p><strong>实施工程师（开发能力 &#x2F; 环境配置部署能力）</strong></p><ol><li>把项目正确地部署到客户的平台，并保证运行正常</li><li>身体好</li></ol><h4 id="6-维护阶段"><a href="#6-维护阶段" class="headerlink" title="6 维护阶段"></a>6 维护阶段</h4><ol><li>发现 bug 并解决</li><li>项目升级</li></ol>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 教程 </tag>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java IO流</title>
      <link href="/2022/12/10/learn/Java/Java%20IO%E6%B5%81/"/>
      <url>/2022/12/10/learn/Java/Java%20IO%E6%B5%81/</url>
      
        <content type="html"><![CDATA[<h2 id="文件"><a href="#文件" class="headerlink" title="文件"></a>文件</h2><blockquote><p>文件就是保存数据的地方。</p><p>文件流：文件 在 程序 中是以 流 的形式来操作的。</p><p>流：数据在数据源（文件）和程序（内存）之间经历的路径</p><p>输入流：数据从数据源到程序的路径</p><p>输出流：数据从程序到数据源的路径</p></blockquote><h3 id="常用的文件操作"><a href="#常用的文件操作" class="headerlink" title="常用的文件操作"></a>常用的文件操作</h3><blockquote><p>Java 提供了 File 类，用于处理文件相关的操作</p></blockquote><ol><li><p>创建文件对象相关构造器和方法</p><ul><li><p><code>new File(String pathname)</code>：根据路径创建一个 File 对象</p><blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">String path1 = &quot;d:/test.jpg&quot;;</span><br><span class="line">String path2 = &quot;d:\\test.jpg&quot;;</span><br><span class="line">File file1 = new File(path1);</span><br><span class="line">File file2 = new File(path2);//此时只是在内存中产生了一个对象</span><br></pre></td></tr></table></figure></blockquote></li><li><p><code>new File(File parent, String child)</code>：根据父目录文件 + 子路径构建</p><blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">File parentFile1 = new File(&quot;d:\\&quot;);</span><br><span class="line">String fileName1 = &quot;test.txt&quot;;</span><br><span class="line">File file3 = new File(parentFile1, fileName1);</span><br></pre></td></tr></table></figure></blockquote></li><li><p><code>new File(String parent, String child)</code>：根据父路径 + 子路径构建</p></li><li><p><code>creatNewFile()</code>：创建新文件</p><blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">try &#123;</span><br><span class="line"> file.createNewFile();//这个场合，内存对象才写入磁盘</span><br><span class="line">&#125; catch (IOException e) &#123;</span><br><span class="line"> e.printStackTrace();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></blockquote></li></ul></li><li><p>获取文件相关信息</p><ul><li><p><code>getName()</code>：获取名称</p></li><li><p><code>getAbsolutePath()</code>：获取文件绝对路径</p></li><li><p><code>getParent()</code>：获取文件父级目录</p></li><li><p><code>long length()</code>：获取文件大小（字节）</p></li><li><p><code>exists()</code>：文件是否存在</p></li><li><p><code>isFile()</code>：是不是一个文件</p></li><li><p><code>isDirectory()</code>：是不是一个目录</p></li><li><p><code>isAbsolute()</code>：是不是绝对路径</p></li><li><p><code>canRead()</code>：是否可读</p><p><code>canWirte()</code>：是否可写</p></li><li><p><code>long lastModified()</code>：最后修改时间</p></li><li><p><code>String[] list()</code>：列出符合模式的文件名</p></li></ul></li><li><p>目录的操作和文件删除</p><ul><li><code>mkdir</code>：创建一级目录</li><li><code>mkdirs</code>：创建多级目录</li><li><code>delete</code>：删除空目录或文件</li><li><code>boolean renameTo(File newName)</code>：更改文件名</li></ul><p>其实目录（在内存看来）就是特殊的文件</p></li></ol><p>注意事项：</p><ul><li>File 类可以获取文件的各种相关属性，可以对其进行改名，甚至删除。但除了文件名外的属性没有修改方法</li><li>File 类可以用来描述一个目录，但不能改变目录名，也不能删除目录</li></ul><h2 id="IO流"><a href="#IO流" class="headerlink" title="IO流"></a>IO流</h2><ol><li>I &#x2F; O 是 Input &#x2F; Output 的缩写。IO 技术是非常实用的技术，用于处理数据传输。如 读 &#x2F; 写 文件，网络通讯等。</li><li>Java 程序中，对于数据的 输入 &#x2F; 输出 操作以 “流（stream）”的方式进行</li><li><code>java.io</code> 包下提供了各种 “流” 类和接口，用以获取不同种类的数据，并通过方法输入或输出数据</li><li>输入（input）：读取外部数据（磁盘、光盘、网络数据等）到程序（内存）中</li><li>输出（output）：将程序（内存）数据输出到外部存储</li></ol><h3 id="IO流的分类"><a href="#IO流的分类" class="headerlink" title="IO流的分类"></a>IO流的分类</h3><ul><li><p>按操作数据单位不同分为：</p><ul><li>字节流（8 bit）：二进制文件用该方法，能确保文件无损</li><li>字符流（按照字符，字符的字节数由编码决定）：文本文件，效率更高</li></ul></li><li><p>按数据流的流向不同分为：</p><ul><li>输入流：读取外部数据（磁盘、光盘、网络数据等）到程序（内存）中</li><li>输出流：将程序（内存）数据输出到外部存储</li></ul></li><li><p>按流的角色不同分为：</p><ul><li>节点流</li><li>处理流 &#x2F; 包装流</li></ul><p>Σ(っ °Д °;)っ</p><p>字节流</p><p>字符流</p><p>输入流</p><p>InputStream</p><p>Reader</p><p>输出流</p><p>OutputStream</p><p>Writer</p></li></ul><p>Java 的 IO流 总共涉及 40多个类，实际上都是上述 4 类的抽象基类派生的</p><p>由这 4 个类派生的子类名称都是以其父类名作为子类名后缀</p><h3 id="IO流-常用类"><a href="#IO流-常用类" class="headerlink" title="IO流 常用类"></a>IO流 常用类</h3><h4 id="FileInputStream：文件字节输入流"><a href="#FileInputStream：文件字节输入流" class="headerlink" title="FileInputStream：文件字节输入流"></a>FileInputStream：文件字节输入流</h4><ul><li><p>构造器：</p><blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">new FileInputStream(File file);//通过一个 File 的路径指定创建</span><br><span class="line">new FileInputStream(String path);//通过一个路径指定创建</span><br><span class="line">new FileInputStream(FileDescriptor fdObj);//通过文件描述符创建</span><br></pre></td></tr></table></figure></blockquote></li><li><p>方法：</p><ul><li><p><code>available()</code>：返回目前可以从流中读取的字节数</p><p>实际操作时，读取的字节数可能大于这个返回值</p></li><li><p><code>close()</code>：关闭文件输入流，释放资源</p></li><li><p><code>finalize()</code>：确保在不引用文件输入流时调用其 <code>close()</code> 方法</p></li><li><p><code>getChannel()</code>：返回与此流有关的唯一的 <code>FileChannel</code> 对象</p></li><li><p><code>getFD()</code>：返回描述符</p></li><li><p><code>read()</code>：从该输入流中读取一个数据字节</p><p>如果没有输入可用，该方法会被阻止。返回 -1 的场合，说明到达文件的末尾。</p><blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">File file = new File(&quot;d:\\test&quot;);</span><br><span class="line">FileInputStream fileInputStream = null;</span><br><span class="line">int read;</span><br><span class="line">try &#123;</span><br><span class="line"> fileInputStream = new FileInputStream(file);</span><br><span class="line"> while ((read = fileInputStream.read()) != -1)&#123;</span><br><span class="line">     System.out.print((char) read);</span><br><span class="line"> &#125;</span><br><span class="line">&#125; catch (IOException e) &#123;</span><br><span class="line"> e.printStackTrace();</span><br><span class="line">&#125; finally &#123;</span><br><span class="line"> try &#123;</span><br><span class="line">     fileInputStream.close();</span><br><span class="line"> &#125; catch (IOException e) &#123;</span><br><span class="line">     e.printStackTrace();</span><br><span class="line"> &#125;</span><br><span class="line">&#125;//真 TM 复杂。throw 了算了</span><br></pre></td></tr></table></figure><p>这个场合，效率较低</p></blockquote><p><code>read(byte[] b)</code>：从该输入流中把最多 b.length 个字节的数据读入一个 byte 数组</p><p>读取正常的场合，返回实际读取的字节数。</p><blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line">byte[] b = new byte[8];//一次读取 8 字节</span><br><span class="line">try &#123;</span><br><span class="line"> fileInputStream = new FileInputStream(file);</span><br><span class="line"> while ((read = fileInputStream.read(b)) != -1)&#123;</span><br><span class="line">     System.out.print(new String(b, 0, read));</span><br><span class="line">     //这一句看不懂请看[12.2 - 4]</span><br><span class="line"> &#125;</span><br><span class="line">catch </span><br><span class="line">...</span><br><span class="line">finally</span><br><span class="line">...</span><br></pre></td></tr></table></figure></blockquote><p><code>read(byte[] b, int off, int len)</code>：从该输入流中读取 len 字节数据，从数组下标 off 处起写入</p></li><li><p><code>skip(long n)</code>：从该输入流中跳过并去丢弃 n 个字节的数据</p></li><li><p><code>mark(int markArea)</code>：标记数据量的当前位置，并划出一个缓冲区。缓冲区大小至少为 markArea</p><p><code>reset()</code>：将输入流重新定位到对此流最后调用 <code>mark()</code> 方法时的位置</p><p><code>markSupported()</code>：测试数据流是否支持 <code>mark()</code> 和 <code>reset()</code> 操作</p></li></ul></li></ul><h4 id="FileOutputStream：文件字节输出流"><a href="#FileOutputStream：文件字节输出流" class="headerlink" title="FileOutputStream：文件字节输出流"></a>FileOutputStream：文件字节输出流</h4><ul><li><p>构造器：</p><blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">new FileOutputStream(File file);//通过一个 File 的路径指定创建</span><br><span class="line">new FileOutputStream(File file, boolean append);</span><br><span class="line">//append = false，写入采用 覆盖原文件 方式</span><br><span class="line">//append = true 的场合，写入采用 末尾追加 方式</span><br><span class="line">new FileOutputStream(String path);//通过一个路径指定创建</span><br><span class="line">new FileOutputStream(String path, boolean append);</span><br><span class="line">new FileOutputStream(FileDescriptor fdObj);//通过文件描述符创建</span><br></pre></td></tr></table></figure></blockquote></li><li><p>方法：</p><ul><li><p><code>close()</code>：关闭文件输入流，释放资源</p></li><li><p><code>flush()</code>：刷新此输出流并强制写出所有缓冲的输出字节</p></li><li><p><code>finalize()</code>：确保在不引用文件输入流时调用其 <code>close()</code> 方法</p></li><li><p><code>getChannel()</code>：返回与此流有关的唯一的 <code>FileChannel</code> 对象</p></li><li><p><code>getFD()</code>：返回描述符</p></li><li><p><code>write(byte[] b)</code>：将 b.length 个字节从指定 byte 数组写入此文件输出流</p><blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">File file = new File(&quot;d:\\test1&quot;);</span><br><span class="line">FileOutputStream fileOutputStream = null;</span><br><span class="line">try &#123;</span><br><span class="line"> fileOutputStream = new FileOutputStream(file);</span><br><span class="line"> //此时，若文件不存在会被创建</span><br><span class="line"> fileOutputStream.write(&#x27;a&#x27;);</span><br><span class="line"> String str = &quot;Melody&quot;;</span><br><span class="line"> fileOutputStream.write(str.getBytes());</span><br><span class="line">&#125; </span><br><span class="line">catch</span><br><span class="line">...</span><br><span class="line">finally</span><br><span class="line">...</span><br></pre></td></tr></table></figure></blockquote><p><code>write(byte[] b， int off, int len)</code>：将指定 byte 数组中下标 off 开始的 len 个字节写入此文件输出流</p><p><code>write(int b)</code>：将指定字节写入此文件输出流</p></li></ul></li></ul><h4 id="FileReader：文件字符输入流"><a href="#FileReader：文件字符输入流" class="headerlink" title="FileReader：文件字符输入流"></a>FileReader：文件字符输入流</h4><blockquote><p>与其他程序设计语言使用 ASCII 码不同，Java 使用 Unicode 码表示字符串和字符。ASCII 码的字符占用 1 字节，可以认为一个字符就是一个字节。但 Unicode 码用 2 字节表示 1 个字符，此时字符流和字节流就不相同。</p></blockquote><ul><li><p>构造器：</p><blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">new FileRaeder(File file);</span><br><span class="line">new FileRaeder(String string);</span><br></pre></td></tr></table></figure></blockquote></li><li><p>方法：</p><ul><li><code>read()</code>：读取单个字符。</li><li><code>read(char[])</code>：批量读取多个字符到数组。</li></ul></li></ul><h4 id="FileWriter：文件字符输出流"><a href="#FileWriter：文件字符输出流" class="headerlink" title="FileWriter：文件字符输出流"></a>FileWriter：文件字符输出流</h4><ul><li><p>构造器：</p><blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">new FileWriter(File path);</span><br><span class="line">new FileWriter(String path2);</span><br><span class="line">new FileWriter(File path3, boolean append);</span><br><span class="line">new FileWriter(String path4, boolean append);</span><br></pre></td></tr></table></figure></blockquote></li><li><p>方法：</p><ul><li><code>write(int)</code>：写入单个字符</li><li><code>write(char[])</code>：写入指定数组</li><li><code>write(char[], off, len)</code>：写入指定数组的指定部分</li><li><code>write(string)</code>：写入字符串</li><li><code>write(string, off, len)</code>：写入字符串的指定部分</li><li><code>flush()</code>：刷新该流的缓冲。如果没有执行，内容就不会写入文件</li><li><code>close()</code>：等于 <code>flush()</code> + 关闭</li></ul><p><strong>注意！<code>FileWriter</code> 使用后，必须关闭（close）或刷新（flush），否则无法真正写入</strong></p></li></ul><h4 id="转换流-InputStreamReader-和-OutputStreamWriter"><a href="#转换流-InputStreamReader-和-OutputStreamWriter" class="headerlink" title="转换流 InputStreamReader 和 OutputStreamWriter"></a>转换流 InputStreamReader 和 OutputStreamWriter</h4><ol><li><code>InputStreamReader</code> 是 <code>Reader</code> 的子类。可以把 <code>InputStream</code>（字节流）转换成 <code>Reader</code>（字符流）</li><li><code>OutputStreamWriter</code> 是 <code>Writer</code> 的子类。可以把 <code>OutputStream</code>（字节流）转换成 <code>Writer</code>（字符流）</li><li>处理纯文本数据时，如果使用字符流效率更高，并能有效解决中文问题，建议将字节流转换成字符流。</li><li>可以在使用时指定编码格式（UTF -8、GBK 等）</li></ol><ul><li><p>构造器</p><blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">InputStreamReader isr = new InputStreamReader(fileInputStream, &quot;UTF-8&quot;);</span><br><span class="line">//传入 字节流 和 编码类型</span><br><span class="line">BufferedReader br = new Bufferedreader(isr);</span><br><span class="line">//用另一个处理流包装</span><br></pre></td></tr></table></figure></blockquote></li></ul><h3 id="节点流和处理流"><a href="#节点流和处理流" class="headerlink" title="节点流和处理流"></a>节点流和处理流</h3><ol><li>节点流：从一个特定数据源读写数据。</li><li>处理流（包装流）：是 “连接” 在已存在的流（节点流或处理流）上，为程序提供更强大的读写功能。</li></ol><h4 id="节点流和处理流的区别和联系"><a href="#节点流和处理流的区别和联系" class="headerlink" title="节点流和处理流的区别和联系"></a>节点流和处理流的区别和联系</h4><ol><li>节点流是 底层流 &#x2F; 低级流。直接和数据源相接。</li><li>处理流（包装流）包装节点流，既可以消除不同节点流的实现差异，也可以提供更方便的方法完成输入输出</li><li>处理流对节点流进行包装，使用了修饰器设计模式。不会直接与数据源相连</li><li>处理流的功能主要体现在<ul><li>性能的提高：以增加缓冲的方式提高输入输出的效率</li><li>操作的便捷：处理流可能提供了一系列便捷方法来一次性输入大量数据，使用更加灵活方便</li></ul></li><li>关闭时关闭外层流即可</li></ol><h4 id="缓冲区流"><a href="#缓冲区流" class="headerlink" title="缓冲区流"></a>缓冲区流</h4><blockquote><p>缓冲区流是一种包装流。缓冲区字节流有 BufferedInputStream 和 BufferedOutputStream；缓冲区字符流有 BufferedWriter 和 BufferedReader。他们是在数据流上加了一个缓冲区。读写数据时，数据以块为单位进入缓冲区，其后的读写操作则作用于缓冲区。</p><p>这种方式能降低不同硬件设备间的速度差异，提高 I&#x2F;O 效率。</p></blockquote><p>构造器：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">new BufferedReader(reader);//传入一个 Reader</span><br><span class="line">new BufferedReader(reader, 1024);//传入 Reader 并指定缓冲区大小</span><br><span class="line">new BufferedWriter(writer);//传入一个 Writer</span><br><span class="line">new BufferedWriter(writer, 1024);//传入 Writer 并指定缓冲区大小</span><br><span class="line">//追加还是覆盖，取决于 writer</span><br></pre></td></tr></table></figure><p>方法：</p><ul><li><p><code>bufferedReader.readLine()</code>：按行读取（不含换行符）。</p><p>会返回一个字符串。返回 null 时，表示读取完毕。</p><blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">String line;</span><br><span class="line">while (line = bufferedReader.readLine() != null)&#123;</span><br><span class="line"> ...</span><br><span class="line">&#125;</span><br><span class="line">bufferedReader.close();</span><br></pre></td></tr></table></figure></blockquote></li><li><p><code>bufferedWriter.write(String str)</code>：插入字符串</p></li><li><p><code>bufferedWriter.newLine()</code>：插入一个（和系统相关的）换行</p></li></ul><h4 id="数据数据流"><a href="#数据数据流" class="headerlink" title="数据数据流"></a>数据数据流</h4><blockquote><p>除了字节或字节数组外，处理的数据还有其他类型。为解决此问题，可以使用 DataInputStream 和 DataOutputStream。它们允许通过数据流来读写 Java 基本类型，如布尔型（boolean）、浮点型（float）等</p></blockquote><p>构造器：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">new DataInputStream(inputStream);</span><br><span class="line">new DataOutputStream(outputStream);</span><br></pre></td></tr></table></figure><p>方法：</p><ul><li><p><code>byte readByte()</code>：读取下一个 byte</p><p><code>int readInt()</code>、<code>double readDouble()</code>、<code>String readUTF()</code>……</p></li><li><p><code>void writeByte(byte b)</code>：写入一个 byte</p><p><code>void writeInt(int n)</code>、<code>void writeUTF(String str)</code>……</p><p>虽然有对字符串的读写方法，但应避免使用这些方法，转而使用字符输入&#x2F;输出流。</p></li></ul><h4 id="对象流"><a href="#对象流" class="headerlink" title="对象流"></a>对象流</h4><blockquote><p>当我们保存数据时，同时也把 数据类型 或 对象 保存。</p><p>以上要求，就是能够将 基本数据类型 或 对象 进行 序列化·反序列化 操作</p></blockquote><p><strong>序列化和反序列化</strong></p><ol><li>把对象转成字符序列的过程称为序列化。保存数据时，保存数据的值和数据类型</li><li>把字符序列转成对象的过程称为反序列化。恢复数据时，恢复数据的值和数据类型</li><li>需要让某个对象支持序列化机制，则必须让其类是 可序列化的。由此，该类必须实现下列接口之一<ul><li><code>Serializable</code>：推荐。因为是标记接口，没有方法</li><li><code>Externalizable</code>：该接口有方法需要实现</li></ul></li></ol><p><strong>transient 关键字</strong></p><ol><li>有一些对象状态不具有可持久性（如 Thread 对象或流对象），这样的成员变量必须用 transient 关键字标明。任何标有 transient 关键字的成员变量都不会被保存。</li><li>一些需要保密的数据，不应保存在永久介质中。为保证安全，这些变量前应加上 transient 关键字。</li></ol><ul><li><p>构造器：</p><blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">new ObjectInputStream(InputStream inputStream);</span><br><span class="line">new ObjectOutputStream(OutputStream outputStream);</span><br></pre></td></tr></table></figure></blockquote></li><li><p>方法：</p><p>反序列化顺序需要和序列化顺序一致，否则出现异常。</p><ul><li><p><code>writeInt(Integer)</code>：写入一个 int</p><p><code>readInt()</code>：读取一个 int</p></li><li><p><code>writeBoolean(Boolaen)</code>：写入一个 boolean</p><p><code>readBoolean()</code>：读取一个 boolean</p></li><li><p><code>writeChar(Character)</code>：写入一个 char</p><p><code>readChar()</code>：读取一个 char</p></li><li><p><code>writeDouble(Double)</code>：写入一个 double</p><p><code>readDouble()</code>：读取一个 double</p></li><li><p><code>writeUTF(String)</code>：写入一个 String</p><p><code>readUTF()</code>：读取一个 String</p></li><li><p><code>writeObject(Serializable)</code>：写入一个 Obj</p><p><code>readObject()</code>：读取一个 Obj</p><p>读取的场合，如果想要调用方法，需要向下转型。</p><p>为此，需要该类其引入，或将类的定义拷贝到可以引用的位置。</p></li></ul></li><li><p><strong>注意事项</strong></p><ol><li><p>读写顺序要一致</p></li><li><p>实现序列化或反序列化的对象，要实现 <code>Serializable</code> 或 <code>Externalizable</code> 接口</p></li><li><p>序列化的类中建议添加 <code>SerialVersionUID</code> 以提高版本兼容性</p><blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">private static final long serialVersionUID = 1L;</span><br></pre></td></tr></table></figure></blockquote><p>有此序列号的场合，后续修改该类，系统会认为只是版本修改，而非新的类</p></li><li><p>序列化对象时，默认将其中所有属性进行序列化（除了 <code>static</code> 和 <code>tansient</code> 修饰的成员）</p></li><li><p>序列化对象时，要求其属性也实现序列化接口</p></li><li><p>序列化具备可继承性。某类若实现可序列化，则其子类也可序列化</p></li></ol></li></ul><h4 id="标准输入-输出流"><a href="#标准输入-输出流" class="headerlink" title="标准输入 &#x2F; 输出流"></a>标准输入 &#x2F; 输出流</h4><table><thead><tr><th>Σ( ° △ °lll）</th><th>编译类型</th><th>运行类型</th><th>默认设备</th></tr></thead><tbody><tr><td><code>System.in</code>：标准输入</td><td><code>InputStream</code></td><td><code>BufferedInputStream</code></td><td>键盘</td></tr><tr><td><code>System.out</code>：标准输出</td><td><code>PaintStream</code></td><td><code>PaintStream</code></td><td>显示器</td></tr></tbody></table><h4 id="打印流-PaintStream-和-PaintWriter"><a href="#打印流-PaintStream-和-PaintWriter" class="headerlink" title="打印流 PaintStream 和 PaintWriter"></a>打印流 PaintStream 和 PaintWriter</h4><blockquote><p>打印流只有输出流，没有输入流</p></blockquote><ol><li><p><code>PaintStream</code> 是 <code>OutputStream</code> 的子类。<code>PaintWriter</code> 是 <code>Writer</code> 的子类。</p></li><li><p>默认情况下，<code>System.out</code> 输出位置是 标准输出（即：显示器）</p><p>修改默认输出位置：</p><blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">System.setOut(new PrintStream(path));</span><br></pre></td></tr></table></figure></blockquote></li></ol><h4 id="Properties-类"><a href="#Properties-类" class="headerlink" title="Properties 类"></a>Properties 类</h4><ol><li><p><code>Properties</code> 是专门用于读写配置文件的集合类</p><p>底层维护了一个 <code>Entry</code> 数组</p></li><li><p>配置文件格式：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">键=值</span><br><span class="line">键=值</span><br><span class="line">…</span><br></pre></td></tr></table></figure><p><strong>注意：键值对不需要空格，值不需要引号（值默认 <code>String</code>）</strong></p></li><li><p>常见方法：</p><ul><li><p><code>load(InputStream)</code></p><p><code>load(Reader)</code>：加载配置文件的键值对到 <code>Properties</code> 对象</p><blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Properties properties = new Properties();</span><br><span class="line">properties.load(new FileReader(&quot;d:\\data.data&quot;));</span><br></pre></td></tr></table></figure></blockquote></li><li><p><code>list(PaintStream)</code></p><p><code>list(PaintWriter)</code>：将数据显示到指定设备</p><blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">properties.list(System.out);//在控制台显示</span><br></pre></td></tr></table></figure></blockquote></li><li><p><code>getProperty(key)</code>：根据键获取值</p><blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">properties.get(&quot;IQ&quot;);</span><br></pre></td></tr></table></figure></blockquote></li><li><p><code>setProperty(key, value)</code>：设置键值对到 <code>Properties</code> 对象</p><p>如果没有该 key，就是创建。如有，就是替换。</p><blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">properties.set(&quot;IQ&quot;, 0);</span><br><span class="line">properties.set(&quot;Balance&quot;, 0);</span><br></pre></td></tr></table></figure></blockquote></li><li><p><code>store(Writer, String)</code></p><p><code>store(OutputStream, String)</code>：把 <code>Properties</code> 中的键值对存储到配置文件。</p><p>后面的 <code>String</code> 是注释。如有，会被用 <code>#</code> 标记并写在文件最上方。注释可以为 null。</p><p>IDEA 中，如果含有中文，会储存为 unicode 码</p></li></ul></li></ol><h4 id="随机访问文件"><a href="#随机访问文件" class="headerlink" title="随机访问文件"></a>随机访问文件</h4><blockquote><p>程序阅读文件时不仅要从头读到尾，还要实现每次在不同位置进行读取。此时可以使用 RandomAccessFile</p></blockquote><p>构造器：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">new RandomAccessFile(String name, String mode);//通过文件名</span><br><span class="line">new RandomAccessFile(File file, String mode);//通过文件对象</span><br></pre></td></tr></table></figure><blockquote><p>参数 mode 决定以只读方式 <code>mode = &quot;r&quot;</code> 还是读写方式 <code>mode = &quot;rw&quot;</code> 访问文件。</p></blockquote><p>方法：</p><ul><li><p><code>long getFilePointer()</code>：返回文档指针的当前位置</p></li><li><p><code>void seek(long pos)</code>：将文档指针置于指定的绝对位置 pos</p><p>文档指针的位置从文档开始的字符处开始计算，<code>pos = 0L</code> 表示文档的开始</p></li><li><p><code>long length()</code>：返回文件长度</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 教程 </tag>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java 多线程</title>
      <link href="/2022/12/09/learn/Java/Java%20%E5%A4%9A%E7%BA%BF%E7%A8%8B/"/>
      <url>/2022/12/09/learn/Java/Java%20%E5%A4%9A%E7%BA%BF%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<h2 id="线程的概念"><a href="#线程的概念" class="headerlink" title="线程的概念"></a>线程的概念</h2><blockquote><p>对于一般程序而言，其结构大都可以分为一个入口、一个出口、一个顺次执行的语句序列。这样的语句结构称为进程，它是程序的一次动态执行，对应了代码加载、执行至完毕的全过程。</p><p>进程即是程序在处理机中的一次运行。在这样一个结构中不仅包含程序代码，也包括了系统资源的概念。</p><p>在单 CPU 计算机内部，微观上讲，同一时间只能有一个线程运行。实现多线程即从宏观上使多个作业同时执行。</p></blockquote><p>程序：为完成特定任务，用某种语言编写的一组指令的集合。</p><p>进程：运行中的程序。当你运行一个程序，系统就会为该进程分配空间。进程是程序的一次执行过程。是一个动态过程：有其自身产生、存在、消亡的过程。</p><p>线程：由进程创建的，进程的一个实体。一个进程可以有多个线程。</p><p>单线程：同一时刻，只允许执行一个线程。</p><p>多线程：同一时刻，可以执行多个线程。</p><p>并发：同一时刻，多个任务交替执行，造成一种貌似并行的状态。单核 CPU 实现的多任务就是并发。</p><p>并行：同一时刻，多个任务同时进行。多核 CPU 可以实现并行。</p><h3 id="线程的结构"><a href="#线程的结构" class="headerlink" title="线程的结构"></a>线程的结构</h3><p>在 Java 中，线程由以下 3 部分组成：</p><ul><li>虚拟 CPU：封装在 java.lang.Thread 类中，控制着整个线程的运行</li><li>执行的代码：传递给 Thread 类，由其控制按序执行</li><li>处理的数据：传递给 Thread 类，是在代码执行过程中需要处理的数据</li></ul><h3 id="线程的状态"><a href="#线程的状态" class="headerlink" title="线程的状态"></a>线程的状态</h3><blockquote><p>Java 的线程是通过包 java.lang 中定义的类 Thread 来实现的。当生成了一个 Thread 类后就产生了一个线程。通过该对象实例，可以启动线程、终止线程，或暂时挂起线程</p></blockquote><p>线程共有 4 种状态：新建（New）、可运行（Runnable）、死亡（Dead）、阻塞（Blocked）</p><ul><li><p><strong>新建（New）：</strong></p><p>线程对象刚刚创建，还未启动（New）。此时还处于不可运行状态，但已有了相应内存空间及其他资源</p></li><li><p><strong>可运行（Runnable）：</strong></p><p>此时线程已经启动，处于线程的 <code>run()</code> 方法中。这种情况下线程可能正在运行；也可能没有运行，但只要 CPU 空闲就会立刻运行。</p><p>可以运行但没在运行的线程都排在一个队列中，这个队列称为就绪队列。</p><p>可运行状态下，运行中的线程处于运行状态（Running），未运行线程处于就绪状态（Ready）。</p><p>调用 <code>start()</code> 方法可以让线程进入可运行状态。</p></li><li><p><strong>死亡（Dead）：</strong></p><p>线程死亡（Terminated）的原因有两个：一是 <code>run()</code> 方法最后一个语句执行完毕，二是线程遇到异常退出</p></li><li><p><strong>阻塞（Blocked）：</strong></p><p>一个正常运行的线程因为特殊原因被暂停执行，就进入阻塞状态（Blocked）。</p><p>阻塞时线程不能进入就绪对流排队，必须等到引起阻塞的原因消除，才能重新进入队列排队。</p><p>引起阻塞的方法很多，<code>sleep()</code> 和 <code>wait()</code> 是两个常用的阻塞方法</p></li><li><p><strong>中断线程：</strong></p><ul><li><p><code>void interrupt()</code>：向一个线程发送一个中断请求，并把该线程的 interruptd 状态变为 true。</p><p>中断阻塞线程的场合，会抛出 InterruptException 异常</p></li><li><p><code>static boolean interrupted()</code>：检测当前线程是否被中断，并重置状态 interrupted 的值。</p><p>连续调用该方法的场合，第二次调用会返回 false</p></li><li><p><code>boolean isInterrupted()</code>：检测当前线程是否中断。不改变 interrupted 的值</p></li></ul></li></ul><h2 id="线程的使用"><a href="#线程的使用" class="headerlink" title="线程的使用"></a>线程的使用</h2><p>在 Java 中线程使用有两种方法：</p><ol><li><p>继承 <code>Thread</code> 类，重写 <code>run</code> 方法</p><blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">public class Thread implements Runnable//可见 Thread 也是实现了 Runable 接口</span><br></pre></td></tr></table></figure></blockquote></li><li><p>实现 <code>Runable</code> 接口，重写 <code>run</code> 方法</p></li></ol><h3 id="继承-Thread-类"><a href="#继承-Thread-类" class="headerlink" title="继承 Thread 类"></a>继承 Thread 类</h3><blockquote><p>Thread 类是 Java 用于表示线程的类。那么，一个类被定义为其子类，则该类也能用来表示线程</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">public static void main(String[] args) &#123;</span><br><span class="line"> Type type = new Type();</span><br><span class="line"> type.start();//开始线程</span><br><span class="line"> //如果用 run 方法，则还是停留在主线程</span><br><span class="line"> //  那样，相当于 串行。执行完毕才继续</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">class Type extends Thread &#123;//先继承 Thread 类</span><br><span class="line"> int i = 0;</span><br><span class="line"> @Override</span><br><span class="line"> public void run() &#123;</span><br><span class="line">     while (true) &#123;</span><br><span class="line">         System.out.println(i);</span><br><span class="line">         try &#123;</span><br><span class="line">             Thread.sleep(100);//休眠 100 毫秒</span><br><span class="line">         &#125; catch (InterruptedException e) &#123;</span><br><span class="line">             e.printStackTrace();</span><br><span class="line">         &#125;</span><br><span class="line">         if (i++ == 10) &#123;//i = 10 时停止循环</span><br><span class="line">             break;</span><br><span class="line">         &#125;</span><br><span class="line">     &#125;</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>关于 <code>start()</code> 方法</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">public synchronized void start() &#123;</span><br><span class="line">...</span><br><span class="line">    start0();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">private native void start0();//start0 是 native。即，底层方法</span><br></pre></td></tr></table></figure><ol><li><code>start()</code> 方法调用了一个 <code>start0()</code> 底层方法</li><li><code>start0()</code> 是本地方法，由 JVM 调用，底层是 c&#x2F;c++ 实现</li><li>真正的多线程效果，是 <code>start0()</code>，而不是 <code>run()</code></li><li><code>start()</code> 方法调用 <code>start0()</code> 方法后，该线程不一定会立刻执行，只是将线程变成了可运行状态。具体何时运行，由 CPU 统一调度</li></ol><h3 id="实现-Runable-接口"><a href="#实现-Runable-接口" class="headerlink" title="实现 Runable 接口"></a>实现 Runable 接口</h3><blockquote><p>Runnable 是 Java 用以实现线程的接口。从根本上将，任何实现线程的类都必须实现该接口。</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">public static void main(String[] args) &#123;</span><br><span class="line"> Runnable type = new Type();//Runable 没有 start()方法</span><br><span class="line"> Thread thread = new Thread(type);//所以，这里使用了 静态代理</span><br><span class="line"> thread.start();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">class Type implements Runnable &#123;//这部分和 Thread 相似</span><br><span class="line"> @Override</span><br><span class="line"> public void run() &#123;</span><br><span class="line">     int i = 0;</span><br><span class="line">     while (true)&#123;</span><br><span class="line">         System.out.println(i &lt;&lt; i);</span><br><span class="line">         try &#123;</span><br><span class="line">             Thread.sleep(100);</span><br><span class="line">         &#125; catch (InterruptedException e) &#123;</span><br><span class="line">             e.printStackTrace();</span><br><span class="line">         &#125;</span><br><span class="line">         if (++i &gt; 15)&#123;</span><br><span class="line">             break;</span><br><span class="line">         &#125;</span><br><span class="line">     &#125;</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>关于 静态代理</strong></p><blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">class Thread implements Runable &#123;&#125;</span><br><span class="line">...</span><br><span class="line">private Runnable target;</span><br><span class="line">...</span><br><span class="line"> public Thread(Runnable target) &#123;//构造器</span><br><span class="line">     init(null, target, &quot;Thread-&quot; + nextThreadNum(), 0);</span><br><span class="line">     //这句话可以先理解为 this.target = target;</span><br><span class="line"> &#125;</span><br><span class="line">...</span><br><span class="line"> public void run() &#123;</span><br><span class="line">     if (target != null) &#123;</span><br><span class="line">         target.run();</span><br><span class="line">     &#125;</span><br><span class="line"> &#125;</span><br><span class="line">...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>相当于，先创建了一个新线程，然后在新线程中调用 run 方法</p></blockquote><h3 id="继承-Thread-和-实现-Runable-的区别"><a href="#继承-Thread-和-实现-Runable-的区别" class="headerlink" title="继承 Thread 和 实现 Runable 的区别"></a>继承 Thread 和 实现 Runable 的区别</h3><ol><li>从 Java 设计来看，两者本质上没有区别。<code>Thread</code> 类本身就实现了 <code>Runable</code> 接口</li><li>实现 <code>Runable</code> 接口的方式更加适合多个线程共享一个资源的情况，且避免了单继承的限制。建议使用。</li></ol><h3 id="线程中止"><a href="#线程中止" class="headerlink" title="线程中止"></a>线程中止</h3><ol><li><p>当线程结束后，会自动退出</p></li><li><p>还可以通过使用变量来控制 <code>run</code> 方法退出的方式来停止线程，即 通知方式。</p><blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">public void run() &#123;</span><br><span class="line"> while (active) &#123;//这个场合，只要外部控制 active 即可</span><br><span class="line">     try &#123;</span><br><span class="line">         Thread.sleep(1);</span><br><span class="line">     &#125; catch (InterruptedException e) &#123;</span><br><span class="line">         e.printStackTrace();</span><br><span class="line">     &#125;</span><br><span class="line">     move();</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></blockquote></li></ol><h3 id="线程常用方法"><a href="#线程常用方法" class="headerlink" title="线程常用方法"></a>线程常用方法</h3><ul><li><p><code>setName(name)</code>：设置线程名称，使之与参数 name 相同</p></li><li><p><code>getName()</code>：返回线程名称</p></li><li><p><code>start()</code>：线程开始执行。JVM 调用 <code>start0</code> 方法</p><p>该方法会创建新的线程，新线程调用 <code>run</code>。</p></li><li><p><code>run()</code>：到下面玩跑步</p><p>就是简单的方法调用，不会产生新线程。</p></li><li><p><code>setPriority(int priority)</code>：更改线程优先级</p><p><code>getPriority()</code>：获取线程优先级</p><p>priority 范围：</p><ul><li>MAX_PRIORITY：最高优先级（10）</li><li>MIN_PRIORITY：最低优先级（1）</li><li>NORM_PRIORITY：不高不低，真是好极了的优先级（5）</li></ul><p>每个线程都有一个<strong>优先级</strong>。Java 线程调度采用如下优先级策略：</p><ul><li>优先级高的先执行，优先级低的后执行</li><li>每个线程创建时会被自动分配一个优先级。默认的场合，继承父类优先级</li><li>任务紧急的线程，优先级较高</li><li>同优先级线程按 “先进先出” 原则调度</li></ul></li><li><p><code>sleep(int millsecond)</code>：让线程休眠指定的时间</p><p>该方法是 Thread 类的静态方法，可以直接调用</p></li><li><p><code>interrupt()</code>：中断线程（不是 中止）</p></li><li><p><code>yield()</code>：线程的礼让。让出 CPU 让其他线程执行。因为礼让的时间不确定，所以不一定礼让成功。</p><p>本质是 RUNNING 切换为 READY，即让当前线程放弃执行权</p></li><li><p><code>wait()</code>：导致当前线程等待</p><p>直到其他线程调用此对象的 <code>notify()</code> 方法或 <code>notifyAll()</code> 方法才能唤醒此线程</p><p><code>notify()</code>、<code>notifyAll()</code>：唤醒因 <code>wait()</code> 阻塞的线程。</p><p>这些方法（<code>wait()</code>、<code>notify()</code>、<code>notifyAll()</code>）只能在 synchrnized 方法或代码块中调用</p></li><li><p><code>join()</code>：线程的插队。插队的线程一旦插入成功，则必定先执行完插队线程的所有任务</p><p>将导致其他线程的等待，直到 <code>join()</code> 方法的线程结束</p><p><code>join(long timeout)</code>：join，但是时间到后也能结束其他线程的等待</p></li><li><p><code>isAlive()</code>：测试当前线程是否在活动</p></li><li><p><code>Thread.currentThread()</code>：引用当前运行中的线程</p></li></ul><h3 id="用户线程和守护线程"><a href="#用户线程和守护线程" class="headerlink" title="用户线程和守护线程"></a>用户线程和守护线程</h3><ul><li><p>用户线程：也叫工作线程。当线程任务执行完毕或通知方式结束</p></li><li><p>守护线程：一般是为工作线程服务的。当所有线程结束，守护线程自动结束</p><p>常见的守护线程：垃圾回收机制</p><blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Thread thraed = new Thread(bullet);</span><br><span class="line">thread.setDeamon(true);//这样，子线程被设置为主线程的守护线程</span><br><span class="line">thread.start();</span><br></pre></td></tr></table></figure></blockquote></li></ul><h3 id="线程的生命周期"><a href="#线程的生命周期" class="headerlink" title="线程的生命周期"></a>线程的生命周期</h3><p>线程的状态有</p><ul><li><p>NEW：尚未启动</p></li><li><p>RUNNABLE：在 JVM 中执行的线程</p><p>可细分为 READY 和 RUNNING</p></li><li><p>BLOCKED：被阻塞等待监视器锁定的线程</p></li><li><p>WAITING：正等待另一个线程执行特定动作的线程</p></li><li><p>TIMED_WAITING：正等待另一个线程执行特定动作达到等待时间的线程</p></li><li><p>TERMINATED：已退出的线程</p></li></ul><h2 id="线程的互斥"><a href="#线程的互斥" class="headerlink" title="线程的互斥"></a>线程的互斥</h2><blockquote><p>在多线程编程，一些敏感数据不允许被多个线程同时访问。此时就用同步访问技术，保证数据在任意时刻，最多有一个线程同时访问，以保证数据的完整性。</p><p>也可以这样理解：线程同步，即当有一个线程对内存进行操作时，其他线程都不能对这个内存地址进行操作（被阻塞），直到该线程完成操作，再让下一线程进行操作。</p></blockquote><h3 id="互斥锁"><a href="#互斥锁" class="headerlink" title="互斥锁"></a>互斥锁</h3><blockquote><p>在 Java 语言中，引入了 “对象互斥锁” 的概念，也称为监视器，来保证共享数据操作的完整性</p><p>每个对象都对应一个可称为 “互斥锁” 的标记，这个标记用来保证在任一时刻都只能有一个线程访问对象。</p><p>Java 语言中，有 2 种方式实现互斥锁：</p><ul><li>用关键字 volatile 声明一个共享数据（变量）。一般很少使用该关键字</li><li>用关键字 synchronized 声明共享数据的一个方法或一个代码</li></ul><p>同步的局限性：导致程序的执行效率要降低。</p><p>非静态的对象，同步方法的锁可以是 this，也可以是其他对象（要求是同一对象）</p><p>静态对象，同步方法的锁为当前类本身</p></blockquote><ol><li><p>同步代码块</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">synchronized (对象) &#123;//得到对象的锁，才能操作同步代码</span><br><span class="line">需要被同步代码;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在第一个线程持有锁定标记时，如果另一个线程企图执行该代码块语句，将从对象中索取锁定标记。</p><p>因为此时该标记不可得，古该线程不能继续执行，而是加入等待队列。</p><p>程序运行完 synchronized 代码块后，锁定标记会被自动返还。即使该同步代码块执行过程中抛出异常也是如此。一个线程多次调用该同步代码块的场合，也会在最外层执行完毕后正确返还。</p></li><li><p>放在方法声明中，表示整个方法为同步方法</p><p>因为 synchronized 语句的参数必须是 this，因此允许下面这种简洁的写法：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">public synchronized void method()&#123;</span><br><span class="line">代码;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h3 id="线程死锁"><a href="#线程死锁" class="headerlink" title="线程死锁"></a>线程死锁</h3><blockquote><p>多个线程都占用了对方的资源，不肯相让，就导致了死锁。编程时要避免死锁的产生。</p></blockquote><ul><li><p>以下操作会释放锁</p><ol><li>当前线程的同步方法、同步代码块执行结束。</li><li>当前线程在同步方法、同步代码块中遇到 <code>break</code>、<code>return</code></li><li>当前线程在同步方法、同步代码块中出现了未处理的 <code>Error</code></li><li>当前线程在同步方法、同步代码块中执行了 <code>wait()</code> 方法，当前线程暂停，并释放锁</li></ol></li><li><p>以下操作不会释放锁</p><ol><li><p>执行同步方法、同步代码块时，程序调用 <code>Thread.sleep()</code> 或 <code>Thread.yield()</code> 方法暂停当前线程的执行，不会释放锁</p></li><li><p>线程执行同步代码块时，其他线程调用了该线程的 <code>suspend()</code> 方法将该线程挂起，该线程不会释放锁</p><p>所以，应尽量避免使用 <code>suspend()</code> 和 <code>resume()</code> 来控制线程</p></li></ol></li></ul><h2 id="线程的同步"><a href="#线程的同步" class="headerlink" title="线程的同步"></a>线程的同步</h2><blockquote><p>Java 中，可以使用 <code>wait()</code>、<code>notify()</code>、<code>notifyAll()</code> 来协调线程间的运行速度关系。这些方法都被定义在 java.lang.Object 中</p><p>Java 中的每个对象实例都有两个线程队列和它相连。一个用以实现等待锁定标志的线程，另一个用来实现 <code>wait()</code> 和 <code>notify()</code> 的交互机制</p></blockquote><ul><li><p><code>wait()</code>：让当前线程释放所有其持有的 “对象互斥锁”，进入等待队列</p></li><li><p><code>notify()</code>、<code>notifyAll()</code>：唤醒一个或所有在等待队列中等待的线程，并将他们移入同一个等待 “对象互斥锁” 的队列。</p><p>执行这些方法时如果没有等待中的线程，则其不会生效，也不会被保留到以后再生效</p></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">synchronized (key) &#123;</span><br><span class="line">    if (key.value == 0) key.wait();</span><br><span class="line">    key.value--;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">synchronized (key) &#123;</span><br><span class="line">    key.value++;</span><br><span class="line">    key.nitifyAll();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>因为调用这些方法时必须持有对象的 “对象互斥锁”，所以上述方法只能在 synhronized 方法或代码块中执行。</p>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 教程 </tag>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java 图形界面设计</title>
      <link href="/2022/12/08/learn/Java/Java%20%E5%9B%BE%E5%BD%A2%E7%95%8C%E9%9D%A2%E8%AE%BE%E8%AE%A1/"/>
      <url>/2022/12/08/learn/Java/Java%20%E5%9B%BE%E5%BD%A2%E7%95%8C%E9%9D%A2%E8%AE%BE%E8%AE%A1/</url>
      
        <content type="html"><![CDATA[<blockquote><p>图形用户界面（Graphical User Interface，简称 GUI）是大多数程序不可缺少的部分。</p><p>Java 的图形界面由各种组件组成。在 java.awt 和 java.swing 包中定义了多种用于创建图形用户界面的组件类。</p><p>Swing 组件和 AWT 组件最大的不同是 Swing 组件实现时不包含任何本地代码，因此不受硬件平台的限制，而具有更多的功能，并且在任何平台上运行效果都是相同的。不包含本地代码的 Swing 组件被称为 “轻量级” 组件，而 AWT 被称为 “重量级” 组件。两种组件一同使用的场合，AWT 总是显示在上面。</p></blockquote><p>设计用户界面是一般有 3 个步骤：</p><ol><li>选取组件</li><li>设计布局</li><li>响应事件</li></ol><h2 id="容器"><a href="#容器" class="headerlink" title="容器"></a>容器</h2><blockquote><p>组件分为容器组件和非容器组件。容器组件即可以包含其他组件的组件。非容器组件必须包含在容器组件中。</p><p>容器组件分为：顶层容器、一般用途容器</p></blockquote><h3 id="顶层容器"><a href="#顶层容器" class="headerlink" title="顶层容器"></a>顶层容器</h3><p>Swing 中提供了 4 种顶层容器：</p><ul><li>JFrame：带有标题行和控制按钮（最小化、恢复&#x2F;最大化、关闭）的独立窗口。有时称为框架。创建程序时要使用 JFream</li><li>JApplet：创建小应用程序时要使用 JApplet。其被包含在浏览器窗口中</li><li>JDialog：创建对话框时使用 JDialog</li><li>JWindow：一个不带有标题行和控制按钮的窗口。一般很少使用</li></ul><p>构造方法：</p><ul><li><code>new JFrame()</code>：构造一个初始不可见，无标题的新框架窗体</li><li><code>new JFrame(&quot;Title&quot;)</code>：构造一个初始不可见，具有指定标题的新框架窗体</li></ul><p>常用方法：</p><ul><li><p><code>void setBounds(int x, int y, int width, int height)</code>：移动并调整框架大小。框架左上角位置为（x, y），框架大小为 width × height</p></li><li><p><code>void setSize(int width, int height)</code>：设置窗口大小</p></li><li><p><code>void setBackground(Color bg)</code>：设置框架背景色</p><p><code>void setForeground(Color fg)</code>：设置框架前景色</p></li><li><p><code>void setVisible(boolean aFlag)</code>：设置可见性</p></li><li><p><code>void pack()</code>：自适应框架大小，以符合子组件的首选大小和布局</p></li><li><p><code>void setTitle(String title)</code>：设置标题</p></li><li><p><code>Container getContentPane()</code>：返回此框架窗体的内容窗格对象</p><p><em>Container 类是所有容器类的父类，包含容器的共有操作</em></p><p><code>void setContentPane(Container contentPane)</code>：把指定内容窗格设置为此框架的内容窗格对象</p></li><li><p><code>void setLayout(LayoutManager manager)</code>：设置布局管理器</p></li></ul><p> <strong><em>—— 哦我的上帝啊，如果有什么名词是你不懂的，为什么不试着继续看下去呢？</em></strong></p><h3 id="内容窗格"><a href="#内容窗格" class="headerlink" title="内容窗格"></a>内容窗格</h3><blockquote><p>4 个顶层容器每个都有 1 个内容窗格。除菜单外，顶层容器的所有组件都放在这个内容窗格内。</p></blockquote><ul><li><p>直接添加组件至内容窗格</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Container contentPane = jframe.getContentPane();//[1] 获取内容窗格对象</span><br><span class="line">contentPane.add(button, BorderLayout.CENTER);//[2] 将组件添加到内容窗格</span><br></pre></td></tr></table></figure><blockquote><ol><li><p>使用顶层容器的 <code>getContentPane()</code> 方法获得其内容窗格对象。</p></li><li><p>将组件添加到内容窗格。</p><p>其中 button 是一个按钮控件，BorderLayout.CENTER 代表位置在中间</p><p>向顶层容器内容窗格添加组件时，也可以直接调用顶层容器的 add() 方法</p></li></ol></blockquote></li><li><p>以新的内容窗格代替原有内容窗格</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">JPanel contentPane = new JPanel();//[1] 创建 JPanel 实例</span><br><span class="line">contentPane.setLayout(new BorderLayout());//[2] 创建布局管理器</span><br><span class="line">contentPane.add(button, BorderLayout.CENTER);//[3] 添加组件</span><br><span class="line">jfream.setContentPane(contentPane);//[4] 添加内容窗格</span><br></pre></td></tr></table></figure><blockquote><ol><li><p>创建 JPanel（面板）实例。JPanel 是 Container 的子类。</p></li><li><p>顶层容器默认的布局管理器是 BorderLayout，而 JPanel 的默认布局管理器是 FlowLayout</p></li><li><p>通过 <code>setContentPane(contentPane)</code> 方法为 jfream 设置新的内容窗格</p></li></ol></blockquote></li></ul><h3 id="面板"><a href="#面板" class="headerlink" title="面板"></a>面板</h3><blockquote><p>普通面板（JPanel）和滚动面板（JScrollPanel）都是用途广泛的容器。面板与顶层容器不同，不能独立存在，而必须添加到其他容器内部。面板可以嵌套，由此可以设计出复杂的图形用户界面。</p></blockquote><h4 id="JPanel"><a href="#JPanel" class="headerlink" title="JPanel"></a>JPanel</h4><p><strong>构造方法：</strong></p><ul><li><code>new JPanel()</code>：创建具有 FlowLayout 布局的新面板</li><li><code>new JPanel(LayoutManager layout)</code>：创建指定布局的新面板</li></ul><p><strong>常用方法：</strong></p><ul><li><code>Component add(Compinent comp)</code>：将指定组件添加至面板</li></ul><h4 id="JScrollPanel"><a href="#JScrollPanel" class="headerlink" title="JScrollPanel"></a>JScrollPanel</h4><p>JScrollPanel 是一个带有滚动条的面板，但只能添加一个组件。添加多个组件的场合，先将那些组件添加入 JPanel 对象，再将该 JPanel 对象添加进 JScrollPanel 对象中</p><p><strong>构造方法：</strong></p><ul><li><code>new JScrollPanel()</code>：创建一个空的 JScrollPanel。水平、垂直滚动条都能显示</li><li><code>new JScrollPanel(Component view)</code>：创建指定组件内容的 JScrollPanel</li></ul><p><strong>常用方法：</strong></p><ul><li><p><code>void setHorizontalScrollBarPolicy(int policy)</code>：确定水平滚动条何时显示</p><p>其中 policy 的可选值是以下三种：</p><ul><li>ScrollPaneConstants.HORIZONTAL_SCROLLBAR_AS_NEEDED：需要时可见</li><li>ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER：永远不可见</li><li>ScrollPaneConstants.HORIZONTAL_SCROLLBAR_ALWAYS：永远可见</li></ul></li><li><p><code>void setVerticalScrollBarPolicy(int policy)</code>：确定垂直滚动条何时显示</p><p>其中 policy 的可选值是以下三种：</p><ul><li>ScrollPaneConstants.VERTICAL_SCROLLBAR_AS_NEEDED：需要时可见</li><li>ScrollPaneConstants.VERTICAL_SCROLLBAR_NEVER：永远不可见</li><li>ScrollPaneConstants.VERTICAL_SCROLLBAR_ALWAYS：永远可见</li></ul></li></ul><h4 id="Scrollbar"><a href="#Scrollbar" class="headerlink" title="Scrollbar"></a>Scrollbar</h4><p>AWT 中还有一个滚动条组件，提供了允许用户在一定范围的值中进行选择的便捷方式</p><p><strong>构造器：</strong></p><ul><li><p><code>new Scrollbar()</code>：构造一个新的滚动条</p></li><li><p><code>new Scrollbar(int orientation)</code>：构造一个有指定方向的滚动条</p><p>其中 orientation 的可选值是：</p><ul><li>Scrollbar.HORIZONTAL：水平滚动条</li><li>Scrollbar.VERTICAL：垂直滚动条</li></ul></li><li><p><code>new Scrollbar(int orientation, int value, int visible, int minimum, int maximun)</code>：构造一个有初始方向、初始值、可视量、最小&#x2F;最大值的滚动条</p></li></ul><h2 id="标签和按钮"><a href="#标签和按钮" class="headerlink" title="标签和按钮"></a>标签和按钮</h2><h3 id="标签"><a href="#标签" class="headerlink" title="标签"></a>标签</h3><blockquote><p>标签（JLable）是最简单的 Swing 组件，通常用于显示提示性的文本信息或图标。其不可被编辑</p></blockquote><p><strong>构造器：</strong></p><ul><li><p><code>new JLable()</code>：构造一个不显示文本或图标的空标签</p></li><li><p><code>new JLable(Icon image)</code>：构造一个显示图标的标签</p></li><li><p><code>new JLable(String text)</code>：构造一个显示文本的标签</p></li><li><p><code>new JLable(Icon image, int horizontalAlignment)</code>：构造一个显示图标的标签，并指定水平对齐方式</p><p>其中 horizontalAlignment 的取值可以是：</p><ul><li>JLable.LEFT：左对齐</li><li>JLable.RIGHT：右对齐</li><li>JLable.CENTER：居中对齐</li></ul></li><li><p><code>new JLable(String text, int horizontalAlignment)</code>：构造一个显示文本的标签，并指定水平对齐方式</p></li><li><p><code>new JLable(String text, Icon image, int horizontalAlignment)</code>：构造一个同时显示文本和图标的标签，并指定水平对齐方式</p></li></ul><h3 id="按钮"><a href="#按钮" class="headerlink" title="按钮"></a>按钮</h3><blockquote><p>按钮（JButton）是 Java 图形用户界面的基本组件之一。</p><p>经常用到的按钮有 4 种形式：按钮（JButton）、切换按钮（JToggleButton）、复选按钮（JCheckButton）、单选按钮（JRadioButton）</p><p>这些按钮类均是 AbstractButton 的子类或间接子类</p></blockquote><h4 id="JButton"><a href="#JButton" class="headerlink" title="JButton"></a>JButton</h4><p><strong>构造器：</strong></p><ul><li><code>new JButton()</code>：构造一个既没有文本也没有图标的按钮</li><li><code>new JButton(Icon icon)</code>：构造一个有图标的按钮</li><li><code>new JButton(String text)</code>：构造一个有文本的按钮</li><li><code>new JButton(String text, Icon icon)</code>：构造一个有文本也有图标的按钮</li></ul><p><strong>常用方法：</strong></p><ul><li><p><code>void setMnemonic(int mnemonic)</code>：设置当前按钮的键盘助记符</p></li><li><p><code>void setText(String text)</code>：设置按钮的文本</p><p><code>void setIcon(Icon icon)</code>：设置按钮图标</p></li><li><p><code>void setEnabled(boolean mod)</code>：是否启用按钮</p></li><li><p><code>String getText()</code>：返回按钮的文本</p></li><li><p><code>void setToolTipText()</code>：设置提示文本</p></li><li><p><code>void addActionListener(ActionListener l)</code>：为按钮添加事件监听程序</p><p><code>void removeActionListener(ActionListener l)</code>：移除事件监听程序</p></li></ul><h4 id="JToggleButton、JCheckButton、JRadioButton"><a href="#JToggleButton、JCheckButton、JRadioButton" class="headerlink" title="JToggleButton、JCheckButton、JRadioButton"></a>JToggleButton、JCheckButton、JRadioButton</h4><blockquote><p>JToggleButton 是有两种状态（选中状态、未选中状态）的按钮。通过点击切换这两种状态</p><p>JCheckButton、JRadioButton 是 JToggleButton 的子类，构造方法与 JToggleButton 相同。</p></blockquote><p><strong>构造器：</strong></p><ul><li><p><code>new JToggleButton()</code>：构造一个没有文本也没有图标的切换按钮</p></li><li><p><code>new JToggleButton(Icon icon)</code>：构造一个有图标的切换按钮</p><p><code>new JToggleButton(Icon icon, boolean selected)</code>：构造一个有图标的切换按钮，设置其初始状态</p></li><li><p><code>new JToggleButton(String text)</code>：构造一个有文本的切换按钮</p><p><code>new JToggleButton(String text, boolean selected)</code></p></li><li><p><code>new JToggleButton(String text, Icon icon)</code>：构造一个有文本也有图标的切换按钮</p><p><code>new JToggleButton(String text, Icon icon, boolean selected)</code></p></li></ul><p><strong>常用方法（除 JButton 方法外）：</strong></p><ul><li><p><code>boolean isSeleced()</code>：获取按钮的当前状态</p></li><li><p><code>void addItemListener(ItemListener l)</code>：为按钮添加事件侦听程序</p><p><code>void removeItemListener(ItemListener l)</code>：移除事件侦听程序</p></li></ul><h2 id="布局管理器"><a href="#布局管理器" class="headerlink" title="布局管理器"></a>布局管理器</h2><blockquote><p>容器中包含了组件。组件的布局，包括其位置和大小，通常由布局管理器负责安排。每个容器都有一个默认的布局管理器。</p></blockquote><h3 id="FlowLayout-流布局管理器"><a href="#FlowLayout-流布局管理器" class="headerlink" title="FlowLayout 流布局管理器"></a>FlowLayout 流布局管理器</h3><blockquote><p>FlowLayout 定义在 java.awt 包中。</p></blockquote><p><strong>构造器：</strong></p><ul><li><p><code>new FlowLayout()</code>：创建默认的 FlowLayout 布局管理器。</p><p>居中对齐。默认水平、垂直间距是 5 像素</p></li><li><p><code>new FlowLayout(int align)</code>：创建一个 FlowLayout 布局管理器。</p><p>指定对齐方式。默认水平、垂直间距是 5 像素</p><p>align 的可选值有这些：</p><ul><li>FlowLayout.LEFT：左对齐</li><li>FlowLayout.RIGHT：右对齐</li><li>FlowLayout.CENTER：居中对齐</li></ul></li><li><p><code>new FlowLayout(int align, int hgap, int vgap)</code>：创建一个 FlowLayout 布局管理器。</p><p>指定对齐方式。指定水平、垂直间距</p></li></ul><p><strong>使用说明：</strong></p><ol><li>FlowLayout 对容器中组件进行布局的方式是将组件逐个放置在容器中的一行上。一行满后，另起一行。</li><li>与其他布局管理器不同。FlowLayout 不会强行设定组件的大小，而是通过每个组件的 getPreferredSize() 方法获取其各自的期望大小</li></ol><h3 id="BorderLayout-边界布局管理器"><a href="#BorderLayout-边界布局管理器" class="headerlink" title="BorderLayout 边界布局管理器"></a>BorderLayout 边界布局管理器</h3><blockquote><p>BorderLayout 定义在 java.awt 包中，是顶层容器的默认布局管理器。它提供了一种较为复杂的组件布局管理方案。</p></blockquote><p><strong>构造方法：</strong></p><ul><li><code>new BorderLayout()</code>：一个组件间没有间距的布局管理器</li><li><code>new BorderLayout(int hgap, int vgap)</code>：定义水平、垂直间距的布局管理器</li></ul><p><strong>使用说明：</strong></p><ol><li>每个由 BorderLayout 管理的容器被划分成 5 个区域，分别是容器的 上部（BorderLayout.NORTH）、下部（BorderLayout.SOUTH）、左部（BorderLayout.WEST）、右部（BorderLayout.EAST）、中部（BorderLayout.CENTER）</li><li>在 BorderLayout 布局管理器的管理下，组件必须通过 add() 方法加入容器的指定区域。不指定的场合，默认加入中部区域</li><li>容器的每个区域仅能加入一个组件。加入了多个组件的场合，只有最后一个生效</li><li>对于中部以外的 4 个边界区域，没有使用的区域的大小将变为零。此时，中部区域会扩展并占据该未用区域的位置。如果 4 个边界区域都没有使用，中部区域会占据整个窗口。</li><li>窗口大小改变时，按钮的相对位置不会变化。但按钮的大小会改变</li></ol><h3 id="GridLayout-网格布局管理器"><a href="#GridLayout-网格布局管理器" class="headerlink" title="GridLayout 网格布局管理器"></a>GridLayout 网格布局管理器</h3><blockquote><p>GridLayout 定义在 java.awt 包中，是一种网格式的布局管理器。</p></blockquote><p><strong>构造器：</strong></p><ul><li><p><code>new GridLayout()</code>：创建一个一行的网格。列数根据实际需要决定</p></li><li><p><code>new GridLayout(int rows, int cols)</code>：指定行数、列数的网格布局</p><p>rows 和 cols 中，最多有一个可以是 0，但不能都为 0。那个为 0 的场合，根据实际需要决定数量</p></li><li><p><code>new GridLayout(int rows, int cols, int hgap, int vgap)</code>：指定行数、列数，也指定水平、垂直间距的网格</p></li></ul><p><strong>使用说明：</strong></p><ol><li><p>GridLayout 将容器空间划分成若干行乘若干列的网格。组件依次放入其中，每个组件占据一格</p></li><li><p>网格每列宽度相同，每行高度相同。组件放入的次序决定了其位置</p></li><li><p>想要组件间留有空白的场合，可以添加一个空白标签</p></li><li><p>网格数多于组件数的场合，那些多余的格子为空白。</p><p>网格数少于组件数的场合，系统根据需要适当添加。</p></li><li><p>窗口大小改变时，按钮的相对位置不会变化。但按钮的大小会改变</p></li></ol><h3 id="CardLayout-卡片式布局管理器"><a href="#CardLayout-卡片式布局管理器" class="headerlink" title="CardLayout 卡片式布局管理器"></a>CardLayout 卡片式布局管理器</h3><blockquote><p>CardLayout 定义在 java.awt 包中，是一种卡片式的布局管理器。</p></blockquote><p><strong>构造器：</strong></p><ul><li><code>new CardLayout()</code>：一个默认无间距的 CardLayout 布局管理器</li><li><code>new CardLayout(int hgap, int vgap)</code>：指定水平、垂直间距的 CardLayout 布局管理器</li></ul><p><strong>常用方法：</strong></p><ul><li><p><code>void first(Container parent)</code>：翻转到容器的第一张卡片</p><p><code>void next(Container parent)</code>：翻转到下一张卡片。当前是最后一张的场合，翻到第一张卡片</p><p><code>void previous(Container parent)</code>：翻转到前一张卡片。当前是第一张的场合，翻到最后一张卡片</p><p><code>void last(Container parent)</code>：翻转到容器的最后一张卡片</p></li><li><p><code>void show(Container parent, String name)</code>：翻转到卡片集中具有指定 name 的卡片。没有该卡片的场合不执行任何操作</p></li></ul><p><strong>使用说明：</strong></p><ol><li>CardLayout 将容器中的组件处理为一系列卡片，每一刻只显示其中一张。</li><li>容器第一次显示时，显示第一个添加的组件。</li></ol><h3 id="BoxLayout-方框布局管理器"><a href="#BoxLayout-方框布局管理器" class="headerlink" title="BoxLayout 方框布局管理器"></a>BoxLayout 方框布局管理器</h3><blockquote><p>BoxLayout 定义在 javax.swing 包中，其组件横排一行或竖排一列，但宽度（高度）可以不同。</p></blockquote><p><strong>构造器：</strong></p><ul><li><p><code>new BoxLayout(Container target, int axis)</code>：创建一个沿给定轴放置组件的布局管理器</p><p>其中 target 表明为哪个容器设置此布局管理器，axis 指明组件排列方向</p><p>axis 的值是：</p><ul><li>BoxLayout.X_AXIS：水平方向排列</li><li>BoxLayout.Y_AXIS：竖直方向排列</li></ul><p>举个例子：</p><blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">JPanel jp = new JPanel();</span><br><span class="line">jp.setLayout(new BoxLayout(jp, BoxLayout.X_AXXIS));</span><br></pre></td></tr></table></figure></blockquote></li></ul><p><strong>使用说明：</strong></p><ol><li>BoxLayout 将容器中的组件横排一行或竖排一列。那些组件横排一行时，可以有不同宽度；竖排一列时，可以有不同的高度。</li><li>窗口大小改变时，按钮的相对位置不会变化。</li></ol><p><strong>Box 类</strong></p><blockquote><p>javax.swing 中定义了一个专门使用 BoxLayout 的容器 Box 类。</p></blockquote><ul><li><p><code>static Box createHorizontalBox()</code>：返回一个使用水平方向的 BoxLayout 的 Box</p><p><code>static Box createVerticalBox()</code>：返回一个使用竖直方向的 BoxLayout 的 Box</p></li><li><p><code>static Component createHorizontalGlue()</code>：创建一个水平方向的不可视的组件（填满剩余空间）</p><p><code>static Component createVerticalGlue()</code></p></li><li><p><code>static Component createHorizontalStrut()</code>：创建一个水平方向的不可视的组件（指定宽高）</p><p><code>static Component createVerticalStrut()</code></p></li><li><p><code>static Component createRigidArea()</code>：创建一个不可视的组件，不大不小，尺寸真是好极了</p></li></ul><h3 id="空布局"><a href="#空布局" class="headerlink" title="空布局"></a>空布局</h3><blockquote><p>其实也能不用布局管理器的，真的</p></blockquote><ol><li>调用容器的 <code>setLayout(null)</code> 将容器的布局管理器置空</li><li>&#x3D;调用组件的 <code>setBounds(x, y, w, h)</code> 方法设置其位&#x3D;置和大小。老东西，你的布局管理器最没用啦！</li></ol><h2 id="事件处理"><a href="#事件处理" class="headerlink" title="事件处理"></a>事件处理</h2><blockquote><p>Java 运行时，如果用户进行某个操作，程序应当做出相应。</p><p>程 · 序 · 无 · 响 · 应（噔 噔 咚）</p><p>……总之，用户在程序界面进行的操作称为用户事件，对事件的相应称为事件处理。</p></blockquote><h3 id="事件处理模型"><a href="#事件处理模型" class="headerlink" title="事件处理模型"></a>事件处理模型</h3><blockquote><p>Java 事件处理是采取 “委派事件模型”。当事件发生时，产生事件类对象。这里说的事件类对象实际上就是 <code>java.awt.event</code> 事件类库里某个类创建的对象。操作不同的场合，事件类对象不同。</p><p>会把此事件类对象传递给事件侦听程序处理。它是实现了对应侦听程序接口的一个类。</p><p>事件只是一个对象，其只向注册的侦听程序报告</p></blockquote><p>示范一个简单的事件处理：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">import javax.seing.*;</span><br><span class="line">import java.awt.*;//[0]</span><br><span class="line"></span><br><span class="line">public class Code_15_4_1 &#123;</span><br><span class="line">    public static void main(String[] args) throws InterruptedException &#123;</span><br><span class="line">        Button b = new Button(&quot;Button&quot;);</span><br><span class="line">        b.addActionListener((e) -&gt; System.out.println(&quot;Pressed&quot;));//[1]</span><br><span class="line">        JFrame jFrame = new JFrame(&quot;Test&quot;);</span><br><span class="line">        jFrame.setBounds(30, 30, 100, 100);</span><br><span class="line">        jFrame.add(b);</span><br><span class="line">        jFrame.setVisible(true);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><ol start="0"><li><p>引入 java.awt.event 包</p></li><li><p>注册事件侦听程序，并实现其方法</p><p>示例中的简写其实相当于以下代码（匿名内部类）：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">b.addActionListener(new ActionListener() &#123;</span><br><span class="line">    @OverRide</span><br><span class="line">    public void actionPerformed (ActionEvent e) &#123;</span><br><span class="line">        System.out.println(&quot;Pressed&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p><strong><em>—— 示例写法见 [[27 Java8 新特性]]</em></strong></p><p>事件侦听程序可以定义在单独的类中，也可以定义在组件类中：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">class MyButton extends JButton implements ActionListener&#123;</span><br><span class="line">    public MyButton() &#123;</span><br><span class="line">        addActionListener(this);</span><br><span class="line">    &#125;</span><br><span class="line">                                       </span><br><span class="line">    @Override</span><br><span class="line">    public void actionPerformed(ActionEvent e) &#123;</span><br><span class="line">        System.out.println(&quot;Pressed&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol></blockquote><h3 id="事件的种类"><a href="#事件的种类" class="headerlink" title="事件的种类"></a>事件的种类</h3><blockquote><p>在 java.awt.event 包和 javax.swing.event 包中定义了很多其他的事件类。每种事件类有一个对应的接口，接口中声明了一个或多个抽象的事件处理方法。</p></blockquote><table><thead><tr><th>事件类</th><th>组件</th><th>方法及说明</th></tr></thead><tbody><tr><td>ActionEvent</td><td>JButton、JCheckBox、JComboBox、JMenuItem、JRaidoButton</td><td>actionPerformed(e) 单击按钮、选择菜单项或在文本框中按回车时</td></tr><tr><td>AdjustmentEvent</td><td>JScrollBar</td><td>adjustmentValueChanged(e) 当改变滚动条滑块位置时</td></tr><tr><td>ComponentEvent</td><td>JComponent 及其子类</td><td>componentMoved(e) 组件移动时；componentHidden(e) 组件隐藏时；componenetResized(e) 组件缩时；componentShown(e) 组件显示时</td></tr><tr><td>ContainerEvent</td><td>JContainer 及其子类</td><td>containerAdded(e) 添加组件时；containerMoved(e)移除组件时</td></tr><tr><td>FocusEvent</td><td>同 ComponentEvent</td><td>focusGained(e) 组件获得焦点时；focusLost(e) 组件失去焦点时</td></tr><tr><td>ItemEvent</td><td>JCheckBox、JCheckboxMenuItem、JComboBox</td><td>itemStateChanged(e) 选择复选框、选项框、单击列表框、选中带复选框菜单时</td></tr><tr><td>KeyEvent</td><td>同 ComponentEvent</td><td>keyPressed(e) 键按下时；keyReleased(e) 键释放时；keyTaped(e) 击键时</td></tr><tr><td>MouseEvent</td><td>同 ComponentEvent</td><td>mousePressed(e) 鼠标按下时；mouseEntered(e) 鼠标进入时；mouseExited(e) 鼠标离开时；mouseClicked(e) 鼠标点击时；mouseReleased(e) 鼠标释放时</td></tr><tr><td>MouseMotionEvent</td><td>同 ComponentEvent</td><td>mouseDragged(e) 鼠标拖放时；mouseMoved(e) 鼠标移动时</td></tr><tr><td>TextEvent</td><td>JTextField、JTextArea</td><td>textValueChanged(e) 文本框、多行文本框内容修改时</td></tr><tr><td>WindowEvent</td><td>JFrame、JWindow、JDialog</td><td>windowOpened(e) 窗口打开时；windowClosing(e) 窗口关闭时；windowClosed(e) 窗口关闭后；windowActived(e) 窗口激活时；windowDeactivated(e) 窗口失去焦点时；windowIconified(e) 窗口最小化时；WindowDeiconified(e) 窗口最小化还原时</td></tr></tbody></table><p>使用说明：</p><ol><li><p>XXXEvent 事件类的接口名就是 XXXListener。占地方太大，上面就没写</p></li><li><p>事件侦听模式允许为一个组件多次调用 addListener 方法，注册多个侦听程序。</p><p>事件发生时，单个事件的多个侦听程序的调用顺序不确定。</p></li><li><p>调用事件处理方法时会传入一个参数。该参数就是那些事件类实例，其中包含事件有关的重要信息。</p><p>调用这些事件类实例各自特有的方法获取这些信息。</p></li></ol><h3 id="事件适配器"><a href="#事件适配器" class="headerlink" title="事件适配器"></a>事件适配器</h3><blockquote><p>侦听程序必须实现接口的全部抽象方法，但有时我们只关心其中的某一种方法。为了编程方便，Java 为一些声明了多个抽象方法的 Listener 接口提供了相应的适配器类。</p></blockquote><table><thead><tr><th>接口名称</th><th>适配器名称</th></tr></thead><tbody><tr><td>ComponentListener</td><td>ComponentAdapter</td></tr><tr><td>ContainerListener</td><td>ContainerAdapter</td></tr><tr><td>FocusListener</td><td>FocusAdapter</td></tr><tr><td>KeyListener</td><td>KeyAdapter</td></tr><tr><td>MouseListener</td><td>MouseAdapter</td></tr><tr><td>MouseMotionListener</td><td>MouseMotionAdapter</td></tr><tr><td>MouseInputListener</td><td>MouseInputAdapter</td></tr><tr><td>WindowListener</td><td>WindowAdapter</td></tr></tbody></table><p>这些适配器实现了接口的全部抽象方法，只是方法内容为空</p><p>这样，创建新类时可以不必实现接口，而是继承适配器类，并重写需要的方法</p><h2 id="Java-绘图技术"><a href="#Java-绘图技术" class="headerlink" title="Java 绘图技术"></a>Java 绘图技术</h2><blockquote><p>Java 语言约定，显示屏上一个长方形区域为程序绘图区域，坐标原点（0, 0）位于整个区域左上角。</p><p>一个坐标点（x, y）对应一个像素，其中坐标点的 x、y 必须是非负整数。x 沿水平方向从左向右递增、y 沿竖直方向从上往下递增</p></blockquote><h3 id="颜色"><a href="#颜色" class="headerlink" title="颜色"></a>颜色</h3><blockquote><p>可以使用 java.awt 包中的 Color 类来定义和管理颜色。Color 类的每个对象代表一种颜色。</p></blockquote><p>Color 类有 26 个常量，代表 13 种预定义颜色：</p><table><thead><tr><th>颜色</th><th>对象</th><th>ᓚᘏᗢ</th></tr></thead><tbody><tr><td>黑色（#000000）</td><td>Color.black</td><td>Color.BLACK</td></tr><tr><td>蓝色（#0000FF）</td><td>Color.blue</td><td>Color.BLUE</td></tr><tr><td>青色（#00FFFF）</td><td>Color.cyan</td><td>Color.CYAN</td></tr><tr><td>灰色（#808080）</td><td>Color.gray</td><td>Color.GRAY</td></tr><tr><td>深灰色（#404040）</td><td>Color.darkGary</td><td>Color.DARKGARY</td></tr><tr><td>浅灰色（#C0C0C0）</td><td>Color.lightGary</td><td>Color.LIGHTGARY</td></tr><tr><td>绿色（#00FF00）</td><td>Color.green</td><td>Color.GREEN</td></tr><tr><td>洋红色（#FF00FF）</td><td>Color.magenta</td><td>Color.MAGENTA</td></tr><tr><td>橙色（#FFC800）</td><td>Color.orange</td><td>Color.ORANGE</td></tr><tr><td>粉红色（#FFAFAF）</td><td>Color.pink</td><td>Color.PINK</td></tr><tr><td>红色（#FF0000）</td><td>Color.red</td><td>Color.RED</td></tr><tr><td>白色（#FFFFFF）</td><td>Color.write</td><td>Color.WRITE</td></tr><tr><td>黄色（#FFFF00）</td><td>Color.yellow</td><td>Color.YELLOW</td></tr></tbody></table><p>也可以通过红、绿、蓝三原色值来组合。每种颜色由三个值组成（RGB），值的范围是 [0, 256)：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Color color = new Color(102, 204, 255);</span><br></pre></td></tr></table></figure><blockquote><p>这个颜色是：天依蓝（#66CCFF）</p><p>这部分笔记恐怕是所有 Java 笔记里唯一有五颜六色的地方了，真难得</p></blockquote><h3 id="字体"><a href="#字体" class="headerlink" title="字体"></a>字体</h3><blockquote><p>文字有 字体、样式、字号 三个要素</p></blockquote><p>基本的样式有：</p><ul><li><p>Font.PLAIN：正常（0）</p></li><li><p>Font.BOLD：<strong>粗体</strong>（1）</p></li><li><p>Font.ITALIC：_斜体_（2）</p><p>样式可以组合使用，如 (Font.BOLD + Font.ITALIC) 即 <strong><em>粗斜体</em></strong></p></li></ul><p>常用的字体：Times New roman（Times New roman）、Symbol（Symbol）、宋体（宋体）、楷体（楷体）等</p><p><strong>构造器：</strong></p><ul><li><code>new Font(String name, int style, int size)</code>：新建字体，指定字体、样式、字号</li></ul><p><strong>常用方法：</strong></p><ul><li><p><code>String getName()</code>：返回其字体名称</p><p><code>int getSize()</code>：返回其字号大小</p><p><code>int getStyle()</code>：返回其样式</p></li><li><p><code>boolean isBold()</code>：是否是粗体</p><p><code>boolean isItalic()</code>、<code>boolean isPlain()</code></p></li></ul><h3 id="Graphics-类"><a href="#Graphics-类" class="headerlink" title="Graphics 类"></a>Graphics 类</h3><blockquote><p>java.awt 包下的 Graohics 类是所有图形处理的基础，是所有图形上下文的抽象父类。其允许应用程序在组件及屏幕图像上进行绘制。</p></blockquote><p>当先后绘制的图形不同时，确定重叠部分颜色的方法称为绘图模式。</p><p>绘图模式分为两种：</p><ul><li><p>正常模式：<code>setPaintMode()</code></p><p>后绘制的图形覆盖先绘制的图形。</p></li><li><p>异或模式：<code>setXORMode(Color c)</code></p><p>当前绘制的颜色、先前绘制的颜色 及 选定的颜色 c 之间进行某种处理后，用新的颜色绘制。</p><p>这个模式下，如果使用同一颜色绘制 2 次，则相当于擦除之前绘制的图形，即恢复原本状态。</p></li></ul><p>若要在某个组件中绘图，应重写该组件的 paint(Graphics g) 方法，并在重写的方法内进行绘图。</p><ul><li><p><code>paint(Graphics g)</code>：组件被显示出来时，调用该方法</p><p>以下情况该方法会被调用</p><ul><li>组件第一次在屏幕显示时</li><li>窗口最小化&#x2F;最大化</li><li>窗口大小发生变化</li><li><code>repaint</code> 函数被调用</li></ul></li><li><p><code>repaint()</code>：重绘组件</p><p>该方法默认情况下会调用以下方法</p><ul><li><p><code>paintCompnent(Graphics g)</code>：绘制组件</p><p>一般情况下，要在 JComponent 子类的组件中绘图，重写该方法即可</p></li><li><p><code>paintBorder(Graphics g)</code>：绘制组件边框</p></li><li><p><code>paintChildren(Graphics g)</code>：绘制组件的子组件</p></li></ul></li></ul><p><strong>设置画笔：</strong></p><ul><li><p><code>setColor(Color c)</code>：设置画笔前景色</p><p><code>setBackgroud(Color c)</code>：设置背景色</p><p>每个图形环境都有一种画图时正在使用的前景色。画图所在的每个表面都有背景色</p></li><li><p><code>setFont(Font f)</code>：设置画笔字体</p></li></ul><p><strong>绘制几何图案：</strong></p><ul><li><p><code>drawArc(int x, int y, int width, int height, int startAngle, int arcAngle)</code>：绘制弧线</p><p>该弧线是 沿着起始点为 (x, y)、宽 width、高 height 的矩形所限定的椭圆 绘制一条弧线。</p><p>该弧线起始角度为 startAngle，弧度角度为 arcAngle</p><p><code>fillArc(int x, int y, int width, int height, int startAngle, int arcAngle)</code>：填充扇形</p></li><li><p><code>drawLine(int x1, int y1, int x2, int y2)</code>：绘制线段</p><p>该线段的两个端点是 (x1, y1) 和 (x2, y2)</p></li><li><p><code>drawOval(int x, int y, int width, int height)</code>：绘制椭圆</p><p>一个起始点为 (x, y)、宽 width、高 height 的矩形所限定的椭圆</p><p><code>fillOval(int x, int y, int width, int height)</code>：填充椭圆</p></li><li><p><code>drawPolygon(int[] xPoints, int[] tPoints, int nPoints)</code>：绘制多边形</p><p><code>drawPolygon(Polygon p)</code>：也能通过传入一个 Polygon 对象来绘制多边形</p><p>该图形的端点由传入参数确定。如果最后一个端点和第一个端点不相等，那么图形可能不闭合</p><p><code>fillPolygon(int[] xPoints, int[] tPoints, int nPoints)</code>：填充多边形</p><p><code>fillPolygon(Polygon p)</code>：通过传入一个 Polygon 对象来填充多边形</p><p>低情商：这咋填充？高情商：留给读者们思考吧</p></li><li><p><code>drawRect(int x, int y, int width, int height)</code>：绘制矩形</p><p>一个起始点为 (x, y)、宽 width、高 height 的矩形</p><p><code>fillRect(int x, int y, int width, int height)</code>：填充矩形</p></li><li><p><code>drawRoundRect(int x, int y, int width, int height, int arcWidth, int arcHeight)</code>：圆角矩形</p><p>一个起始点为 (x, y)、宽 width、高 height 的矩形，其圆角形状由 arcWidth、arcHeight 确定</p><p>其实就是矩形（线段）和椭圆（圆弧）的某种拼接</p><p><code>fillRoundRect(int x, int y, int width, int height, int arcWidth, int arcHeight)</code>：填充圆角矩形</p></li><li><p><code>drawString(String str, int x, int y)</code>：输出字符串</p><p>在 (x, y) 处输出字符串 str，向右扩展</p><p><code>drawChars(char[] chars, int offSet, int length, int x, int y)</code>：输出字符串</p><p>从字符数组的 offSet 下标处起，在 (x, y) 处输出 length 个字符，向右扩展</p><p><code>drawBytes(byte[] data, int offSet, int length, int x, int y)</code>：还不是一样？</p></li><li><p><code>draw3DRect(int x, int y, int width, int height, boolean raised)</code>：绘制 3D 矩形</p><p><code>fill3DRect(int x, int y, int width, int height, boolean raised)</code>：填充 3D 矩形</p><p>我感觉是和 PS 里的浮雕效果类似，生成了亮部和暗部。rasied 决定是凸起还是凹陷。</p></li></ul><h4 id="Polygon-类"><a href="#Polygon-类" class="headerlink" title="Polygon 类"></a>Polygon 类</h4><blockquote><p>Polygon 对象封装了多边形的坐标。</p></blockquote><p>构造方法：</p><ul><li><p><code>new Polygon()</code>：构造一个空的多边形。</p><p>无为太虚，无生一，一生二，二生三，三生万物。所以，空的多边形也是多边形。</p></li><li><p><code>new Polygon(int[] xs, int[] ys, int n)</code>：构造一个 n 点连接成的多边形</p></li></ul><p>常用方法：</p><ul><li><p><code>addPoint(int x, int y)</code>：将该点加入多边形中</p></li><li><p><code>boolean contains(int x, int y)</code>：如果多边形包含该点，则返回真</p><p><code>boolean contains(Point p)</code></p></li><li><p><code>get Bounds()</code>：得到多边形的外接矩形</p></li><li><p><code>translate(int dx, int dy)</code>：偏移</p><p>将多边形各点沿 x 轴偏移 dx，再沿 y 轴偏移 dy</p></li></ul><h3 id="Graphics2D-类"><a href="#Graphics2D-类" class="headerlink" title="Graphics2D 类"></a>Graphics2D 类</h3><blockquote><p>为了解决图形对象的局限性，Java 1.1 后 引入了 Java 2D，其包含一个继承自 Graphics 的 Graphics2D 类，增加了很多状态属性，扩展了 Java 的绘图功能</p><p>Graphics2D 拥有强大的二维图形处理能力，提供对几何形状、坐标转换、颜色管理、文字布局等更复杂的控制</p></blockquote><h4 id="图形状态属性"><a href="#图形状态属性" class="headerlink" title="图形状态属性"></a>图形状态属性</h4><blockquote><p>通过设定和修改属性，可以指定画笔宽度和画笔连接方式、设定平移、旋转、缩放或裁剪变换图形，还能设置填充图形的颜色和图案等。</p></blockquote><p><strong>状态属性：</strong></p><ul><li><p><strong>stroke 属性：</strong></p><p>该属性控制线宽、笔形样式、线段连接方式、短划线图案。</p><p>使用 <code>setStroke(Stroke s)</code> 方法设置 stroke 属性。</p><p>构造方法：</p><ul><li><p><code>new BasicStroke(float w)</code>：指定线宽的 stroke</p></li><li><p><code>new BasicStroke(float w, int cap, int join)</code>：指定线宽、端点样式 cap、线段交汇方式 join 的 stroke</p><p>其中，端点样式 cap 的值可以是：</p><ul><li>BasicStroke.CAP_BUTT：无修饰（0）</li><li>BasicStroke.CAP_ROUND：半圆形末端（1）</li><li>BasicStroke.CAP_SQUARE：方形末端（2，默认值）</li></ul><p>线段交汇方式 join 的值可以是：</p><ul><li>BasicStroke.JOIN_BEVEL：无修饰（2）</li><li>BasicStroke.JOIN_MITER：尖型末端（0，默认值）</li><li>BasicStroke.JOIN_ROUND：圆形末端（1）</li></ul></li></ul></li><li><p><strong>paint 属性：</strong></p><p>该属性控制填充效果。</p><p>使用 <code>setPaint(Paint p)</code> 方法设置 paint 属性</p><p>构造方法：</p><ul><li><p><code>new GradientPaint(float x1, float y1, Color c1, float x2, float y2, Color c2)</code>：构造一个简单的非周期性的 paint 对象。</p><p>从点 (x1, y1) 至点 (x2, y2) 处，颜色由 c1 渐变至 c2</p></li><li><p><code>new GradientPaint(float x1, float y1, Color c1, float x2, float y2, Color c2, boolean cyclic)</code>：构造一个周期或非周期性的 paint 对象。</p><p>如果希望渐变至终点又是起点的颜色，将 cyclic 设定为 true</p></li></ul></li><li><p><strong>transform 属性：</strong></p><p>该属性用来实现常用的图形平移、缩放、斜切等</p><p>使用 <code>setTransform(Transform t)</code> 方法设置 transform 属性</p><p>构造方法：</p><ul><li><p><code>new AffineTransform()</code>：构造一个表示仿射变换的新的 tansform</p><p><em>仿射变换：用我的话来讲，就是保持坐标点不变的情况下变换坐标系，能形成的变换</em></p></li></ul><p>常用方法：</p><ul><li><p><code>setToRotation(double theta)</code>：旋转 theta 角度</p><p><code>setToRotation(double theta, double x, double y)</code>：以 (x, y) 为旋转中心旋转</p><p><code>rotate(double theta, double x, double y)</code></p></li><li><p><code>setToScale(double sx, double sy)</code>：拉伸变换</p><p>x、y 方向按照 sx、yx 比例变换</p><p><code>scale(double sx, double sy)</code></p></li><li><p><code>setToTranslation(double tx, double ty)</code>：平移变换</p><p><code>translate(double tx, double ty)</code></p></li><li><p><code>setToShear(double shx, double shy)</code>：斜切变换</p><p>shx、shy 分别指定 x、y 方向的斜拉度</p></li></ul><p>看得出来，出版社的人写到这里应该是到了下班的点了。内容不明不白的不说，还写错了好几处。</p><p>我笔记上是改过来的。放心。</p><p>就这还 ”指定教材“ 呢。垃圾，还没我笔记写得好。</p></li><li><p><strong>clip 属性：</strong></p><p>该属性用于实现剪裁效果。</p><p>使用 <code>setClip(Shape clip)</code> 方法，确定裁剪区域的 Shape。可以连续使用该方法以得到其交集区域</p></li><li><p><strong>composit 属性：</strong></p><p>该属性设置图形重叠区域的效果</p><p>通过 <code>Alpha.Composite.getInstance(int rule, float alpha)</code> 得到一个实例。其中 alpha（透明度）的范围是 [0.0f, 1.0f]</p><p>至于 rule 是什么……我也不知道。或许不重要吧</p><p>通过 <code>setComposite(Composite comp)</code> 设置混合效果</p></li></ul><h4 id="Graphics2D-的绘图方法"><a href="#Graphics2D-的绘图方法" class="headerlink" title="Graphics2D 的绘图方法"></a>Graphics2D 的绘图方法</h4><blockquote><p>Graphics2D 保留了 Graphics 的绘图方法，又增加了很多新方法</p><p>另外，在 java.awt.geom 中声明了一系列类，能用于创建各种几何图形对象，包括：Line2D 线段类、Rectangle2D 矩形类、RoundRectangle2D 圆角矩形类、Ellipse2D 椭圆类、Arc2D 圆弧类、QuadCurve2D 二次曲线类、CubicCurve2D 三次曲线类</p><p>这些类都是抽象类，但这些类包中有实现了其方法的 Double 类。</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line">@OverRide</span><br><span class="line">public void paintComponents(Graphics g) &#123;</span><br><span class="line">    Graphics2D g2d = (Graphics2D)g;//[1]</span><br><span class="line">    Line2D line = new Line2D.Double(5, 5, 5, 5);//[2]</span><br><span class="line">    g2d.draw(line);//[3]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><ol><li><p>将 Graphics 对象强制转型为 Graphics2D 对象</p></li><li><p>创建几何图形对象</p><p>这里的 Line2D.Double 表示 Line2D 包下的 Double 类。此处调用了 Double 类的构造器</p></li><li><p>绘制线段</p></li></ol></blockquote><h4 id="Graphics2D-中的几何图形类"><a href="#Graphics2D-中的几何图形类" class="headerlink" title="Graphics2D 中的几何图形类"></a>Graphics2D 中的几何图形类</h4><ul><li><p><code>new Line2D.Double(int x1, int y1, int x2, int y2)</code>：线段</p><p>从 (x1, y1) 到 (x2, y2) 的线段</p></li><li><p>……（略了略了。相信椭圆、矩形之类的也不用再详细说明了吧）</p></li><li><p><code>new Arc2D.Double(double x, double y, double w, double h, double start, double extent, int type)</code>：弧</p><p>但是特别地，type 的值是以下几种：</p><ul><li>Arc2D.OPEN：开弧</li><li>Arc2D.CHORD：弓弧</li><li>Arc2D.PIE：饼弧</li></ul></li><li><p><code>new QuadCurver2D.Double(double x1, double y1, double ctrlx, double ctrly, double x2, double y2)</code>：绘制二次曲线</p><p>绘制二次曲线需要 3 个点，分别是起始点 (x1, y1)、终点 (x2, y2)、控制点 (ctrlx, ctrly)</p></li><li><p><code>new CubicCurve2D.Double(double x1, double y1, double ctrlx1, double ctrly1, double ctrlx2, double ctrly2, double x2, double y2)</code>：绘制三次曲线</p><p>绘制三次曲线需要 4 个点，分别是起始点、终点、两个控制点</p></li></ul><h2 id="组合框与列表"><a href="#组合框与列表" class="headerlink" title="组合框与列表"></a>组合框与列表</h2><h3 id="JComboBox-组合框"><a href="#JComboBox-组合框" class="headerlink" title="JComboBox 组合框"></a>JComboBox 组合框</h3><blockquote><p>JComboBox 是一个下拉式菜单。它有两种模式：可编辑的、不可编辑的。</p><p>对于不可编辑的 JComboBox，用户只能在现有列表中进行选择</p><p>对于可编辑的 JComboBox，用户既能在现有选项中选择，也能输入新的内容</p></blockquote><p><strong>构造方法：</strong></p><ul><li><p><code>new JComboBox&lt;E&gt;()</code>：创建一个 E 类型（泛型）的没有任何可选项的默认组合框</p></li><li><p><code>new JComboBox&lt;E&gt;(E[] items)</code>：根据 items 数组创建组合框</p><p>items 数组元素即为组合框的可选项</p></li></ul><p><strong>常用方法：</strong></p><ul><li><p><code>void setEditable(boolean aFlag)</code>：设置可编辑性</p><p>不设置的场合，默认处于不可编辑状态</p></li><li><p><code>void addItem(E item)</code>：在末尾添加可选项</p><p><code>void insertItemAt(E item, int index)</code>：在指定下标处添加可选项</p></li><li><p><code>void removeAllItems()</code>：删除所有可选项</p><p><code>void removeItem(E iten)</code>：删除 item 指定的可选项</p><p><code>void removeItemAt(int index)</code>：删除指定下标处的可选项</p></li><li><p><code>E getItemAt(int index)</code>：获取指定下标的可选项</p></li><li><p><code>int getItemCount()</code>：获取列表项数</p></li><li><p><code>int getSelectedIndex()</code>：获取选中项匹配的第一个选项的索引下标</p><p><code>E getSelectedItem()</code>：获取选中项</p></li></ul><h3 id="JList-列表"><a href="#JList-列表" class="headerlink" title="JList 列表"></a>JList 列表</h3><blockquote><p>JList 是可供用户选择的一系列可选项</p></blockquote><p><strong>构造方法：</strong></p><ul><li><code>new JList&lt;E&gt;()</code>：构造一个空列表</li><li><code>new JList&lt;E&gt;(E[] listData)</code>：构造一个列表，可选元素由 listData 指定</li><li><code>new JList&lt;E&gt;(Vector&lt;E&gt; listData)</code>：构造一个列表，使其显示指定 Vector 中的元素</li></ul><p><strong>常用方法：</strong></p><ul><li><p><code>addListSelectionListener(ListSelectionListener l)</code>：添加监视器</p><p>当用户在列表上选择时，会触发 ListSelectionEvent 事件。</p><p>在 ListSelectionListener 接口中，仅有一个方法：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">void valueChanged(ListSelectionEvent e);</span><br></pre></td></tr></table></figure><p>当列表的当前选项改变时，会调用该方法。</p></li><li><p><code>int getSelectedIndex()</code>：返回选中项第一次出现的下标索引</p><p>没有选中项的场合，返回 -1</p><p><code>E getSelectedValue()</code>：返回所选的第一个值</p><p>没有选中项的场合，返回 null</p></li><li><p><code>void setVisableRowCount(int count)</code>：设置不使用滚动条可以在列表中显示的选项行数</p></li><li><p><code>void setSelectionMode(int mode)</code>：设置列表的选择模式</p><p>其中，mode 的值可以是以下几种：</p><ul><li>ListSelectionModel.SINGLE_SELECTION：仅支持单项选择（0）</li><li>ListSelectionModel.SINGLE_INTERVAL_SELECTION：可多选，但多个选项必须是连续的（1）</li><li>ListSelectionModel.MULTIPLE_INTERVAL_SELECTION：可多选（2，默认值）</li></ul></li></ul><h2 id="文本组件"><a href="#文本组件" class="headerlink" title="文本组件"></a>文本组件</h2><blockquote><p>文本组件可以提示信息和提供用户输入功能。Swing 中提供了 JTextField（文本域）、JPasswordField（口令输入域）、JTextArea（文本区）等多个文本组件。</p></blockquote><p>文本组件的共同的父类是 JTextComponent，其中定义了文本组件的共有方法：</p><ul><li><p><code>String getSelectedText()</code>：从文本组件中提取被选中的文本内容</p></li><li><p><code>String getText()</code>：从文本组件中提取全部文本内容</p><p><code>String getText(int offs, int len)</code>：从文本组件中提取指定范围的文本内容</p></li><li><p><code>void select(inr start, int end)</code>：在文本组件中选中指定范围内容</p><p><code>void selectAll()</code>：在文本组件中选中全部内容</p></li><li><p><code>void setEditable(boolean b)</code>：设置可编辑状态</p></li><li><p><code>void setText(String t)</code>：设置文本组件的文本内容</p></li><li><p><code>void setDocument(Document doc)</code>：设置文本组件的文档</p></li><li><p><code>void copy()</code>：复制选中文本至剪贴板</p><p><code>void cut()</code>：剪切选中文本至剪贴板</p><p><code>void paste()</code>：粘贴剪贴板内容至当前位置</p></li></ul><p>另外，JComponrnt 类中有如下方法：</p><ul><li><code>boolean requestFocusInWindow()</code>：请求当前组件获得输入焦点</li></ul><h3 id="JTextField-文本域"><a href="#JTextField-文本域" class="headerlink" title="JTextField 文本域"></a>JTextField 文本域</h3><blockquote><p>文本域是一个单行的文本输入框，可以用于输入少量文本</p></blockquote><p><strong>构造方法：</strong></p><ul><li><p><code>new JTextField()</code>：构造一个空文本域</p></li><li><p><code>new JTextField(int columns)</code>：构造一个指定列数的空文本域</p><p>由于组件大小通常由布局管理器确定，因此指定的列数可能被忽略</p></li><li><p><code>new JTextField(String text)</code>：构造一个显示指定初始字符的文本域</p></li><li><p><code>new JTextField(String text, int columns)</code>：构造一个指定列数及初始字符的文本域</p></li></ul><p><strong>常用方法：</strong></p><ul><li><p><code>void addActionListener(ActionListener l)</code>：添加指定侦听器</p><p><code>void removeActionListener(ActionListener l)</code>：移除指定侦听器</p></li><li><p><code>void setFont()</code>：设置当前字体</p></li><li><p><code>void setHorizontalAlignment(int alignment)</code>：设置水平对齐方式</p><p>有效值包括：</p><ul><li><p>JTextField.LEFT：左对齐（2）</p></li><li><p>JTextField.RIGHT：右对齐（4）</p></li><li><p>JTextField.CENTER：居中对齐（0）</p></li><li><p>JTextField.LEADING：领先对齐（10）</p><p>（似乎是）识别文字前端的对齐方式……好吧，我也不太明白</p></li><li><p>JTextField.TRAILING：落后对齐（11）</p></li></ul></li><li><p><code>int getColumns()</code>：返回文本域列数</p></li></ul><h3 id="JTextArea-文本区"><a href="#JTextArea-文本区" class="headerlink" title="JTextArea 文本区"></a>JTextArea 文本区</h3><blockquote><p>JTextArea 是一个多行多列的文本输入框</p></blockquote><p><strong>构造方法：</strong></p><ul><li><code>new JTextArea()</code>：构造一个空文本区</li><li><code>new JTextArea(int rows, int columns)</code>：构造一个指定行数、列数数的空文本区</li><li><code>new JTextArea(String text)</code>：构造一个显示指定初始字符的文本区</li><li><code>new JTextArea(String text, int rows, int columns)</code>：构造一个指定行列数及初始字符的文本区</li></ul><p><strong>常用方法：</strong></p><ul><li><p><code>void append(String str)</code>：追加文本到文本区</p></li><li><p><code>void insert(String str, int pos)</code>：将指定文本插入到特定位置 pos 处</p></li><li><p><code>void replaceRange(String str, int start, int end)</code>：用指定文本 str 替换指定范围的文本</p></li><li><p><code>void addAncestorListener(AncestorListener listener)</code>：添加指定侦听器</p><p>特别地，用户输入文本时，按下 Enter 键的场合只是向缓冲区输入一个字符，而不能表示输入的结束。因此，需要识别用户输入完成时，通常要在文本区旁放置一个确定按钮</p></li></ul><h2 id="菜单组件"><a href="#菜单组件" class="headerlink" title="菜单组件"></a>菜单组件</h2><blockquote><p>菜单是最常用的 GUI 组件之一。Swing 包中提供了多种菜单组件。</p><p>菜单有下拉式菜单和弹出式菜单两种</p></blockquote><h3 id="菜单栏及菜单"><a href="#菜单栏及菜单" class="headerlink" title="菜单栏及菜单"></a>菜单栏及菜单</h3><blockquote><p>JMenuBar 菜单栏是窗口主菜单，用来包容一组菜单</p><p>通过容器的 <code>setJMenuBar(JMenuBar m)</code> 方法将菜单栏放到窗口上</p></blockquote><p><strong>菜单栏 JMenuBar 构造方法：</strong></p><ul><li><code>new JMenuBar()</code>：构建一个新的菜单栏</li></ul><p>菜单栏也能注册一些事件侦听程序，但通常情况下对于这些事件我们都不进行处理</p><p><strong>菜单构造方法：</strong></p><ul><li><code>new JMenu()</code>：构造没有文本的新菜单</li><li><code>new JMenu(String str)</code>：构造有指定标签的菜单</li><li><code>new JMenu(String str, boolean b)</code>：构造有指定标签的菜单，并指示其是否可以被分离</li></ul><p><strong>常用方法：</strong></p><ul><li><p><code>add(JMenu m)</code>：菜单可以被加入菜单栏或另一个菜单中</p></li><li><p><code>addSeparator()</code>：为菜单各项间加入间隔线</p><p><code>insertSeparator(int index)</code>：在指定位置插入间隔线</p><p>也能通过这种方式插入间隔线：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">menu.add(new JSeparator());//JSeparator 类即分割线类</span><br></pre></td></tr></table></figure></li></ul><h3 id="JMenuItem-菜单项"><a href="#JMenuItem-菜单项" class="headerlink" title="JMenuItem 菜单项"></a>JMenuItem 菜单项</h3><blockquote><p>JMenuItem 菜单项是菜单系统的最下一级</p></blockquote><p><strong>构造方法：</strong></p><ul><li><p><code>new JMenuItem()</code>：创建不带有设置文本或图标的菜单项</p></li><li><p><code>new JMenuItem(Icon i)</code>：创建只有图标的菜单项</p></li><li><p><code>new JMenuItem(String str)</code>：创建只有文本的菜单项</p></li><li><p><code>new JMenuItem(String str, Icon i)</code>：创建有图标和文本的菜单项</p></li><li><p><code>new JMenuItem(String str, int mnemonic)</code>：创建有文本和快捷键的菜单项</p><p>那个快捷键的有效值是 KeyEvent 包下的各种常量</p></li></ul><p><strong>常用方法：</strong></p><ul><li><p><code>setMnemonic(int m)</code>：设置快捷键</p></li><li><p><code>setAccelerator(KeyStroke keyStroke)</code>：设置加速键</p></li><li><p><code>addActionListener(ActionListener l)</code>：加入侦听器</p><p>菜单项被选中时，会触发 ActionEvent 事件</p></li></ul><h3 id="复选菜单项和单选菜单项"><a href="#复选菜单项和单选菜单项" class="headerlink" title="复选菜单项和单选菜单项"></a>复选菜单项和单选菜单项</h3><blockquote><p>JCheckBoxMenuItem（复选菜单项）和 JRadioButtonMenuItem（单选菜单项）是两种特殊的菜单项。</p><p>JCheckBoxMenuItem 前有个小方框，以供提示复选</p><p>JRadioButtonMenuItem 前有个小圆圈，以供提示单选</p></blockquote><p><strong>复选菜单项构造器：</strong></p><ul><li><code>new JCheckBoxMenuItem()</code>：一个无文本图标，初始未选中的菜单项</li><li><code>new JCheckBoxMenuItem(Icon i)</code>：就是有图标咯</li><li><code>new JCheckBoxMenuItem(String str)</code>：就是有文本咯</li><li><code>new JCheckBoxMenuItem(String str, boolean b)</code>：就是有文本，又指定初始状态咯</li><li><code>new JCheckBoxMenuItem(String str, Icon i)</code>：就是有文本，又有图标咯</li><li><code>new JCheckBoxMenuItem(String str, Icon i, boolean b)</code>：你猜呗</li></ul><p><strong>单选菜单项构造器：</strong></p><p>单选菜单项是 JRadioButtonMenuItem，剩下的都和上面的一样</p><h2 id="对话框"><a href="#对话框" class="headerlink" title="对话框"></a>对话框</h2><blockquote><p>对话框是一个临时的可移动窗口，其依赖于其他窗口。当期依赖的窗口消失或最小化时，对话框消失。窗口还原时对话框恢复。</p><p>对话框分为强制型和非强制型。强制型对话框在关闭前，其他窗口不能接收任何形式的输入。也就是说，该对话过程不能中断。强制型对话框也被称为模式窗口。</p></blockquote><h3 id="JDialog-自定义对话框"><a href="#JDialog-自定义对话框" class="headerlink" title="JDialog 自定义对话框"></a>JDialog 自定义对话框</h3><p><strong>构造方法：</strong></p><ul><li><p><code>new JDialog(Dialog owner)</code>：无标题无模式对话框。指定对话框为其所有者</p><p><code>new JDialog(Frame owner)</code>：指定框架为其所有者</p></li><li><p><code>new JDialog(Dialog owner, boolean model)</code>：无标题对话框，指定所有者并指示是否为有模式</p></li><li><p><code>new JDialog(Dialog owner, String title)</code></p><p><code>new JDialog(Frame owner, String title)</code></p><p><code>new JDialog(Dialog owner, String title, boolean model)</code></p><p><code>new JDialog(Frame owner, String title, boolean model)</code>：这些你都懂的吧</p></li></ul><h3 id="JOptionalPane-标准对话框"><a href="#JOptionalPane-标准对话框" class="headerlink" title="JOptionalPane 标准对话框"></a>JOptionalPane 标准对话框</h3><blockquote><p>JDialog 通常用于创建自定义对话框。此外，还有用于显示标准对话框的 JOptionalPane 类</p></blockquote><p>JOptionalPane 定义了多个<strong>静态方法</strong>，分为以下 4 个类型：</p><ul><li><p><strong>showConfirmDialog</strong>：确认对话框。显示问题，要求用户进行确认（yes &#x2F; no &#x2F; cancel）</p><p>其同名方法有以下 3 种</p><ul><li><p>int showConfirmDialog(Component parentComponent, Object message)</p></li><li><p>int showConfirmDialog(Component parentComponent, Object message, String title, int optionType)</p></li><li><p>int showConfirmDialog(Component parentComponent, Object message, String title, int optionType, int messageType)</p></li></ul></li><li><p><strong>showInputDialog</strong>：输入对话框。提示用户进行输入</p><p>同名方法有以下 6 种：</p><ul><li><p>showInputDialog(Object message)</p></li><li><p>showInputDialog(Object message, Object initialValue)</p></li><li><p>showInputDialog(Component parentComponent, Object message)</p></li><li><p>showInputDialog(Component parentComponent, Object message, Object initialValue)</p></li><li><p>showInputDialog(Component parentComponent, Object message, String title, int messageType)</p></li><li><p>showInputDialog(Component parentComponent, Object message, String title, int messageType, Icon icon, Object[] options, Object initialValue)</p></li></ul></li><li><p><strong>showMessageDialog</strong>：信息对话框。显示信息</p><p>同名方法有以下 3 种：</p><ul><li><p>showMessageDialog(Component parentComponent, Object message)</p></li><li><p>showMessageDialog(Component parentComponent, Object message, String title, int messageType)</p></li><li><p>showMessageDialog(Component parentComponent, Object message, String title, int messageType, Icon icon)</p></li></ul></li><li><p><strong>showOptionDialog</strong>：选项对话框，显示选项，要求用户进行选择</p><p>其只有 1 种同名方法</p><ul><li>showOptionDialog(Component parentComponent, Object message, String title, int optionType, int messageType, Icon icon, Object[] options, Object initialValue)</li></ul></li></ul><p>以上各个方法的参数分别是：</p><ul><li><p>Component parentComponent：对话框的父窗口对象。其父窗口位置决定了对话框位置</p><p>该值可以是 null，表示用默认的 Frame 作为父窗口。这个场合，对话框位置在屏幕正中</p></li><li><p>Object message：显示在对话框的描述信息。</p><p>该参数通常是 String 对象，但也能是一个图标、组件或对象数组</p></li><li><p>String title：对话框标题</p></li><li><p>int optionType：对话框上的按钮类型。可以是以下常量：</p><ul><li>JOptionalPane.DEFAULT_OPTION：默认（-1）</li><li>JOptionalPane.YES_NO_OPTION：一组 yes &#x2F; no（0）</li><li>JOptionalPane.YES_NO_CANCEL_OPTION：一组 yes &#x2F; no &#x2F; cancel（1）</li><li>JOptionalPane.OK_CANCEL_OPTION：一组 ok &#x2F; cancel（2）</li></ul><p>此外，也能通过 Object[] options 参数指定其他形式</p></li><li><p>Object[] options：对话框上的选项。</p><p>在输入对话框中，通常以组合框架形式显示。在选项对话框中，则是指按钮类型。</p><p>该参数通常是一个 String[] 数组，但也能是图标数组或组件数组</p></li><li><p>int messageType：对话框传递的信息类型。可以是以下常量：</p><ul><li>JOptionalPane.ERROR_MESSAGE：错误信息（0）</li><li>JOptionalPane.INFORMATION_MESSAGE：普通信息（1）</li><li>JOptionalPane.WARNING_MESSAGE：警告信息（2）</li><li>JOptionalPane.QUESTION_MESSAGE：提问信息（3）</li><li>JOptionalPane.PLAIN_MESSAGE：无格式信息（-1）</li></ul><p>除 PLAIN_MESSAGE 外，每种类型对应于一个默认的图标</p></li><li><p>Object initialValue：初始选项或输入值</p></li></ul><h3 id="JFileChooser-文件对话框"><a href="#JFileChooser-文件对话框" class="headerlink" title="JFileChooser 文件对话框"></a>JFileChooser 文件对话框</h3><blockquote><p>JFileChooser 文件对话框是专门用于对文件或目录进行浏览和选择的对话框</p></blockquote><p><strong>构造方法：</strong></p><ul><li><code>new JFileChooser()</code>：构造一个指向客户默认目录的文件对话框</li><li><code>new JFileChooser(File currentDirectory)</code>：指向指定目录的文件对话框</li><li><code>new JFileChooser(String path)</code>：指向指定目录的文件对话框</li></ul><p><strong>常用方法：</strong></p><ul><li><p><code>showOpenDialog(Component parent)</code>：弹出一个 “打开” 文件对话框</p><p>parent 是对话框的父窗口对象。其父窗口位置决定了对话框位置</p><p>该值可以是 null，表示用默认的 Frame 作为父窗口。这个场合，对话框位置在屏幕正中</p><p><code>showSaveDialog(Component parent)</code>：弹出一个 “保存” 文件对话框</p></li><li><p><code>getSelectedFile()</code>：获得用户选择的文件</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 教程 </tag>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java 树</title>
      <link href="/2022/12/07/learn/Java/Java%20%E6%A0%91/"/>
      <url>/2022/12/07/learn/Java/Java%20%E6%A0%91/</url>
      
        <content type="html"><![CDATA[<h4 id="什么是树？"><a href="#什么是树？" class="headerlink" title="什么是树？"></a>什么是树？</h4><table><thead><tr><th></th><th><strong>结构严格派</strong>  唯一父节点和复数子节点</th><th><strong>结构中立派</strong>  有前驱和后继关系就行</th><th><strong>结构自由派</strong>  能存放内容就行</th></tr></thead><tbody><tr><td><strong>类型严格派</strong>  是一种数据结构</td><td>二叉树是树</td><td>链表也是树</td><td>栈也是树</td></tr><tr><td><strong>类型中立派</strong>  和编程有关就行</td><td>包也是树</td><td>语句肯定是树</td><td>标识符都是树</td></tr><tr><td><strong>类型自由派</strong>  和程序员有关就行</td><td>wifi 当然是树</td><td>衣服拉链也是树</td><td>馄饨也是树！</td></tr></tbody></table><h2 id="二叉树："><a href="#二叉树：" class="headerlink" title="二叉树："></a>二叉树：</h2><p><a href="https://i-melody.github.io/img/Java_InputImage/%E6%A0%91%E7%BB%93%E6%9E%84%E5%9B%BE_14.1.png"><img src="https://i-melody.github.io/img/Java_InputImage/%E6%A0%91%E7%BB%93%E6%9E%84%E5%9B%BE_14.1.png"></a></p><p><em>（树结构图_14.1）</em></p><ul><li><p><strong>二叉树：</strong>树有多种。每个节点最多只能有 2 个子节点的一种树的形式称为二叉树</p><p>二叉树的子节点分为 <strong>左节点</strong> 和 <strong>右节点</strong>。</p></li><li><p><strong>满二叉树：</strong>二叉树的 所有叶节点 都在 最后一层，且节点总数是 2n - 1</p></li><li><p><strong>完全二叉树：</strong>二叉树的 所有叶节点 都在 最后一层 和 倒数第二层，且最后一层的叶节点在左侧连续、倒数第二层的叶节点在右侧连续</p></li></ul><h4 id="二叉树的遍历："><a href="#二叉树的遍历：" class="headerlink" title="二叉树的遍历："></a>二叉树的遍历：</h4><ul><li><p><strong>前序遍历：</strong>先输出父节点，再遍历左子树和右子树。</p><p>自根节点起。先输出当前节点。再递归前序遍历左节点。那之后，递归前序遍历右节点。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">public static class Node &#123;// 节点类</span><br><span class="line">    int val;</span><br><span class="line">    Node left;</span><br><span class="line">    Node right;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public static String traverse(Node root) &#123;</span><br><span class="line">    StringBuilder sb = new StringBuilder();</span><br><span class="line">    traverse(root, sb);</span><br><span class="line">    return sb.toString();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">private static void traverse(Node root, StringBuilder sb) &#123;</span><br><span class="line">    if (root == null) return;</span><br><span class="line">    sb.append(root.val).append(&quot; &quot;);// 先输出父节点</span><br><span class="line">    traverse(root.left, sb);// 再遍历左子树</span><br><span class="line">    traverse(root.right, sb);// 再遍历右子树</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><strong>中序遍历：</strong>先遍历左子树，再输出父节点，再遍历右子树。</p></li><li><p><strong>后序遍历：</strong>先遍历左子树，再遍历右子树，再输出父节点。</p></li></ul><h3 id="顺序存储二叉树"><a href="#顺序存储二叉树" class="headerlink" title="顺序存储二叉树"></a>顺序存储二叉树</h3><p>从数据存储来看，数组与树可以相互转换。数组可以转换成树，树也能转换成数组。</p><p>顺序存储二叉树通常只考虑完全二叉树。将数组转换成树后，将可以进行前序、中序、后序遍历。</p><p><strong>顺序存储二叉树的例子：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">int[] array = &#123;0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10&#125;;</span><br></pre></td></tr></table></figure><p>该 array 的顺序存储二叉树为：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">graph TD</span><br><span class="line">A(0)---B(1)---C(3)</span><br><span class="line">A---a(2)---aa(5)</span><br><span class="line">B---D(4)</span><br><span class="line">a---ab(6)</span><br><span class="line">C---E(7)</span><br><span class="line">C---F(8)</span><br><span class="line">D---G(9)</span><br><span class="line">D---H(10)</span><br></pre></td></tr></table></figure><h4 id="顺序存储二叉树的转换："><a href="#顺序存储二叉树的转换：" class="headerlink" title="顺序存储二叉树的转换："></a>顺序存储二叉树的转换：</h4><ul><li><p>数组下标为 0 的元素放在根节点。</p></li><li><p>对于数组下标为 n 的元素，其左子节点的数组下标为 2 × n + 1、右子节点的数组下标为 2 × n + 2、父节点的数组下标为 (n - 1) &#x2F; 2</p><p>可以发现，所有左节点都是奇数下标，右节点都是偶数下标</p></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">public static Node toTree(int[] array) &#123;</span><br><span class="line">    Node root = new Node(array[0]);</span><br><span class="line">    List&lt;Node&gt; list = new ArrayList&lt;Node&gt;();</span><br><span class="line">    list.add(root);// 数组下标为 0 的元素放在根节点。</span><br><span class="line">    for (int i = 1; i &lt; array.length; i++) &#123;// 按照前述方法，创建每个元素节点，并放在对应父节点下</span><br><span class="line">        Node temp = new Node(array[i]);</span><br><span class="line">        list.add(temp);</span><br><span class="line">        Node parent = list.get((i - 1) / 2);</span><br><span class="line">        if (i % 2 == 0) parent.right = temp;</span><br><span class="line">        else parent.left = temp;</span><br><span class="line">    &#125;</span><br><span class="line">    return root;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public static class Node &#123;</span><br><span class="line">    public int val;</span><br><span class="line">    public Node left;</span><br><span class="line">    public Node right;</span><br><span class="line">    </span><br><span class="line">    public Node(int val) &#123;</span><br><span class="line">        this.val = val;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>以上是一种显式的转换。也可以直接将数组视为抽象的顺序存储二叉树。</p><p>如：堆。**<em>——见 [[5 数组、排序和查找]]</em>**</p><h3 id="线索化二叉树"><a href="#线索化二叉树" class="headerlink" title="线索化二叉树"></a>线索化二叉树</h3><p>含有 n 各节点的二叉链表中，有 n + 1 个空指针域。利用这些空指针域，存放指向节点在某种遍历次序下的前驱和后继节点的指针，这种附加的指针称为 <strong>线索</strong>。加上了线索的二叉链表称为 <strong>线索链表</strong>，相应二叉树称为 <strong>线索二叉树</strong>。</p><p>线索二叉树可分为：前序线索二叉树、中序线索二叉树、后续线索二叉树。</p><p>线索化二叉树后，那些左节点和右节点既可能指向 自身的子树，也可能指向自身的 前驱 &#x2F; 后继 节点。因此，需要添加一组标记，以记录线索的种类。</p><p>这个遍历的场合，不能再使用递归方式遍历，而是改为线性方式遍历即可。</p><h3 id="赫夫曼树"><a href="#赫夫曼树" class="headerlink" title="赫夫曼树"></a>赫夫曼树</h3><p>给定 n 个权值作为 n 个叶节点，构造一棵二叉树。若该树的带权路径长度（WPL）最小，则称其为 <strong>最优二叉树</strong>（赫夫曼树、哈夫曼树、霍夫曼树）</p><ul><li><p>节点的带权路径长度：该节点的权 × 节点路径长度</p></li><li><p>树的带权路径长度：所有的叶结点的带权路径长度之和</p><p>赫夫曼树中，一定是权值较大的节点距离根更近。</p></li></ul><p><strong>赫夫曼树的例子：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">graph TD</span><br><span class="line">A(NaN)---B(NaN)---C(14)</span><br><span class="line">B---b(NaN)---c(5)</span><br><span class="line">b---D(NaN)---E(1)</span><br><span class="line">D---F(2)</span><br><span class="line">A---a(NaN)---aa(16)</span><br><span class="line">a---ab(20)</span><br></pre></td></tr></table></figure><h4 id="生成赫夫曼树："><a href="#生成赫夫曼树：" class="headerlink" title="生成赫夫曼树："></a>生成赫夫曼树：</h4><ol><li>对数据进行排序。每个数据都可以创建一个节点</li><li>取出权值最小的两颗二叉树，合并为一棵新的二叉树。该二叉树权值是两棵子树的权值之和</li><li>将数据再次排序，重复合并步骤，直至剩余唯一的树，即为赫夫曼树</li></ol><h4 id="赫夫曼编码："><a href="#赫夫曼编码：" class="headerlink" title="赫夫曼编码："></a>赫夫曼编码：</h4><blockquote><p>赫夫曼编码是一种编码方式，是一种程序算法。赫夫曼编码是赫夫曼树在电讯通信中的经典应用之一。</p><p>赫夫曼编码广泛应用于数据文件压缩，其压缩率在 20% ~ 90% 间</p><p>赫夫曼编码是可变字长编码的一种。是老赫在 1952 年提出的编码方法，称为 “最佳编码”</p><p>赫夫曼编码是无损处理方案。由于赫夫曼编码是按字节处理数据，因此可以处理所有文件</p></blockquote><p>编码方式有三种：</p><ul><li><p><strong>定长编码：</strong></p><p>如 ASCII 码，其每个字符占用长度为固定 8 字节</p></li><li><p><strong>变长编码：</strong></p><p>对字符进行统计，按照各个字符出现的次数进行编码。出现次数越多，编码越小。</p><p>字符的编码不能是其他字符编码的前缀，这样的编码叫做前缀编码（消除二义性）。</p></li><li><p><strong>赫夫曼编码：</strong></p><p>按照字符的出现次数，构建赫夫曼树。之后，按照赫夫曼树结构，给字符规定编码。向左的路径记为 0，向右记为 1。</p><p>这样得到的编码，一定是前缀编码。因为那些字符节点都是叶节点。赫夫曼行啊赫夫曼！</p><p>之后，用规定的编码将指定字符串转化为字节数组。最后，传递字符数组即可。</p></li></ul><p><strong>注意事项：</strong></p><ul><li>压缩已经过压缩处理的文件，那个压缩率会变低</li><li>如果一个文件中重复的数据很少，缩效果也会不明显</li></ul><h3 id="二叉排序树"><a href="#二叉排序树" class="headerlink" title="二叉排序树"></a>二叉排序树</h3><p>二叉排序树（BST，Binary Sort Tree）：对于任何一个非叶节点，其左节点小于等于当前节点，右节点大于等于当前节点</p><p><strong>二叉排序树的例子：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">graph TD</span><br><span class="line">A(10)---B(8)</span><br><span class="line">B---D(4)---c(2)---d(1)</span><br><span class="line">D---b(6)</span><br><span class="line">B---E(9)</span><br><span class="line">A---C(15)---e(12)</span><br><span class="line">C---ee(23)</span><br></pre></td></tr></table></figure><p><strong>二叉排序树删除节点：</strong></p><ul><li><p>删除叶节点的场合，将那个父节点的对应连接置空即可。</p></li><li><p>删除有唯一子节点的节点场合，让那个父节点的对应连接改为指向子树即可。</p></li><li><p>删除有两个子节点的节点的场合，将该节点置为正无穷或负无穷。</p><p>之后维护该二叉排序树，直到该节点成为叶节点时，删除该节点即可。</p></li></ul><h4 id="平衡二叉树"><a href="#平衡二叉树" class="headerlink" title="平衡二叉树"></a>平衡二叉树</h4><blockquote><p>二叉排序树可能形成一些奇怪的形状（如左子树全部为空），这样就不能发挥树形结构的比较优势。</p></blockquote><p>平衡二叉树（AVL 树）：也叫平衡二叉搜索树。非空时，其任意节点左右两个子树的高度差不超过 1，且左右子树也都是平衡二叉树。</p><p>平衡二叉树的实现方法有：红黑树、AVL、替罪羊树、Treap、伸展树等</p><ul><li>创建一个新节点。该节点的值等于根节点值</li><li>使该新节点的左子树指向当前根节点的左子树。使该节点的右子树指向当前根节点右子树的左子树</li><li>使当前根节点的右子树的左子树指向该新节点</li><li>使当前根节点的右子树成为新的根节点。旧的根节点被废弃</li></ul><p>简单的说，就是让根节点的右子树指向右子树的左子树。而右子树的左子树指向根节点。</p><p>合理性在于，根节点（root）的右子树（right）上的所有值都大于 root；而 right 的所有左子树的值，以及 root 所有左子树的值也一定小于 right 值</p><p>符合进行右旋转的条件（右子树高度 &gt; 左子树高度 + 1）时，如果那个左子树的右子树高度高于其左子树高度，需要先对左子树进行左旋转。以此类推。</p><h3 id="线段树"><a href="#线段树" class="headerlink" title="线段树"></a>线段树</h3><p>线段树（Segment Tree）是一棵二叉树。其每个节点表示一个闭区间，父节点的区间内包含所有子节点的区间。</p><ul><li><p>对于每个非叶节点，将其区间平均划分成两个子区间。左节点指向其中较小区间，右节点指向那个较大区间</p><p>换言之，对于非叶节点 [L, R]，其左子节点是 [L, (L + R) &#x2F; 2]，右子节点是 [((L + R) &#x2F; 2) + 1, R]</p></li><li><p>对于每个叶节点，其区间仅包含一个元素。即，其区间的左界等于右界。</p></li></ul><p><strong>线段树的例子：</strong></p><p>在区间 [1, 9] 中，记录 [2, 9] 的样子</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">graph TB</span><br><span class="line">Root(&amp;#91&amp;#49,9&amp;#93)</span><br><span class="line"></span><br><span class="line">Root---L(&amp;#91&amp;#49,5&amp;#93)</span><br><span class="line">style R fill: #BFFFFC</span><br><span class="line">Root---R(&amp;#91&amp;#54,9&amp;#93)</span><br><span class="line"></span><br><span class="line">L---LL(&amp;#91&amp;#49,3&amp;#93)</span><br><span class="line">style LR fill: #BFFFFC</span><br><span class="line">L---LR(&amp;#91&amp;#52,5&amp;#93)</span><br><span class="line">R---RL(&amp;#91&amp;#54,7&amp;#93)</span><br><span class="line">R---RR(&amp;#91&amp;#56,9&amp;#93)</span><br><span class="line"></span><br><span class="line">LL---LLL(&amp;#91&amp;#49,2&amp;#93)</span><br><span class="line">style LLR fill: #BFFFFC</span><br><span class="line">LL---LLR(&amp;#91&amp;#51,3&amp;#93)</span><br><span class="line">LR---LRL(&amp;#91&amp;#52,4&amp;#93)</span><br><span class="line">LR---LRR(&amp;#91&amp;#53,5&amp;#93)</span><br><span class="line">RL---RLL(&amp;#91&amp;#54,6&amp;#93)</span><br><span class="line">RL---RLR(&amp;#91&amp;#55,7&amp;#93)</span><br><span class="line">RR---RRL(&amp;#91&amp;#56,8&amp;#93)</span><br><span class="line">RR---RRR(&amp;#91&amp;#57,9&amp;#93)</span><br><span class="line"></span><br><span class="line">LLL---LLLL(&amp;#91&amp;#49,1&amp;#93)</span><br><span class="line">style LLLR fill: #BFFFFC</span><br><span class="line">LLL---LLLR(&amp;#91&amp;#50,2&amp;#93)</span><br></pre></td></tr></table></figure><p>线段树是近似的完全二叉树。有时，线段树的节点是随着线段树的更新逐渐建立的，此时线段树不处于完全二叉树的状态。</p><p><strong>线段树的更新：</strong></p><p>标记区间时，按照 <strong>广度优先搜索</strong> 的思想，从根节点开始遍历区间。</p><p>比如，添加区间 [START, END] 时：</p><ul><li><p>如果一个节点的区间内所有元素都被标记，则标记这个节点</p><p>对于区间 [L, R]，如果 L &gt;&#x3D; STRAT 且 R &lt;&#x3D; END，则标记该节点</p></li><li><p>如果一个节点的区间内部分元素被标记，则继续遍历其左右节点</p><p>对于区间 [L, R]，MID &#x3D; (L + R) &#x2F; 2</p><p>如果 MID &gt;&#x3D; L，则需要遍历其左节点。如果 MID &lt; R，则需要遍历其右节点</p></li></ul><p>标记节点时，只需在该节点添加懒标记，而不必对所有子节点进行标记。</p><p><strong>懒标记：</strong></p><p>使用懒标记，可以只更新到满足条件的区间，而不必对所有子区间一一更新。此后再次遍历到该节点时，再对懒标记进行下推</p><p>上述例子中，记录区间 [2, 7] 时，仅更新了 [2, 2]、[3, 3]、[4, 5]、[6, 9] 这些节点。</p><p>以节点 [6, 9] 为例，该区间上被添加了懒标记，代表该区间及所有子区间都被记录了一次。下次遍历到这个节点时，懒标记被下推给子节点 [6, 7]、[8, 9]</p><p><strong>线段树的查询：</strong></p><p>一个区间的元素和，等于 <em>其子区间各自元素和</em> 的合计值</p><p>一个区间中的最大值，等于 <em>其子区间各自最大值</em> 中的较大值</p><h2 id="多路查找树"><a href="#多路查找树" class="headerlink" title="多路查找树"></a>多路查找树</h2><blockquote><p>二叉树虽然效率较高，但需要加载到内存中。节点过多时就可能出现问题。</p><p>如：需要进行多次 I &#x2F; O 操作，导致构建速度慢；造成二叉树高度很大，降低操作速度。</p></blockquote><p>每个节点可以拥有更多数据项和更多子节点的树，就是多叉树（multiway tree）。</p><p>多叉树通过重新组织节点，能减少树的高度，能对二叉树进行优化。</p><ul><li>节点的度：节点的子节点数量</li><li>树的度 &#x2F; 阶：树中所有节点的度的最大值</li></ul><h3 id="2-3-树"><a href="#2-3-树" class="headerlink" title="2-3 树"></a>2-3 树</h3><p>2-3 树是最简单的 B 树结构。其具有如下特点：</p><ul><li><p>所有叶节点都在同一层。节点包含不超过 2 个值。</p></li><li><p>有两个子节点的节点叫 <strong>二节点</strong>。二节点要么没有子节点，要么有两个子节点。</p><p>有三个子节点的节点叫 <strong>三节点</strong>。三节点要么没有子节点，要么有三个子节点。</p></li><li><p>2-3 树是由 二节点 和 三节点 构成的树。其节点仍遵循二叉排序树的规则。</p><p>对于二节点：其左子树的值需小于当前节点、右子树的值需大于当前节点</p><p>对于三节点：其左子树的值小于当前节点的最小值，中子树的值需介于当前节点的两个值之间，右子树的值大于当前节点的最大值</p></li></ul><p><strong>2-3 树的例子：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">graph TD</span><br><span class="line">A(10)---B(6)</span><br><span class="line">B---D(1, 3)</span><br><span class="line">B---E(7)</span><br><span class="line">A---C(15, 20)</span><br><span class="line">C---F(11, 12)</span><br><span class="line">C---G(19)</span><br><span class="line">C---H(22, 32)</span><br></pre></td></tr></table></figure><ul><li><p>插入节点时，如果不能满足条件，即需要拆分。</p><p>拆分时先拆上层。上层满时，才拆本层。拆分后仍要满足规则</p></li></ul><h3 id="B-树"><a href="#B-树" class="headerlink" title="B 树"></a>B 树</h3><p>B 树（b-tree，balance tree）。2-3 树与 2-3-4 树都是 B 树的种类。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">graph TD</span><br><span class="line">ROOT(30, 60&lt;br/&gt;P1 - P2 - P3)</span><br><span class="line">ROOT---R1(10, 20&lt;br/&gt;P1 - P2 - P3)</span><br><span class="line">ROOT---R2(40, 50&lt;br/&gt;. - P2 - P3)</span><br><span class="line">ROOT---R3(70, 80&lt;br/&gt;P1 - P2 - P3)</span><br><span class="line">R1---R11(3, 6)</span><br><span class="line">R1---R12(12, 13)</span><br><span class="line">R1---R13(23, 24)</span><br><span class="line">R2---R21( )</span><br><span class="line">R2---R22(41, 48)</span><br><span class="line">R2---R23(55, 57)</span><br><span class="line">R3---R31(61, 62)</span><br><span class="line">R3---R32(73, 74)</span><br><span class="line">R3---R33(84, 86)</span><br></pre></td></tr></table></figure><p>B 树具有如下特点：</p><ul><li><p>树树我啊，所有叶节点都在同一层呢。</p></li><li><p>搜索时，从根节点起，对当前节点内的关键字（有序）进行二分查找。</p><p>命中则结束。否则，进入那个对应范围的子节点。那个命中可能发生在叶节点，也可能在非叶节点。</p><p>如果当前节点为空，则表示没有找到。</p></li><li><p>B 树的关键字集合分布在整棵树中，非叶节点和叶节点都存放数据</p></li><li><p>B 树的搜索性能等价于在关键字全集内进行二分查找</p></li></ul><h4 id="B-树："><a href="#B-树：" class="headerlink" title="B+ 树："></a>B+ 树：</h4><p>B+ 树是 B 树的变体。</p><p>使用链表存储数据时，查找数据缓慢。因此将链表数据分为若干段，将每段的索引节点保存为树。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">graph TD</span><br><span class="line">ROOT(0, 32, 61&lt;br/&gt;A - B - C)</span><br><span class="line">ROOT---R1(0, 12, 23&lt;br/&gt;A - B - C)</span><br><span class="line">ROOT---R2(32, 40, 52&lt;br/&gt;A - B - C)</span><br><span class="line">ROOT---R3(61, 73, 84&lt;br/&gt;A - B - C)</span><br><span class="line">R1---R11(0&lt;br/&gt;4&lt;br/&gt;9)</span><br><span class="line">R1---R12(12&lt;br/&gt;13&lt;br/&gt;17)</span><br><span class="line">R1---R13(23&lt;br/&gt;24&lt;br/&gt;25)</span><br><span class="line">R2---R21(32&lt;br/&gt;38&lt;br/&gt;39)</span><br><span class="line">R2---R22(40&lt;br/&gt;41&lt;br/&gt;48)</span><br><span class="line">R2---R23(52&lt;br/&gt;55&lt;br/&gt;57)</span><br><span class="line">R3---R31(61&lt;br/&gt;62&lt;br/&gt;66)</span><br><span class="line">R3---R32(73&lt;br/&gt;74&lt;br/&gt;79)</span><br><span class="line">R3---R33(84&lt;br/&gt;86&lt;br/&gt;87)</span><br><span class="line">subgraph 数据链表</span><br><span class="line">R11</span><br><span class="line">R12</span><br><span class="line">R13</span><br><span class="line">R21</span><br><span class="line">R22</span><br><span class="line">R23</span><br><span class="line">R31</span><br><span class="line">R32</span><br><span class="line">R33</span><br><span class="line">end</span><br></pre></td></tr></table></figure><p>B+ 树具有如下特点：</p><ul><li><p>B+ 树的关键字都出现在叶节点的链表中，链表中数据是有序的。</p><p>非叶节点只相当于叶节点的索引（稀疏索引），叶节点相当于是存储数据的数据层（稠密索引）。</p></li><li><p>B+ 树的命中只可能发生在叶节点。</p></li><li><p>B+ 树的搜索性能也等价于在关键字全集内进行二分查找</p></li><li><p>B+ 树更适合文件索引系统</p></li></ul><h4 id="B-树：-1"><a href="#B-树：-1" class="headerlink" title="B* 树："></a>B* 树：</h4><p>B* 树是 B+ 树的变体，其在非根、非叶节点间加入了兄弟指针。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">graph TD</span><br><span class="line">ROOT(0, 32, 61&lt;br/&gt;A - B - C)</span><br><span class="line">ROOT---R1(0, 12, 23&lt;br/&gt;A - B - C)</span><br><span class="line">ROOT---R2(32, 40, 52&lt;br/&gt;A - B - C)</span><br><span class="line">ROOT---R3(61, 73, 84&lt;br/&gt;A - B - C)</span><br><span class="line">R1---R11(0&lt;br/&gt;4&lt;br/&gt;9)</span><br><span class="line">R1---R12(12&lt;br/&gt;13&lt;br/&gt;17)</span><br><span class="line">R1---R13(23&lt;br/&gt;24&lt;br/&gt;25)</span><br><span class="line">R2---R21(32&lt;br/&gt;38&lt;br/&gt;39)</span><br><span class="line">R2---R22(40&lt;br/&gt;41&lt;br/&gt;48)</span><br><span class="line">R2---R23(52&lt;br/&gt;55&lt;br/&gt;57)</span><br><span class="line">R3---R31(61&lt;br/&gt;62&lt;br/&gt;66)</span><br><span class="line">R3---R32(73&lt;br/&gt;74&lt;br/&gt;79)</span><br><span class="line">R3---R33(84&lt;br/&gt;86&lt;br/&gt;87)</span><br><span class="line">subgraph 数据链表</span><br><span class="line">R11</span><br><span class="line">R12</span><br><span class="line">R13</span><br><span class="line">R21</span><br><span class="line">R22</span><br><span class="line">R23</span><br><span class="line">R31</span><br><span class="line">R32</span><br><span class="line">R33</span><br><span class="line">end</span><br><span class="line">subgraph 索引相连</span><br><span class="line">R1</span><br><span class="line">R2</span><br><span class="line">R3</span><br><span class="line">end</span><br></pre></td></tr></table></figure><p>B* 树具有以下特点：</p><ul><li>B* 树定义了非叶子节点关键字个数至少为 (2 &#x2F; 3) * M。其块的最低使用率为 2 &#x2F; 3，而 B+ 树最低使用率为 1 &#x2F; 2</li><li>B* 树分配新节点的概率更低，空间使用率更高</li></ul><h3 id="前缀树"><a href="#前缀树" class="headerlink" title="前缀树"></a>前缀树</h3><p>前缀树（字典树、单词查找树、键树），是一种多路查找树。利用元素的公共前缀来减少查询时间。</p><p>下面是一个存储了数个单词（a、act、art、cat、can、cant、roin）的前缀树：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">graph TB</span><br><span class="line">R[ ]</span><br><span class="line">style a fill: #C0F0E0</span><br><span class="line">R --- a((a))</span><br><span class="line">R --- c[c]</span><br><span class="line">R --- r[r]</span><br><span class="line">a --- ac[c]</span><br><span class="line">a --- ar[r]</span><br><span class="line">style act fill: #C0F0E0</span><br><span class="line">ac --- act((t))</span><br><span class="line">style art fill: #C0F0E0</span><br><span class="line">ar --- art((t))</span><br><span class="line">c --- ca[a]</span><br><span class="line">style cat fill: #C0F0E0</span><br><span class="line">ca --- cat((t))</span><br><span class="line">style can fill: #C0F0E0</span><br><span class="line">ca --- can((n))</span><br><span class="line">style cant fill: #C0F0E0</span><br><span class="line">can --- cant((t))</span><br><span class="line">r --- ro[o]</span><br><span class="line">ro --- roi[i]</span><br><span class="line">style roin fill: #C0F0E0</span><br><span class="line">roi --- roin((n))</span><br></pre></td></tr></table></figure><p>前缀树具有如下特点：</p><ul><li><p>根节点不包含字符，除根节点外每一个节点包含一个字符。</p></li><li><p>节点的路径即为一条存储字符串。特别的，根节点表示空字符串</p><p>每个节点持有一个计数器，计算该节点处存储的字符串数量。</p></li><li><p>所有的子节点都与父节点具有相同前缀。</p></li><li><p>在前缀树中，查询字符串的时间复杂度为 O(L)，其中 L 为字符串长度</p></li></ul><p><strong>实现前缀树：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">class TrimTree &#123;</span><br><span class="line">    /* 节点类 */</span><br><span class="line">    private static class Node &#123;</span><br><span class="line">        Map&lt;Character, Node&gt; next = null;</span><br><span class="line">        int count = 0;</span><br><span class="line">        Node() &#123;</span><br><span class="line">            this.next = new HashMap&lt;&gt;();</span><br><span class="line">            this.count = 0;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    private Node root = null;// 根节点</span><br><span class="line"></span><br><span class="line">    /* 构造器 */</span><br><span class="line">    public TrimTree(String... strings) &#123;</span><br><span class="line">        this.root = new Node();</span><br><span class="line">        for (String s : strings) add(s);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /* 添加字符串 */</span><br><span class="line">    public void add(String s) &#123;</span><br><span class="line">        Node p = root;</span><br><span class="line">        for (char c : s.toCharArray()) &#123;</span><br><span class="line">            if (!p.next.containsKey(c)) p.next.put(c, new Node());</span><br><span class="line">            p = p.next.get(c);</span><br><span class="line">        &#125;</span><br><span class="line">        p.count++;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /* 查找字符串 */</span><br><span class="line">    public int search(String s) &#123;</span><br><span class="line">        Node p = root;</span><br><span class="line">        for (char c : s.toCharArray()) &#123;</span><br><span class="line">            if (!p.next.containsKey(c)) return 0;</span><br><span class="line">            p = p.next.get(c);</span><br><span class="line">        &#125;</span><br><span class="line">        return p.count;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="图"><a href="#图" class="headerlink" title="图"></a>图</h2><blockquote><p>线性表局限于一个直接前驱和一个直接后继的关系。</p><p>树可能有数个直接后继，但只能有一个直接前驱（父节点）</p><p>当需要表示多对多关系时，就需要 <strong>图</strong></p></blockquote><p>图是一种数据结构。每个节点可以有零个或多个相邻元素。</p><p>两个节点间的连接称为 <strong>边（edge）</strong>，节点也被称为 <strong>顶点（vertex）</strong></p><p>图的分类：</p><ul><li>按照 顶点间的连接有无方向 分为：有向图、无向图</li><li>按照 是否带权 分为：带权图（网）、非带权图</li><li>按照 表示方式 分为：二维数组表示（邻接矩阵）、链表表示（邻接表）</li></ul><p>一组连接的节点：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">graph TD</span><br><span class="line">A(1)---B(0)</span><br><span class="line">A---C(2)</span><br><span class="line">B---C</span><br><span class="line">B---D(3)</span><br><span class="line">B---E(4)</span><br></pre></td></tr></table></figure><p><strong>邻接矩阵：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">   0  1  2  3  4</span><br><span class="line">0 ┌0, 1, 1, 1, 1┐</span><br><span class="line">1 |1, 0, 1, 0, 0|</span><br><span class="line">2 |1, 1, 0, 0, 0|</span><br><span class="line">3 |1, 0, 0, 0, 0|</span><br><span class="line">4 └1, 0, 0, 0, 0┘</span><br></pre></td></tr></table></figure><p>其中，(0, 1) &#x3D;&#x3D; 1 表示 节点 0 与 节点 1 相连</p><p>邻接矩阵为每个顶点都分配了 n 个边的空间。这样，造成了空间的损失</p><p><strong>邻接表：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">0 [1]→[2]→[3]→[4]→</span><br><span class="line">1 [0]→[2]→</span><br><span class="line">2 [0]→[1]→</span><br><span class="line">3 [0]→</span><br><span class="line">4 [0]→</span><br></pre></td></tr></table></figure><p>邻接表为每个节点创建一个链表，链表中是与其相连的节点。邻接表由 数组 + 链表 组成</p><p>邻接表只关心存在的边，不关心不存在的边，因此没有空间浪费</p><h3 id="深度优先搜索-DFS"><a href="#深度优先搜索-DFS" class="headerlink" title="深度优先搜索 DFS"></a>深度优先搜索 DFS</h3><p>深度优先搜索（Depth First Search），其策略是优先纵向挖掘深入，而不是对一个节点的所有节点先进行横向访问。</p><p>从初始访问节点出发，首先访问其第一个相邻节点。之后，从那个访问节点出发，递归访问第一个相邻节点。直到一个节点的路径完全访问结束后，才访问第二个节点。</p><ul><li>访问初始节点 s，标记其为已访问</li><li>从 s 的第一个相邻节点起，以递归方式对其进行深度优先搜索。</li><li>当前节点没有可访问的相邻节点时，就完成了对一条路径访问。此时才返回上一级，继续搜索下一节点。</li></ul><h3 id="广度优先搜索-BFS"><a href="#广度优先搜索-BFS" class="headerlink" title="广度优先搜索 BFS"></a>广度优先搜索 BFS</h3><p>广度优先搜索（Broad First Search），其策略是优先横向访问所有相邻节点，而不是对一条路径进行纵向挖掘。</p><p>从初始访问节点出发，记录所有相邻节点。之后，访问先前记录节点，并记录所有相邻节点。直到没有能访问的节点为止，就完成了对所有连接节点的搜索。</p><ul><li>记录初始节点 s</li><li>访问上一次记录的节点，将其标记为已访问。将那些节点的所有可访问的相邻节点记录。</li><li>重复上一步，直到没有可访问的节点时，就完成了对所有连接节点的访问。</li></ul><h2 id="附录"><a href="#附录" class="headerlink" title="附录"></a>附录</h2><h3 id="F1-实现赫夫曼编码-解码"><a href="#F1-实现赫夫曼编码-解码" class="headerlink" title="F1 实现赫夫曼编码&#x2F;解码"></a>F1 实现赫夫曼编码&#x2F;解码</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br></pre></td><td class="code"><pre><span class="line">/* 压缩数据包 */</span><br><span class="line">class DataBox &#123;</span><br><span class="line">    public byte[] data;// 压缩信息主体</span><br><span class="line">    public Map&lt;Byte, String&gt; key;// 赫夫曼表</span><br><span class="line">    public int step;// 补位数</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class Huff &#123;</span><br><span class="line">    /* 将数据压缩，返回一个压缩包 */</span><br><span class="line">    public static DataBox huff(byte[] data) &#123;</span><br><span class="line">        DataBox dataBox = new DataBox();</span><br><span class="line">        dataBox.key = getHuffMap(data);// 在压缩包内记录编码表</span><br><span class="line">        dataBox.data = toHuff(data, dataBox);// 在压缩包内记录压缩后数据，也会记录补位数</span><br><span class="line">        return dataBox;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /* 根据要压缩的数据，计算那个赫夫曼表 */</span><br><span class="line">    private static Map&lt;Byte, String&gt; getHuffMap(byte[] val) &#123;</span><br><span class="line">        if (val == null || val.length == 0) return new HashMap&lt;&gt;();</span><br><span class="line">        Map&lt;Byte, Node&gt; huff = new HashMap&lt;&gt;();</span><br><span class="line">        for (byte c : val) &#123;// 记录每个字符出现的次数</span><br><span class="line">            if (huff.containsKey(c)) huff.get(c).times++;</span><br><span class="line">            else huff.put(c, new Node(c, 1));</span><br><span class="line">        &#125;</span><br><span class="line">        PriorityQueue&lt;Node&gt; pq = new PriorityQueue&lt;&gt;(huff.values());</span><br><span class="line">        while (pq.size() &gt; 1) &#123;// 生成赫夫曼树</span><br><span class="line">            Node temp = new Node(pq.remove(), pq.remove());</span><br><span class="line">            pq.add(temp);</span><br><span class="line">        &#125;</span><br><span class="line">        Map&lt;Byte, String&gt; ret = new HashMap&lt;&gt;();</span><br><span class="line">        update(ret, pq.remove(), &quot;&quot;);// 根据那个赫夫曼树，生成赫夫曼编码</span><br><span class="line">        if (ret.size() == 1) ret.put(val[0], &quot;0&quot;);// 特别地，只有唯一字符从场合这样处理</span><br><span class="line">        return ret;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /* 根据赫夫曼表，将数据压缩 */</span><br><span class="line">    private static byte[] toHuff(byte[] val, DataBox d) &#123;</span><br><span class="line">        StringBuilder sb = new StringBuilder();</span><br><span class="line">        for (byte c : val) &#123;// 得到压缩后的 bit 字符串</span><br><span class="line">            sb.append(d.key.get(c));</span><br><span class="line">        &#125;</span><br><span class="line">        byte[] ret = new byte[(sb.length() + 7) / 8];// 压缩后的数据放在 byte 数组中</span><br><span class="line">        d.step = sb.length() % 8;// 记录那个补位数</span><br><span class="line">        for (int i = 0; i &lt; ret.length; i ++) &#123;</span><br><span class="line">            if (i &gt;= ret.length - 1 &amp;&amp; d.step != 0) &#123;// 最后一位可能有补位。那个场合，让有效数字在最左侧</span><br><span class="line">                ret[i] = (byte) (Integer.parseInt(sb.substring(8 * i), 2) &lt;&lt; (8 - d.step));</span><br><span class="line">            &#125; else ret[i] = (byte) Integer.parseInt(sb.substring(8 * i, 8 * i + 8), 2);</span><br><span class="line">        &#125;</span><br><span class="line">        return ret;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /* 该方法能遍历赫夫曼树，以获取赫夫曼表 */</span><br><span class="line">    private static void update(Map&lt;Byte, String&gt; ss, Node root, String s) &#123;</span><br><span class="line">        if (root == null) return;</span><br><span class="line">        else if (root.right == null &amp;&amp; root.left == null) &#123;</span><br><span class="line">            ss.put(root.val, s);// 是叶节点的场合，记录这个编码值</span><br><span class="line">        &#125;</span><br><span class="line">        if (root.left != null) update(ss, root.left, s + &quot;0&quot;);// 向左路径记为 0</span><br><span class="line">        if (root.right != null) update(ss, root.right, s + &quot;1&quot;);// 向右路径记为 1</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    /* 解压压缩包 */</span><br><span class="line">    public static byte[] antiHuff(DataBox d) &#123;</span><br><span class="line">        StringBuilder sb = new StringBuilder();</span><br><span class="line">        for (int i = 0; i &lt; d.data.length; i++) &#123;// 获取那个压缩数据的编码</span><br><span class="line">            String temp = null;</span><br><span class="line">            if (i &gt;= d.data.length - 1 &amp;&amp; d.step != 0) sb.append((temp = Integer.toBinaryString(d.data[i] | 256)), temp.length() - 8, temp.length() - 8 + d.step);// 遍历到最后，要处理那个补位</span><br><span class="line">            else sb.append((temp = Integer.toBinaryString(d.data[i] | 256)).substring(temp.length() - 8));</span><br><span class="line">        &#125;</span><br><span class="line">        Map&lt;String, Byte&gt; anti = new HashMap&lt;&gt;();</span><br><span class="line">        for (Byte aByte : d.key.keySet()) &#123;// 将编码表转化为解码表</span><br><span class="line">            anti.put(d.key.get(aByte), aByte);</span><br><span class="line">        &#125;</span><br><span class="line">        List&lt;Byte&gt; ret = new ArrayList&lt;&gt;();</span><br><span class="line">        StringBuilder s = new StringBuilder();</span><br><span class="line">        for (int i = 0; i &lt; sb.length(); i++) &#123;// 按照解码表，把压缩编码转化为未解压编码</span><br><span class="line">            s.append(sb.charAt(i));</span><br><span class="line">            if (anti.containsKey(s.toString())) &#123;</span><br><span class="line">                ret.add(anti.get(s.toString()));</span><br><span class="line">                s = new StringBuilder();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        byte[] bt = new byte[ret.size()];// 将 Byte 数组转化为 byte 数组</span><br><span class="line">        for (int i = 0; i &lt; bt.length; i++) &#123;</span><br><span class="line">            bt[i] = ret.get(i);</span><br><span class="line">        &#125;</span><br><span class="line">        return bt;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">/* 节点类，是构建赫夫曼树时用到的类 */</span><br><span class="line">    static class Node implements Comparable&lt;Node&gt; &#123;</span><br><span class="line">        public byte val;// 代表的 byte 值</span><br><span class="line">        public int times;// 出现的次数</span><br><span class="line">        public Node left;</span><br><span class="line">        public Node right;</span><br><span class="line"></span><br><span class="line">        public Node(Node l, Node r) &#123;</span><br><span class="line">            this.left = l;</span><br><span class="line">            this.right = r;</span><br><span class="line">            this.times = l.times + r.times;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        public Node(byte val, int pow) &#123;</span><br><span class="line">            this.val = val;</span><br><span class="line">            this.times = pow;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        public Node(byte val) &#123;</span><br><span class="line">            this.val = val;</span><br><span class="line">            this.times = 0;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        @Override</span><br><span class="line">        public int compareTo(Node o) &#123;</span><br><span class="line">            return this.times - o.times;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="F2-实现平衡二叉树"><a href="#F2-实现平衡二叉树" class="headerlink" title="F2 实现平衡二叉树"></a>F2 实现平衡二叉树</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br></pre></td><td class="code"><pre><span class="line">class AVL&#123;</span><br><span class="line">    public Node root = null;// 根节点</span><br><span class="line">    </span><br><span class="line">    /* 添加一个值（添加一个节点）</span><br><span class="line">    val：要添加的值 */</span><br><span class="line">    public void add(int val) &#123;</span><br><span class="line">        Node toAdd = new Node(val);</span><br><span class="line">        if (root == null) root = toAdd;</span><br><span class="line">        else &#123;</span><br><span class="line">            Node par = root;</span><br><span class="line">            Node temp = root;</span><br><span class="line">            while (temp != null) &#123;// 确定其插入位置</span><br><span class="line">                par = temp;</span><br><span class="line">                if (val &gt; temp.val) &#123;</span><br><span class="line">                    temp = temp.right;</span><br><span class="line">                    toAdd.way = true;</span><br><span class="line">                &#125; else &#123;</span><br><span class="line">                    temp = temp.left;</span><br><span class="line">                    toAdd.way = false;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            if (toAdd.way) &#123;// 将其插入到指定位置</span><br><span class="line">                par.right = toAdd;</span><br><span class="line">                par.right.parent = par;</span><br><span class="line">            &#125; else &#123;</span><br><span class="line">                par.left = toAdd;</span><br><span class="line">                par.left.parent = par;</span><br><span class="line">            &#125;</span><br><span class="line">            while (true) &#123;// 维护该平衡二叉树</span><br><span class="line">                par = toAVL(par);</span><br><span class="line">                if (par.parent == null) &#123;</span><br><span class="line">                    root = par;</span><br><span class="line">                    break;</span><br><span class="line">                &#125; else &#123;</span><br><span class="line">                    if (par.way) par.parent.right = par;</span><br><span class="line">                    else par.parent.left = par;</span><br><span class="line">                    par = par.parent;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /* 维护平衡二叉树</span><br><span class="line">    root: 待检查节点 */</span><br><span class="line">    private static Node toAVL(Node root) &#123;</span><br><span class="line">        if (root == null) return null;</span><br><span class="line">        int gap = root.rightHeight() - root.leftHeight();</span><br><span class="line">        if (Math.abs(gap) &gt; 1) &#123;// |gap| &gt; 1 时，需要旋转</span><br><span class="line">            if (gap &gt; 0) &#123;// gap &gt; 0 需要左旋，否则右旋</span><br><span class="line">                if (root.right.leftHeight() &gt; root.right.rightHeight()) root.right = roll(root.right, true);</span><br><span class="line">                return roll(root, false);</span><br><span class="line">            &#125; else &#123;</span><br><span class="line">                if (root.left.rightHeight() &gt; root.left.leftHeight()) root.left = roll(root.left, false);</span><br><span class="line">                return roll(root, true);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; else return root;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /* 对该节点进行旋转。</span><br><span class="line">    root：待旋转节点</span><br><span class="line">    dirR：true 的场合右旋，否则左旋 */</span><br><span class="line">    private static Node roll(Node root, boolean dirR) &#123;</span><br><span class="line">        Node temp = null;</span><br><span class="line">        if (dirR) &#123;</span><br><span class="line">            temp = root.left;</span><br><span class="line">            root.left = temp.right;</span><br><span class="line">            if (temp.right != null) &#123;</span><br><span class="line">                temp.right.way = false;</span><br><span class="line">                temp.right.parent = root;</span><br><span class="line">            &#125;</span><br><span class="line">            temp.right = root;</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            temp = root.right;</span><br><span class="line">            root.right = temp.left;</span><br><span class="line">            if (temp.left != null) &#123;</span><br><span class="line">                temp.left.way = true;</span><br><span class="line">                temp.left.parent = root;</span><br><span class="line">            &#125;</span><br><span class="line">            temp.left = root;</span><br><span class="line">        &#125;</span><br><span class="line">        temp.way = root.way;</span><br><span class="line">        temp.parent = root.parent;</span><br><span class="line">        root.way = dirR;</span><br><span class="line">        root.parent = temp;</span><br><span class="line">        return temp;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    /* 一个展示树的方法。供 debug 用 */</span><br><span class="line">    public static void show(Node root) &#123;</span><br><span class="line">        LinkedList&lt;Node&gt; a = new LinkedList&lt;&gt;();</span><br><span class="line">        LinkedList&lt;Node&gt; b = new LinkedList&lt;&gt;();</span><br><span class="line">        a.add(root);</span><br><span class="line">        while (!a.isEmpty()) &#123;</span><br><span class="line">            Node temp = a.removeFirst();</span><br><span class="line">            System.out.print(temp.val + &quot; &quot;);</span><br><span class="line">            if (temp.left != null) b.add(temp.left);</span><br><span class="line">            if (temp.right != null) b.add(temp.right);</span><br><span class="line">            if (a.isEmpty()) &#123;</span><br><span class="line">                System.out.println();</span><br><span class="line">                a = b;</span><br><span class="line">                b = new LinkedList&lt;&gt;();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(&quot;共 &quot; + count(root) + &quot; 个节点&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    /* 一个清点树中节点的方法 */</span><br><span class="line">    public static int count(Node root) &#123;</span><br><span class="line">        if (root == null) return 0;</span><br><span class="line">        return 1 + count(root.left) + count(root.right);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public static class Node &#123;</span><br><span class="line">        public int val;// 值</span><br><span class="line">        public Node left;// 左节点</span><br><span class="line">        public Node right;// 右节点</span><br><span class="line">        public Node parent;// 父节点</span><br><span class="line">        boolean way = false;        // false：该节点是左节点；true：是右节点</span><br><span class="line"></span><br><span class="line">        public Node(int val) &#123;</span><br><span class="line">            this.val = val;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        public int leftHeight() &#123;// 左子树高度</span><br><span class="line">            return (left == null ? 0 : left.height());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        public int rightHeight() &#123;// 右子树高度</span><br><span class="line">            return (right == null ? 0 : right.height());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        public int height() &#123;// 该节点树高度</span><br><span class="line">            return Math.max(leftHeight(), rightHeight()) + 1;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 教程 </tag>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java 数据结构</title>
      <link href="/2022/12/06/learn/Java/Java%20%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
      <url>/2022/12/06/learn/Java/Java%20%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/</url>
      
        <content type="html"><![CDATA[<blockquote><p>数据结构分为两种：线性结构、非线性结构</p></blockquote><p><strong>线性结构：</strong></p><ul><li><p>最常用的数据结构。数据元素间存在一对一线性关系。</p></li><li><p>线性结构有 2 种不同的存储结构：顺序储存结构，链式储存结构</p><p>顺序存储结构中元素存储在连续的内存空间中。</p><p>链式储存结构中元素储存在非连续的空间中，元素节点中存放数据元素及相邻元素的地址信息</p></li><li><p>常见的线性结构有：数组、队列、链表、栈等</p></li></ul><p><strong>非线性结构：</strong></p><ul><li>非线性结构包括：二维数组、多维数组、广义表、树结构、图结构</li></ul><h2 id="集合的框架体系"><a href="#集合的框架体系" class="headerlink" title="集合的框架体系"></a>集合的框架体系</h2><blockquote><p>Java 提供了一系列集合容器，以方便程序员动态保存元素。并提供了一系列方便的操作对象的方法。</p><p>Java 集合主要分为两组：单列集合（Collection）、双列集合（Map）</p></blockquote><p><em>（集合体系图_13.1）</em></p><ul><li><p><strong>Collection 接口</strong>（单列集合）：可以存放多个元素。每个元素可以是 Object</p><p>Collection 接口有两个重要子接口：List（有序集合）和 Set（无序集合）</p></li><li><p><strong>Map 接口</strong>（双列集合）：用于保存具有映射关系的数据：key - value（双列元素）</p><p>key 和 value 可以是任何类型的引用数据类型。其中 key 不能重复，value 可以重复</p><p>key 和 value 存在单一对应关系。通过特定的 key 一定能找到指定的 value</p></li></ul><h2 id="单列集合接口-Collection"><a href="#单列集合接口-Collection" class="headerlink" title="单列集合接口 Collection"></a>单列集合接口 Collection</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">public interface Collection&lt;E&gt; extends Lterable&lt;E&gt;</span><br></pre></td></tr></table></figure><blockquote><p>Collection 实现子类可以存放多个元素。每个元素可以是 Object</p><p>有些 Collection 实现子类能存放重复的元素，有些不能</p><p>有些 Collection 实现子类是有序的（List） ，有些不是（Set）</p><p>Collection 接口没有直接的实现子类，都是通过其子接口实现的</p></blockquote><h3 id="常用方法："><a href="#常用方法：" class="headerlink" title="常用方法："></a>常用方法：</h3><ul><li><p><code>add</code>：添加单个元素</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">ArrayList list = new ArrayList();</span><br><span class="line">list.add(&quot;哈哈啊&quot;);</span><br><span class="line">list.add(10);// 相当于List.add(new Integer(10));</span><br><span class="line">list.add(true);// 同上</span><br></pre></td></tr></table></figure></li><li><p><code>remove</code>：删除单个元素</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">list.remove(0)// 删除编号 0 的元素。上例中会删除 &quot;哈哈啊&quot;</span><br><span class="line">list.remove((Integer)10);// 删除上例的 10 要这样写</span><br></pre></td></tr></table></figure></li><li><p><code>contains</code>：检查元素是否存在</p></li><li><p><code>size</code>：获取元素个数</p></li><li><p><code>isEmpty</code>：判断是否为空</p></li><li><p><code>clear</code>：清空</p></li><li><p><code>addAll</code>：添加多个元素</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">ArrayList list2 = new ArrayList();</span><br><span class="line">list2.add(111);</span><br><span class="line">list2.add(&quot;idea&quot;);</span><br><span class="line">list.addAll(list2);// 这里可以输入所有实现了 Collection 接口的集合</span><br></pre></td></tr></table></figure></li><li><p><code>containsAll</code>：检查多个元素是否存在</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">list.contaionsAll(list2);// 同上，放一个实现了 Collection 接口的集合</span><br></pre></td></tr></table></figure></li><li><p><code>removeAll</code>：删除多个元素</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">list.removeAll(list2);// 同上</span><br></pre></td></tr></table></figure></li><li><p><code>Iterator iterator()</code>：返回指向集合开始位置的迭代器</p></li></ul><h3 id="迭代器-Iterator"><a href="#迭代器-Iterator" class="headerlink" title="迭代器 Iterator"></a>迭代器 Iterator</h3><blockquote><p>Iterator 对象称为迭代器，主要用于遍历 Collection 集合中的元素。</p><p>Collection 继承的 Iterable 接口中，提供了 <code>iterator()</code> 方法，会返回一个新的迭代器。</p><p>Iterator 对象仅用于遍历集合，本身不存放元素</p><p>IDEA 中，迭代器 while 循环的模板快捷键：<code>itit</code></p></blockquote><p><strong>常用方法：</strong></p><ul><li><code>boolean hasNext()</code>：该方法判断是否有下一个元素。</li><li><code>T next()</code>：该方法会将指针下移，然后返回下移后的位置上的元素</li></ul><p><strong>用迭代器遍历元素：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Collection&lt;Object&gt; c = new LinkedList&lt;&gt;();</span><br><span class="line">Iterator&lt;Object&gt; iterator = c.iterator();// [1]</span><br><span class="line">while (iterator.hasNext())&#123;// [2]</span><br><span class="line">Object obj = iterator.next();// [3]</span><br><span class="line">System.out.println(obj);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li><p>获取迭代器</p></li><li><p>判断有无下一元素</p></li><li><p>将迭代器后移，并返回那个后移位置上的元素</p><p>while 循环结束后，指针指向最后元素的位置。再次 <code>next()</code> 会报错。如果需要再使用，需要重置迭代器。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">iterator = list.iterator();// 重置了迭代器</span><br></pre></td></tr></table></figure></li></ol><p><strong>for each（增强 for 循环）：</strong></p><blockquote><p>for each 的语法与 for 循环相似，但是可以遍历 Collection 和 数组 中的元素</p><p>IDEA 中，增强 for 循环的模板快捷键：<code>I</code></p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">for (Object o : list)&#123;</span><br><span class="line">...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>for each 可在 Collection 集合中使用。</li><li>for each 的底层在本质上也是 <code>Iterator</code>。可以理解为简化版本的迭代器遍历。</li></ul><h2 id="有序集合接口-List"><a href="#有序集合接口-List" class="headerlink" title="有序集合接口 List"></a>有序集合接口 List</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">public interface List&lt;E&gt; extends Collection&lt;E&gt;</span><br></pre></td></tr></table></figure><blockquote><p>List 是 Collection 接口的子类接口</p><p>List 是有序（添加顺序和取出顺序一致）的，可重复的</p><p>List 中的每个元素都有其对应的顺序索引（从 0 开始编号）</p></blockquote><h3 id="常用方法：-1"><a href="#常用方法：-1" class="headerlink" title="常用方法："></a>常用方法：</h3><ul><li><p><code>add(int, obj)</code>：在 int 位置插入 obj 元素。返回 true</p><p><code>add(obj)</code>：在末尾插入 obj。返回 true</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">list.add(111);</span><br><span class="line">list.add(0, 110);// 在第 1 个位置插入数字 110</span><br></pre></td></tr></table></figure><p><code>addElement(obj)</code>：在末尾插入 obj。无返回值。你说要这方法有啥用？名字还长一截</p></li><li><p><code>addAll(int, collection)</code>：在 int 位置插入 collection 中的所有元素</p></li><li><p><code>get(int)</code>：返回 int 位置的元素</p></li><li><p><code>indexOf(obj)</code>：返回 obj 首次出现时的位置</p></li><li><p><code>lastIndexOf(obj)</code>：返回 obj 最后一次出现时的位置</p></li><li><p><code>remove(int)</code>：移除 int 位置的元素，并返回那个被移除的元素</p></li><li><p><code>set(int, obj)</code>：设置 int 位置的元素为 obj。相当于替换。返回那个被替换元素的下标</p><p><code>setElement(obj, int)</code>：设置 int 位置的元素为 obj。无返回值</p></li><li><p><code>subList(int1, int2)</code>：返回 [int1, int2) 范围的元素构成的子集合</p></li></ul><h3 id="可变数组-ArrayList"><a href="#可变数组-ArrayList" class="headerlink" title="可变数组 ArrayList"></a>可变数组 ArrayList</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">public class ArrayList&lt;E&gt; extends AbstractList&lt;E&gt;</span><br><span class="line">     implements List&lt;E&gt;, RandomAccess, Cloneable, java.io.Serializable</span><br></pre></td></tr></table></figure><blockquote><p>ArrayList 是 List 的实现子类。其底层由数组来实现存储。</p><p>ArrayList 可以存放 null</p></blockquote><h4 id="ArrayList-的源码："><a href="#ArrayList-的源码：" class="headerlink" title="ArrayList 的源码："></a>ArrayList 的源码：</h4><ol><li><p>ArrayList 中维护了一个 Object 类型的数组 elementData。该数组就是用来存放元素的数组</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">transient Object[] elementData;</span><br></pre></td></tr></table></figure></li><li><p>创建 ArrayList 对象时，如果使用无参构造器，则 elementData[] 初始容量为 0</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">private static final Object[] DEFAULTCAPACITY_EMPTY_ELEMENTDATA = &#123;&#125;;</span><br><span class="line"></span><br><span class="line">public ArrayList() &#123;</span><br><span class="line">    this.elementData = DEFAULTCAPACITY_EMPTY_ELEMENTDATA;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>如果使用指定大小构造器，则初始容量为指定大小。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">private static final Object[] EMPTY_ELEMENTDATA = &#123;&#125;;</span><br><span class="line"></span><br><span class="line">public ArrayList(int initialCapacity) &#123;</span><br><span class="line">    if (initialCapacity &gt; 0) &#123;</span><br><span class="line">        this.elementData = new Object[initialCapacity];</span><br><span class="line">    &#125; else if (initialCapacity == 0) &#123;</span><br><span class="line">/* 这个场合，与默认构造器的不同之处在于</span><br><span class="line">扩容时，该 0 容量变为 1，而默认构造器会变为 10 */</span><br><span class="line">        this.elementData = EMPTY_ELEMENTDATA;</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">        throw new IllegalArgumentException(...);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>扩容的场合：</p><p>如果是 <strong>无参构造器生成的初始 0 长度的 elementData</strong>，则将其容量置为 10。</p><p>否则容量扩容为 1.5 倍。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">/* 扩容方法，传入的参数 minCapacity 是容器现有元素数量 + 1 的值</span><br><span class="line">如果是无参构造器生成的默认数组，此时传入固定值 10 */</span><br><span class="line">private void grow(int minCapacity) &#123;</span><br><span class="line">    int oldCapacity = elementData.length;</span><br><span class="line">    /* 计算新的容量（旧容量的 1.5 倍）</span><br><span class="line">    此处 &gt;&gt; 为位运算符，等同于 newC = oldC + oldC / 2; */</span><br><span class="line">    int newCapacity = oldCapacity + (oldCapacity &gt;&gt; 1);</span><br><span class="line">    /* 这里如果原容量是特殊值（1 或 0），容量会变为那个 minCapacity 的值 */</span><br><span class="line">    if (newCapacity - minCapacity &lt; 0)</span><br><span class="line">        newCapacity = minCapacity;</span><br><span class="line">    if (newCapacity - MAX_ARRAY_SIZE &gt; 0)</span><br><span class="line">        newCapacity = hugeCapacity(minCapacity);</span><br><span class="line">    elementData = Arrays.copyOf(elementData, newCapacity);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h3 id="可变数组-Vector"><a href="#可变数组-Vector" class="headerlink" title="可变数组 Vector"></a>可变数组 Vector</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">public class Vector&lt;E&gt;</span><br><span class="line">    extends AbstractList&lt;E&gt;</span><br><span class="line">    implements List&lt;E&gt;, RandomAccess, Cloneable, java.io.Serializable</span><br></pre></td></tr></table></figure><blockquote><p>Vector 是 List 的实现子类。其底层由数组来实现存储</p><p>Vector 与 ArrayList 基本等同。ArrayList 效率更高，Vector 线程安全。</p><p>在开发中，需要考虑线程安全时，建议使用 Vector ，而非 ArrayList。</p></blockquote><h4 id="Vector-的源码："><a href="#Vector-的源码：" class="headerlink" title="Vector 的源码："></a>Vector 的源码：</h4><ol><li><p>底层维护了一个 Object 类型的数组 elementData。用以存放元素</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">protected Object[] elementData;</span><br></pre></td></tr></table></figure></li><li><p>使用无参构造器创建对象时，默认大小是 10</p><p>使用有参构造器的场合，默认是那个指定大小（initialCapaticy）</p><p>也能在构造器中指定那个扩容的增长速度（capacityIncrement）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">public Vector() &#123;</span><br><span class="line">    this(10);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public Vector(int initialCapacity) &#123;</span><br><span class="line">    this(initialCapacity, 0);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public Vector(int initialCapacity, int capacityIncrement) &#123;</span><br><span class="line">    super();</span><br><span class="line">    if (initialCapacity &lt; 0)</span><br><span class="line">        throw new IllegalArgumentException(...);</span><br><span class="line">    this.elementData = new Object[initialCapacity];</span><br><span class="line">    this.capacityIncrement = capacityIncrement;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>扩容的场合，容量变成 2 倍</p><p>使用有参构造器改变了 capacityIncrement 的场合，增量是那个指定数值</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">private void grow(int minCapacity) &#123;</span><br><span class="line">    int oldCapacity = elementData.length;</span><br><span class="line">    /* 计算新的容量（按照指定的增速扩容）</span><br><span class="line">    那个指定无效或未指定时，容量变为 2 倍 */</span><br><span class="line">    int newCapacity = oldCapacity + ((capacityIncrement &gt; 0) ?</span><br><span class="line">                                     capacityIncrement : oldCapacity);</span><br><span class="line">    if (newCapacity - minCapacity &lt; 0)</span><br><span class="line">        newCapacity = minCapacity;</span><br><span class="line">    if (newCapacity - MAX_ARRAY_SIZE &gt; 0)</span><br><span class="line">        newCapacity = hugeCapacity(minCapacity);</span><br><span class="line">    elementData = Arrays.copyOf(elementData, newCapacity);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h3 id="链表-LinkedList"><a href="#链表-LinkedList" class="headerlink" title="链表 LinkedList"></a>链表 LinkedList</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">public class LinkedList&lt;E&gt;</span><br><span class="line">    extends AbstractSequentialList&lt;E&gt;</span><br><span class="line">    implements List&lt;E&gt;, Deque&lt;E&gt;, Cloneable, java.io.Serializable</span><br></pre></td></tr></table></figure><blockquote><p>LinkedList 是 List 的实现子类，底层以链表形式存储元素。</p><p>链表是一种<strong>非线性结构</strong>：其以节点方式存储，节点间在内存上的位置不连续。</p><p>链表是有序的列表。单向链表每个节点包含 data 域和 next 域。那些 next 域指向下一节点的位置。</p><p>双向链表在单向链表的基础上，每个节点加入 prev 区域以指示其前方节点。这样，就能实现双向查找。双向链表可以不依靠辅助节点而实现自我删除。</p><p>LinkedList 底层实现了 双向链表 和 双端队列 特点。</p><p>LinkedList 可以添加 null，可添加重复元素。但没有实现同步，因此线程不安全。</p></blockquote><h4 id="常用方法：-2"><a href="#常用方法：-2" class="headerlink" title="常用方法："></a>常用方法：</h4><ul><li><p><code>void addLast(E e)</code>：尾插一个新的元素</p><p>LinkedList 的 add 方法即调用该方法</p></li><li><p><code>void addFirst(E e)</code>：头插一个新的元素</p></li><li><p><code>E removeLast()</code>：移除并返回尾部元素。为空时报错</p><p><code>E poll()</code>：移除并返回尾部元素。为空时返回 null</p><p><code>E removeFirst()</code>：移除并返回头部元素。为空时报错</p></li><li><p><code>E getLast()</code>：仅返回尾部元素。为空时报错</p><p><code>E peek()</code>：返回尾部元素。为空时返回 null</p><p><code>E element()</code>：返回头部元素。为空时返回 null</p><p><code>E getFirst()</code></p></li></ul><h4 id="LinkedList-的源码"><a href="#LinkedList-的源码" class="headerlink" title="LinkedList 的源码"></a>LinkedList 的源码</h4><ol><li><p>LinkedList 只有默认构造器和一个拷贝构造器</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">public LinkedList() &#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public LinkedList(Collection&lt;? extends E&gt; c) &#123;</span><br><span class="line">    this();</span><br><span class="line">    addAll(c);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>LinkedList 底层维护了一个 双向链表</p><p>两个属性 first、last 分别指向 首节点 和 尾节点</p><p>每个节点（Node 对象），里面又维护了 prev、next、item 属性。</p><p>其中通过 prev 指向前一个节点，通过 next 指向后一个节点。最终实现双向链表。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">transient Node&lt;E&gt; first;</span><br><span class="line">transient Node&lt;E&gt; last;</span><br><span class="line"></span><br><span class="line">private static class Node&lt;E&gt; &#123;</span><br><span class="line">    E item;</span><br><span class="line">    Node&lt;E&gt; next;</span><br><span class="line">    Node&lt;E&gt; prev;</span><br><span class="line"></span><br><span class="line">    Node(Node&lt;E&gt; prev, E element, Node&lt;E&gt; next) &#123;</span><br><span class="line">        this.item = element;</span><br><span class="line">        this.next = next;</span><br><span class="line">        this.prev = prev;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>LinkedList 不需要扩容。其增删元素时只要改变节点的指向即可。</p><p>也因此，其添加、删除元素效率比数组更高</p></li></ol><h4 id="ArrayList-和-LinkedList-的比较："><a href="#ArrayList-和-LinkedList-的比较：" class="headerlink" title="ArrayList 和 LinkedList 的比较："></a>ArrayList 和 LinkedList 的比较：</h4><table><thead><tr><th></th><th>底层结构</th><th>增删效率</th><th>改查效率</th></tr></thead><tbody><tr><td><code>ArrayList</code></td><td>可变数组</td><td>低（数组扩容）</td><td>高</td></tr><tr><td><code>LinkedList</code></td><td>双向链表</td><td>高（链表追加）</td><td>低</td></tr></tbody></table><p>应该根据实际情况来选择使用的集合：</p><ul><li><p>如果改查操作多，选择 ArrayList。一般来说，在程序中，80% - 90% 都是查询。大部分情况下，选择 ArrayList。</p></li><li><p>如果增删操作多，选择 LinkedList</p></li></ul><h3 id="稀疏数组"><a href="#稀疏数组" class="headerlink" title="稀疏数组"></a>稀疏数组</h3><blockquote><p>二维数组的很多值是默认值 0，因此记录了很多没有意义的数据。因此，可以使用稀疏数组。</p></blockquote><p>稀疏数组的处理方法：</p><ol><li>记录数组共有几行几列，有多少个不同的值</li><li>把具有不同值的元素的行列及值记录在一个小规模数组中，从而缩小程序规模</li></ol><p><strong>二维数组转换为稀疏数组：</strong></p><p>下面用 ArrayList 模拟一个稀疏数组。</p><p>二维数组：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">int[][] map = &#123;&#123;0, 2, 0, 0, 0, 0 ,0 , 0&#125;,</span><br><span class="line">              &#123;0, 0, 3, 0, 0, 0, 0, -1&#125;,</span><br><span class="line">              &#123;15, 0, 0, 0, 0, 4, 0, 0&#125;,</span><br><span class="line">              &#123;0, 2, 0, 0, 0, 0, 0, 0&#125;,</span><br><span class="line">              &#123;0, 0, 0, 0, 0, 0, 0, 0&#125;,</span><br><span class="line">              &#123;0, 0, 0, 0, 0, 0, 0, 1&#125;,</span><br><span class="line">              &#123;0, 0, 0, 0, 0, 0, 0, 0&#125;&#125;;</span><br></pre></td></tr></table></figure><p>遍历原始的二维数组，得到有效数据的个数 sum，并将二维数组的有效数据存入稀疏数组</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">List&lt;int[]&gt; sparseArray = new ArrayList();</span><br><span class="line"></span><br><span class="line">sparseArray.add(new int[]&#123;map.length, map[0].length, 0&#125;);//</span><br><span class="line"></span><br><span class="line">for (int y = 0; y &lt; map.length; y++) &#123;</span><br><span class="line">    for (int x = 0; x &lt; map[0].length; x++) &#123;</span><br><span class="line">        if (map[y][x] != 0) &#123;</span><br><span class="line">            sparseArray.add(new int[]&#123;y, x, map[y][x]&#125;);</span><br><span class="line">            sparseArray.get(0)[2]++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>稀疏数组转化为二维数组：</strong></p><p>读取稀疏数组的每一行，按照其第一行数据，创建原始的二维数组。</p><p>读取后几行数据，将值赋给二维数组</p><h3 id="栈-Stack"><a href="#栈-Stack" class="headerlink" title="栈 Stack"></a>栈 Stack</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">public class Stack&lt;E&gt; extends Vector&lt;E&gt;</span><br></pre></td></tr></table></figure><blockquote><p>Stack 是 Vector 的子类。以数组模拟了栈的数据结构。</p><p>栈是一个先入后出的有序列表。其元素之插入删除只能在该线性表的同一端进行。</p><p>其允许增删的一端称为栈顶，另一端即为栈底。</p><p>最先放入的元素位于栈底，最后放入的元素位于栈顶。</p><p>放入元素称为入栈（push），取出元素称为出栈（pop）</p></blockquote><p><strong>栈的应用场景：</strong></p><ul><li>子程序的调用</li><li>处理递归调用</li><li>表达式的转换与求值</li><li>二叉树的遍历</li><li>图形的深度优先搜索法</li></ul><h4 id="常用方法：-3"><a href="#常用方法：-3" class="headerlink" title="常用方法："></a>常用方法：</h4><ul><li><p><code>E push(E item)</code>：将元素 item 压入栈。返回值是 item 自己</p></li><li><p><code>E pop()</code>：让栈顶元素出栈</p></li><li><p><code>E peek()</code>：仅获取栈顶元素</p></li><li><p><code>int search(Object o)</code>：查找该元素最后出现的位置。</p><p>栈底为 1，栈顶为 size()，不存在返回 -1</p></li></ul><h4 id="栈模拟计算器"><a href="#栈模拟计算器" class="headerlink" title="栈模拟计算器"></a>栈模拟计算器</h4><blockquote><p>使用栈结构完成对计算器的实现</p></blockquote><p>要进行计算，需要获得表达式。</p><p>表达式分为三种：</p><ul><li><p><strong>中缀表达式：</strong></p><p>中缀表达式即生活中常见的运算表达式。比如：(3 + 4) * 5 - 6</p><p>中缀表达式是人最熟悉的。但是对于计算机来说却不好操作。因此，计算时常将其转化为其他表达式进行操作。</p></li><li><p><strong>前缀表达式：</strong></p><p>前缀表达式（波兰表达式）是一种没有括号的表达式。其将运算符写在前面，操作数写在后面</p><blockquote><p>(3 + 4) * 5 - 6 的前缀表达式为： + 3 * 4 - 5 6</p><p>(1 + 2) * (3 + 4) 的前缀表达式为：* + 1 2 + 3 4</p></blockquote><p>前缀表达式的计算机求值：</p><ul><li>从<strong>右</strong>向<strong>左</strong>扫描表达式</li><li>将数字压入堆栈</li><li>遇到运算符的场合，对数字栈顶元素与次顶元素进行计算，并把那个结果入栈</li><li>重复该操作，最终数字栈的唯一剩余数字即为运算结果</li></ul></li><li><p><strong>后缀表达式：</strong></p><p>后缀表达式（逆波兰表达式）与前缀表达式相似。但其运算符位于操作数之后</p><blockquote><p>(3 + 4) * 5 - 6 的后缀表达式为： 3 4 + 5 * 6 -</p><p>(1 + 2) * (3 + 4) 的后缀表达式为：1 2 + 3 4 + *</p></blockquote><p>后缀表达式的计算机求值：</p><ul><li>从<strong>左</strong>向<strong>右</strong>扫描表达式</li><li>将数字压入堆栈</li><li>遇到运算符的场合，对数字栈顶元素与次顶元素进行计算，并把那个结果入栈</li><li>重复该操作，最终数字栈的唯一剩余数字即为运算结果</li></ul></li></ul><p>对于人类来说，中缀表达式最为熟悉。但对于计算机来说，前缀、后缀表达式更容易识别。</p><p>我们可以将中缀表达式转化为后缀表达式，再进行运算。</p><p><strong>中缀表达式转换为后缀表达式：</strong></p><ol><li><p>初始化两个栈：运算符栈 operator_stack、表达式栈 formula_stack</p></li><li><p>从左到右扫描中缀表达式</p></li><li><p>遇到操作数时，将其压入表达式栈 formula_stack</p></li><li><p>遇到运算符时，比较其与 operator_stack 栈顶运算符的优先级。</p><ul><li>operator_stack 为空，或栈顶为 <code>(</code> 的场合，让运算符入栈</li><li>优先级高于栈顶运算符的场合，让其入栈</li><li>优先级低于或等于栈顶运算符的场合，将那个堆顶运算符弹出并压入 formula_stack。之后，重复该步骤。</li></ul></li><li><p>遇到括号时：</p><ul><li>遇到 <code>(</code> 时，压入 operator_stack</li><li>遇到 <code>)</code> 时，直到遇到 <code>(</code> 前，依次弹出 operator_stack 堆顶的运算符，并压入 formula_stack。之后将这一对括号丢弃。</li></ul></li><li><p>到达表达式最右边时，依次弹出 operator_stack 堆顶的运算符，压入 formula_stack。</p></li><li><p>此时，formula_stack 即为后缀表达式。</p><p>使用 Java 的 toArray 方法将其转为数组。或将其依次弹出，并逆序输出。</p></li></ol><p><strong>计算器的实现：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line">class Calculator &#123;</span><br><span class="line">    private static final Map&lt;Character, Integer&gt; priority = new HashMap&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    static &#123;</span><br><span class="line">        priority.put(&#x27;+&#x27;, 1);</span><br><span class="line">        priority.put(&#x27;-&#x27;, 1);</span><br><span class="line">        priority.put(&#x27;*&#x27;, 2);</span><br><span class="line">        priority.put(&#x27;/&#x27;, 2);</span><br><span class="line">        priority.put(&#x27;×&#x27;, 2);</span><br><span class="line">        priority.put(&#x27;÷&#x27;, 2);</span><br><span class="line">        priority.put(&#x27;(&#x27;, -100);</span><br><span class="line">        priority.put(&#x27;)&#x27;, -10);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public static double calculate(String formula) &#123;</span><br><span class="line">        String[] ss = formula.split(&quot; &quot;);</span><br><span class="line">        Stack&lt;String&gt; operator_stack = new Stack&lt;&gt;();</span><br><span class="line">        Stack&lt;String&gt; formula_stack = new Stack&lt;&gt;();</span><br><span class="line">        for (String s : ss) &#123;</span><br><span class="line">            if (s.matches(&quot;\\d+([.]\\d+)?&quot;)) &#123;</span><br><span class="line">                formula_stack.push(s);</span><br><span class="line">                continue;</span><br><span class="line">            &#125; else if (operator_stack.empty() || s.equals(&quot;(&quot;)) &#123;</span><br><span class="line">                operator_stack.push(s);</span><br><span class="line">                continue;</span><br><span class="line">            &#125;</span><br><span class="line">            String temp = operator_stack.peek();</span><br><span class="line">            while (priority.get(s.charAt(0)) &lt;= priority.get(temp.charAt(0))) &#123;</span><br><span class="line">                formula_stack.push(operator_stack.pop());</span><br><span class="line">                if (operator_stack.empty()) break;</span><br><span class="line">                temp = operator_stack.peek();</span><br><span class="line">            &#125;</span><br><span class="line">            if (s.equals(&quot;)&quot;)) &#123;</span><br><span class="line">                operator_stack.pop();</span><br><span class="line">            &#125; else operator_stack.push(s);</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        while (!operator_stack.empty()) &#123;</span><br><span class="line">            formula_stack.push(operator_stack.pop());</span><br><span class="line">        &#125;</span><br><span class="line">        return anti_Poland(String.join(&quot; &quot;, formula_stack.toArray(new String[]&#123;&#125;)));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    private static double anti_Poland(String formula) &#123;</span><br><span class="line">        String[] ss = formula.split(&quot; &quot;);</span><br><span class="line">        Stack&lt;Double&gt; ns = new Stack&lt;&gt;();</span><br><span class="line">        for (String s : ss) &#123;</span><br><span class="line">            try &#123;</span><br><span class="line">                double num = Double.parseDouble(s);</span><br><span class="line">                ns.push(num);</span><br><span class="line">            &#125; catch (Exception e) &#123;</span><br><span class="line">                switch (s) &#123;</span><br><span class="line">                    case &quot;+&quot;:</span><br><span class="line">                        ns.push(ns.pop() + ns.pop());</span><br><span class="line">                        break;</span><br><span class="line">                    case &quot;*&quot;:</span><br><span class="line">                    case &quot;×&quot;:</span><br><span class="line">                        ns.push(ns.pop() * ns.pop());</span><br><span class="line">                        break;</span><br><span class="line">                    case &quot;/&quot;:</span><br><span class="line">                    case &quot;÷&quot;:</span><br><span class="line">                        ns.push(1 / ns.pop() * ns.pop());</span><br><span class="line">                        break;</span><br><span class="line">                    case &quot;-&quot;:</span><br><span class="line">                        ns.push(-ns.pop() + ns.pop());</span><br><span class="line">                        break;</span><br><span class="line">                    default:</span><br><span class="line">                        throw new RuntimeException(&quot;Illegal operator&quot;);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        return ns.pop();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="跳表-SkipList"><a href="#跳表-SkipList" class="headerlink" title="跳表 SkipList"></a>跳表 SkipList</h3><p>跳表是一种特殊的链表。普通的链表虽然添加、删除节点的速度很快（O(1)），但是要查找节点却很慢（O(n)）。跳表是一个多层次的链表，其在链表的基础上增加了多级索引，实现了 O(㏒n) 的查找速度。</p><p><a href="https://i-melody.github.io/img/Java_InputImage/13_3_6%20%E8%B7%B3%E8%A1%A8%E5%9B%BE.jpg"><img src="https://i-melody.github.io/img/Java_InputImage/13_3_6%20%E8%B7%B3%E8%A1%A8%E5%9B%BE.jpg"></a></p><p><em>（13_3_6 跳表图）</em></p><p>跳表将原本数据层的数据按照一定间隔抽取节点形成索引层，之后再从索引层抽取节点形成第二级索引，以此类推形成多层索引。</p><p>跳表的查询速度得到了优化，但占用空间更大。本质上是一种空间换时间的做法。</p><p><strong>查询</strong></p><p>从最稀疏的索引层（最上层）开始，确定那个待查找数据所在的范围，逐层向下并确定范围，直至数据层。</p><p><strong>增删</strong></p><p>删除元素时，如果那个元素是索引元素，那些索引也会被删除。同时，如果只向数据层中增加元素，可能使索引间隔过大，从而降低查找效率。如果在增加元素时还能保持索引数量的动态平衡，就能防止跳表退化，保持跳表效率。</p><p>跳表给出的解决方案是：在增加元素时产生一个随机值，让这个随机值决定该新节点是否成为索引节点，以及成为几级索引节点。</p><p><strong>实现跳表</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br></pre></td><td class="code"><pre><span class="line">class Skiplist &#123;</span><br><span class="line">    private final int level;// 该跳表的合计层数，包括数据层和索引层</span><br><span class="line">    private final Random seed;// 随机数种子</span><br><span class="line">    private final Node root;// 链表开头</span><br><span class="line">    private final Node end;// 链表结尾</span><br><span class="line"></span><br><span class="line">    private static class Node &#123;// 链表节点类</span><br><span class="line">        int val;// 值</span><br><span class="line">        int count;// 储存的值的数量</span><br><span class="line">        Node[] next;// 指向的下一节点</span><br><span class="line">        Node[] prev;// 指向的上一节点</span><br><span class="line">        // 需要指出的是：next 和 prev 的长度指示了节点所在的最高层级</span><br><span class="line">        // 长度为 1 时仅处在数据层，2 时也位于一级索引，以此类推</span><br><span class="line">        // 也就是说，next 和 prev 里，下标 0 的位置位于数据层，1 位于一级索引层</span><br><span class="line"></span><br><span class="line">        /* 三个参数是：值 val，节点的层级 rand，节点储存值的数量 count */</span><br><span class="line">        Node(int val, int rand, int count) &#123;</span><br><span class="line">            this.val = val;</span><br><span class="line">            this.count = count;</span><br><span class="line">            next = new Node[rand];</span><br><span class="line">            prev = new Node[rand];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /* 构造器 */</span><br><span class="line">    public Skiplist() &#123;</span><br><span class="line">        this(4);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /* 有参构造器。输入的值是索引层数量。该值至少应为 1 */</span><br><span class="line">    public Skiplist(int level) &#123;</span><br><span class="line">        if (level &lt; 1 || level &gt; 30)</span><br><span class="line">            throw new RuntimeException(level == 0 ?</span><br><span class="line">                    &quot;Why not choose a LinkedList?&quot; :</span><br><span class="line">                    &quot;SkipList level out of range: given &quot; + level + &quot; out of range [1, 30]&quot;);</span><br><span class="line">        this.level = level + 1;</span><br><span class="line">        this.seed = new Random(System.currentTimeMillis());</span><br><span class="line">        root = new Node(Integer.MIN_VALUE, this.level, 0);</span><br><span class="line">        end = new Node(Integer.MAX_VALUE, this.level, 0);</span><br><span class="line">        for (int n = 0; n &lt; this.level; n++) &#123;</span><br><span class="line">            root.next[n] = end;</span><br><span class="line">            end.prev[n] = root;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /* 查询一个值是否存在 */</span><br><span class="line">    public boolean search(int target) &#123;</span><br><span class="line">        Node find = position(target);</span><br><span class="line">        return find.val == target &amp;&amp; find.count &gt; 0;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /* 搜索一个值的位置。不存在时会返回数据层中前一个节点的位置 */</span><br><span class="line">    private Node position(int target) &#123;</span><br><span class="line">        Node see = root;</span><br><span class="line">        while (true) &#123;</span><br><span class="line">            if (see.val == target) return see;</span><br><span class="line">            for (int n = see.next.length - 1; ; n--) &#123;</span><br><span class="line">                if (n &lt; 0) return see;</span><br><span class="line">                else if (see.next[n].val &lt;= target) &#123;</span><br><span class="line">                    see = see.next[n];</span><br><span class="line">                    break;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /* 添加一个值 */</span><br><span class="line">    public void add(int num) &#123;</span><br><span class="line">        Node pos = position(num);</span><br><span class="line">        if (pos.val == num) &#123;// 如果这个节点已经建立，就仅使该节点计数增加</span><br><span class="line">            pos.count++;</span><br><span class="line">            return;</span><br><span class="line">        &#125;</span><br><span class="line">        int rand = 1 + level - Integer.toBinaryString(seed.nextInt(1 &lt;&lt; level)).length();</span><br><span class="line">        // level 的值等于总层数。seed 是一个随机数种子，nextInt(int n) 方法返回 [0, n) 的数值</span><br><span class="line">        // Integer.toBinaryString(int n) 方法是将一个数字转化成二进制表示的字符串</span><br><span class="line">        // seed.nextInt(1 &lt;&lt; level) 保证了返回值的二进制长度在 [1, level] 之间，并且概率合意</span><br><span class="line">        Node add = new Node(num, rand, 1);</span><br><span class="line">        for (int t = 0; t &lt; rand; ) &#123;// 将新节点添加到链表中。</span><br><span class="line">            for (; t &lt; pos.next.length &amp;&amp; t &lt; rand; t++) &#123;</span><br><span class="line">                Node next = pos.next[t];</span><br><span class="line">                add.next[t] = next;</span><br><span class="line">                next.prev[t] = add;</span><br><span class="line">                pos.next[t] = add;</span><br><span class="line">                add.prev[t] = pos;</span><br><span class="line">            &#125;</span><br><span class="line">            pos = pos.prev[pos.prev.length - 1];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /* 删除节点（的值） */</span><br><span class="line">    public boolean erase(int num) &#123;</span><br><span class="line">        Node pos = position(num);</span><br><span class="line">        if (pos.val == num &amp;&amp; pos.count &gt; 0) &#123;</span><br><span class="line">            pos.count--;</span><br><span class="line">            return true;</span><br><span class="line">        &#125; else return false;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="队列接口-Queue"><a href="#队列接口-Queue" class="headerlink" title="队列接口 Queue"></a>队列接口 Queue</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">public interface Queue&lt;E&gt; extends Collection&lt;E&gt;</span><br></pre></td></tr></table></figure><blockquote><p>Queue 是 Collection 的子接口</p><p>Queue 的实现子类都是队列式集合。队列是一个有序列表，可以用数组或链表来实现</p><p>队列遵循先入先出的原则。队列中元素是以添加顺序取出的。</p><p>向队列中增加元素称为<strong>入列</strong>（push），取出元素称为<strong>出列</strong>（pop）</p></blockquote><p><a href="https://i-melody.github.io/img/Java_InputImage/%E9%98%9F%E5%88%97%E5%9B%BE_13.4.png"><img src="https://i-melody.github.io/img/Java_InputImage/%E9%98%9F%E5%88%97%E5%9B%BE_13.4.png"></a></p><h3 id="常用方法：-4"><a href="#常用方法：-4" class="headerlink" title="常用方法："></a>常用方法：</h3><ul><li><p><code>add(E e)</code>：添加元素。队列满的场合抛出异常</p><p><code>put(E e)</code>：添加元素。队列满的场合可能阻塞</p><p><code>boolean offer(E e)</code>：添加元素。队列满的场合返回 false</p></li><li><p><code>E remove()</code>：移除并返回队列头部元素。队列空的场合抛出异常</p><p><code>E poll()</code>：移除并返回队列头部元素</p><p><code>E take()</code>：移除并返回队列头部元素。队列空的场合可能阻塞</p></li><li><p><code>E peek()</code>：仅返回队列头部元素。为空时返回 null</p><p><code>E element()</code>：仅返回队列头部元素。为空时抛出异常</p></li></ul><h3 id="优先级队列-PriorityQueue"><a href="#优先级队列-PriorityQueue" class="headerlink" title="优先级队列 PriorityQueue"></a>优先级队列 PriorityQueue</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">public class PriorityQueue&lt;E&gt; extends AbstractQueue&lt;E&gt;</span><br><span class="line">    implements java.io.Serializable</span><br></pre></td></tr></table></figure><blockquote><p>PriorityQueue 是一个无界优先级队列。底层以数组储存元素。</p><p>无界队列：即没有范围限制的队列。</p><p>PriorityQueue 不允许 null 元素，也不允许不可比较的元素。</p><p>PriorityQueue 中的元素以自然顺序，或传入的比较器决定的顺序排序。其中的最小元素位于队头，最大元素位于队尾。</p><p>以迭代器遍历时，会按照原本的放入顺序获取元素。PriorityQueue 的源码：</p></blockquote><ol><li><p>底层维护了一个 Object 类型的数组 queue。用以存放元素</p><p>另维护了一个比较器 comparator，用以比较元素</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">transient Object[] queue;</span><br><span class="line">private final Comparator&lt;? super E&gt; comparator;</span><br></pre></td></tr></table></figure></li><li><p>默认构造器初始容量为 11，比较器为 null</p><p>也能指定初始容量，或传入比较器</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">public PriorityQueue() &#123;</span><br><span class="line">    this(DEFAULT_INITIAL_CAPACITY, null);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public PriorityQueue(int initialCapacity) &#123;</span><br><span class="line">    this(initialCapacity, null);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public PriorityQueue(Comparator&lt;? super E&gt; comparator) &#123;</span><br><span class="line">    this(DEFAULT_INITIAL_CAPACITY, comparator);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public PriorityQueue(int initialCapacity,</span><br><span class="line">                     Comparator&lt;? super E&gt; comparator) &#123;</span><br><span class="line">    if (initialCapacity &lt; 1)</span><br><span class="line">        throw new IllegalArgumentException();</span><br><span class="line">    this.queue = new Object[initialCapacity];</span><br><span class="line">    this.comparator = comparator;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>放入时依靠比较器 comparator 进行排序。</p><p>那个比较器为 null 的场合，每次放入元素会按元素自身的自然顺序进行排序。</p><p>不能排序的场合会抛出异常。</p></li><li><p>扩容时，容量小于 64 的场合容量变为 2 倍 + 2。否则那个容量变为 1.5 倍</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">private void grow(int minCapacity) &#123;</span><br><span class="line">        int oldCapacity = queue.length;</span><br><span class="line">        int newCapacity = oldCapacity + ((oldCapacity &lt; 64) ?</span><br><span class="line">                                         (oldCapacity + 2) :</span><br><span class="line">                                         (oldCapacity &gt;&gt; 1));</span><br><span class="line">        if (newCapacity - MAX_ARRAY_SIZE &gt; 0)</span><br><span class="line">            newCapacity = hugeCapacity(minCapacity);</span><br><span class="line">        queue = Arrays.copyOf(queue, newCapacity);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></li></ol><h3 id="阻塞队列接口-BlockingQueue"><a href="#阻塞队列接口-BlockingQueue" class="headerlink" title="阻塞队列接口 BlockingQueue"></a>阻塞队列接口 BlockingQueue</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">public interface BlockingQueue&lt;E&gt; extends Queue&lt;E&gt;</span><br></pre></td></tr></table></figure><blockquote><p>BlockingQueue 是一个接口，其实现子类都是阻塞队列。</p><p>阻塞队列：</p><ul><li>元素入列时，那个队列已满的场合，会进行等待。直到有元素出列后，元素数量未超过队列总数时，解除阻塞状态，进而继续入列。</li><li>元素出列时，如果队列为空，则会进行等待。直到有元素入列时，解除阻塞状态，进而继续出列。</li><li>阻塞队列能防止容器溢出。只要是阻塞队列，就是线程安全的队列。</li><li>阻塞队列不接受 null 元素</li></ul><p>BlockingQueue 的常用实现子类有：</p><ul><li>ArrayBlockingQueue：底层以数组存放元素的有界阻塞队列</li><li>LinkedBlockingQueue：底层以链表存放元素的可选边界的阻塞队列</li><li>PriorityBlockingQueue：无界阻塞队列，与 PriorityQueue 排序方式相同</li></ul></blockquote><h4 id="常用方法：-5"><a href="#常用方法：-5" class="headerlink" title="常用方法："></a>常用方法：</h4><p>实际上，其常用方法能分为几类：</p><table><thead><tr><th></th><th>抛出异常</th><th>特殊值</th><th>阻塞</th><th>等待</th></tr></thead><tbody><tr><td>插入</td><td>add(e)</td><td>offer(e)</td><td>put(e)</td><td>offer(e, time, unit)</td></tr><tr><td>删除</td><td>remove()</td><td>poll()</td><td>take()</td><td>take(time, unit)</td></tr><tr><td>查找</td><td>element()</td><td>peek()</td><td>-</td><td>-</td></tr></tbody></table><h2 id="双列集合接口-Map"><a href="#双列集合接口-Map" class="headerlink" title="双列集合接口 Map"></a>双列集合接口 Map</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">public interface Map&lt;K,V&gt;</span><br></pre></td></tr></table></figure><p><strong>以下关于 Map 接口的描述，适用于 JDK 8 的环境</strong></p><blockquote><p>Map 与 Collection 并列存在，用于保存具有映射关系的数据：key - value（双列元素）</p><p>Map 的 key 和 value 可以是任何类型的引用数据类型，也能存入 null。</p><p>Map 的 key 不允许重复，value 可以重复。key 和 value 存在单一对应关系。通过特定的 key 一定能找到指定的 value。</p><p>一组 k - v 会被封装到一个 Entry 对象中。Entry 是一个内部接口。Map 的实现子类中都包含一个实现这个接口的内部类。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">interface Entry&lt;K,V&gt; &#123;</span><br><span class="line">K getKey();</span><br><span class="line">V getValue();</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果添加相同的 key，会覆盖原先的 key -value。等同于修改（key 不会替换，value 会被替换）</p></blockquote><h4 id="常用方法：-6"><a href="#常用方法：-6" class="headerlink" title="常用方法："></a>常用方法：</h4><ul><li><p><code>put()</code>：添加。已存在的场合，实行替换。（key 不替换，value 替换）</p></li><li><p><code>remove()</code>：根据键删除映射关系</p></li><li><p><code>get()</code>：根据键获取值</p></li><li><p><code>size()</code>：元素个数</p></li><li><p><code>isEmpty()</code>：判断个数是否为 0</p></li><li><p><code>clear()</code>：清空</p></li><li><p><code>containsKey()</code>：查找键是否存在</p></li><li><p><code>Set&lt;K&gt; keySet()</code>：获取所有 键 构成的集合</p><p><code>Set&lt;Map.Entry&lt;K,V&gt;&gt; entrySet()</code>：获取所有 Entry 构成的集合</p><p><code>Collection&lt;V&gt; values()</code>：获取所有 值 构成的集合</p></li></ul><h4 id="Map-接口遍历元素："><a href="#Map-接口遍历元素：" class="headerlink" title="Map 接口遍历元素："></a>Map 接口遍历元素：</h4><ul><li><p><strong>方法一</strong>：利用 <code>Set&lt;K&gt; keySet()</code> 方法</p><p>先得到所有 keys，再遍历 keys，根据每个 key 获得 value：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Set keyset = map.keySet();</span><br><span class="line">for (Object o : keyset) &#123;</span><br><span class="line">System.out.println(o + &quot; = &quot; + map.get(o));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><strong>方法二</strong>：利用 <code>Set&lt;V&gt; values()</code> 方法</p><p>直接把所有 values 取出，之后遍历 values</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Collection values = map.values();</span><br><span class="line">for (Object value : values) &#123;</span><br><span class="line">System.out.println(value);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><strong>方法三</strong>：利用 <code>Set&lt;Map.Entry&lt;K,V&gt;&gt; entrySet()</code> 方法</p><p>通过获取 entrySet 来获取 k - v</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Set&lt;Map.Entry&gt; entrySet = map.entrySet();</span><br><span class="line">for (Map.Entry e : entrySet) &#123;</span><br><span class="line">System.out.println(e.getKey() + &quot; - &quot; + e.getValue());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="散列表-HashMap"><a href="#散列表-HashMap" class="headerlink" title="散列表 HashMap"></a>散列表 HashMap</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">public class HashMap&lt;K,V&gt; extends AbstractMap&lt;K,V&gt;</span><br><span class="line">    implements Map&lt;K,V&gt;, Cloneable, Serializable</span><br></pre></td></tr></table></figure><blockquote><p>HashMap 是 Map 接口使用频率最高的实现类。是根据关键码值（key value）而进行直接访问的数据结构。通过将关键码值映射到表中一个位置来访问记录，以加快查找速度。</p><p>那个映射函数叫做散列函数，存放记录的数组叫做散列表（哈希表）</p><p>HashMap 是以 k - v 对得到方式来存储数据。一组数据会被封装到一个 Node 对象中。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">static class Node&lt;K,V&gt; implements Map.Entry&lt;K,V&gt; &#123;</span><br><span class="line"> final int hash;</span><br><span class="line"> final K key;</span><br><span class="line"> V value;</span><br><span class="line"> Node&lt;K,V&gt; next;</span><br><span class="line"></span><br><span class="line"> ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>JDK 7 前，HashMap 底层是 数组 + 链表。JDK 8 后，底层是 数组 + 链表 + 红黑树。HashMap 不保证映射的顺序。</p><p>HashMap 没有实现同步（没有 synchronized），是线程不安全的</p></blockquote><h4 id="HashMap-的源码："><a href="#HashMap-的源码：" class="headerlink" title="HashMap 的源码："></a>HashMap 的源码：</h4><ol><li><p>HashMap 底层维护了 Node 类型的数组 table。默认为 null</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">transient Node&lt;K,V&gt;[] table;</span><br></pre></td></tr></table></figure><p>另外，还有集合 values、keySet、enrtySet。这些集合能帮助程序员进行遍历</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">transient Set&lt;K&gt;keySet;</span><br><span class="line">transient Collection&lt;V&gt;values;</span><br><span class="line">transient Set&lt;Map.Entry&lt;K,V&gt;&gt;entrySet;</span><br></pre></td></tr></table></figure></li><li><p>创建对象时，默认构造器将加载因子（loadfactor）初始化为 0.75。</p><p>也能指定那些初始容量和加载因子。</p><p>默认构造器第一次添加元素的场合，table 扩容为 16，临界值为 16 * 0.75 &#x3D; 12。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">static final float DEFAULT_LOAD_FACTOR = 0.75f;</span><br><span class="line">static final int MAXIMUM_CAPACITY = 1 &lt;&lt; 30;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">public HashMap() &#123;</span><br><span class="line">    this.loadFactor = DEFAULT_LOAD_FACTOR;// 这个默认构造的场合，其他参数都是默认值</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public HashMap(int initialCapacity) &#123;</span><br><span class="line">    this(initialCapacity, DEFAULT_LOAD_FACTOR);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public HashMap(int initialCapacity, float loadFactor) &#123;</span><br><span class="line">    if (initialCapacity &lt; 0)</span><br><span class="line">        throw new IllegalArgumentException(...);</span><br><span class="line">    if (initialCapacity &gt; MAXIMUM_CAPACITY)</span><br><span class="line">        initialCapacity = MAXIMUM_CAPACITY;</span><br><span class="line">    if (loadFactor &lt;= 0 || Float.isNaN(loadFactor))</span><br><span class="line">        throw new IllegalArgumentException(...);</span><br><span class="line">    this.loadFactor = loadFactor;</span><br><span class="line">    this.threshold = tableSizeFor(initialCapacity);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>添加时容量不够的场合，需要扩容。</p><p>默认构造器第一次添加元素的场合，table 扩容为 16，临界值为 16 * 0.75 &#x3D; 12。</p><p>扩容的场合，容量变为 2 倍。临界值相应变化。</p><p>临界值不会超过那个指定的 MAXIMUM_CAPACITY（1 &lt;&lt; 30），否则变成 Integer.MAX_VALUE。</p><p>JDK 8 中，如果一条链表的元素个数超过 TREEIFY_THRESHOLD（默认是 8），并且 <code>table</code> 的大小 &gt;&#x3D; MIN_TREEIFY_CAPACITY（默认 64），会进行树化。</p><p>剪枝：红黑树的元素减少到一定程度，会被重新转化为 链表</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br></pre></td><td class="code"><pre><span class="line">static final int MAXIMUM_CAPACITY = 1 &lt;&lt; 30;</span><br><span class="line">static final int DEFAULT_INITIAL_CAPACITY = 1 &lt;&lt; 4;</span><br><span class="line"></span><br><span class="line">final Node&lt;K,V&gt;[] resize() &#123;</span><br><span class="line">    Node&lt;K,V&gt;[] oldTab = table;// &lt;- 旧的数据数组 table</span><br><span class="line">    int oldCap = (oldTab == null) ? 0 : oldTab.length;// &lt;- 旧的 table 的容量</span><br><span class="line">    int oldThr = threshold;// &lt;- 旧的临界值</span><br><span class="line">    int newCap, newThr = 0;// &lt;- 新的容量、临界值</span><br><span class="line">    </span><br><span class="line">    /* 旧的数组不为空时，</span><br><span class="line">    如果容量已达指定的 MAXIMUM_CAPACITY，则不扩容</span><br><span class="line">    否则扩容为 2 倍容量，临界值也变为 2 倍 */</span><br><span class="line">    if (oldCap &gt; 0) &#123;</span><br><span class="line">        newCap = oldCap &lt;&lt; 1;</span><br><span class="line">        if (oldCap &gt;= MAXIMUM_CAPACITY) &#123;</span><br><span class="line">            threshold = Integer.MAX_VALUE;</span><br><span class="line">            return oldTab;</span><br><span class="line">        &#125;</span><br><span class="line">        else if (newCap &lt; MAXIMUM_CAPACITY &amp;&amp; oldCap &gt;= DEFAULT_INITIAL_CAPACITY)</span><br><span class="line">            newThr = oldThr &lt;&lt; 1;</span><br><span class="line">    &#125;</span><br><span class="line">    /* 旧的数组为空，但临界值已被指定（原因是：指定构造器传入初始容量为 0） */</span><br><span class="line">    else if (oldThr &gt; 0)</span><br><span class="line">        newCap = oldThr;</span><br><span class="line">    /* 旧的数组为空，临界值为 0（原因是：使用默认构造器）</span><br><span class="line">    默认构造器初始化容量为 16，默认临界因子为 0.75f */</span><br><span class="line">    else &#123;</span><br><span class="line">        newCap = DEFAULT_INITIAL_CAPACITY;</span><br><span class="line">        newThr = (int)(DEFAULT_LOAD_FACTOR * DEFAULT_INITIAL_CAPACITY);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    /* 到这里，newThr（新临界值）为 0 的原因可能是：</span><br><span class="line">    1. 旧容量小于那个最小容量（16）</span><br><span class="line">    2. 扩容后容量大于那个最大容量</span><br><span class="line">    3. 旧的临界值为 0 或 Integer.MIN_VALUE</span><br><span class="line">    4. 构造器传入初始容量为 0 */</span><br><span class="line">    if (newThr == 0) &#123;</span><br><span class="line">        /* 按照 新容量 * 临界因子 的方法计算临界值。临界值不会超过一个指定的最大值 */</span><br><span class="line">        float ft = (float)newCap * loadFactor;</span><br><span class="line">        newThr = (newCap &lt; MAXIMUM_CAPACITY &amp;&amp; ft &lt; (float)MAXIMUM_CAPACITY ?</span><br><span class="line">                  (int)ft : Integer.MAX_VALUE);</span><br><span class="line">    &#125;</span><br><span class="line">    threshold = newThr;</span><br><span class="line">    </span><br><span class="line">    /* 确定了容量和临界值，下面把旧数组元素移至新数组。</span><br><span class="line">    那个移动的场合，会以新容量重新计算所有元素的下标位置 */</span><br><span class="line">    Node&lt;K,V&gt;[] newTab = (Node&lt;K,V&gt;[])new Node[newCap];</span><br><span class="line">    table = newTab;</span><br><span class="line">    if (oldTab != null) &#123;</span><br><span class="line">        for (int j = 0; j &lt; oldCap; ++j) &#123;</span><br><span class="line">            Node&lt;K,V&gt; e;</span><br><span class="line">            if ((e = oldTab[j]) != null) &#123;</span><br><span class="line">                oldTab[j] = null;</span><br><span class="line">                if (e.next == null)</span><br><span class="line">                    newTab[e.hash &amp; (newCap - 1)] = e;</span><br><span class="line">                else if (e instanceof TreeNode)</span><br><span class="line">                    ((TreeNode&lt;K,V&gt;)e).split(this, newTab, j, oldCap);</span><br><span class="line">                else &#123;</span><br><span class="line">                    Node&lt;K,V&gt; loHead = null, loTail = null;</span><br><span class="line">                    Node&lt;K,V&gt; hiHead = null, hiTail = null;</span><br><span class="line">                    Node&lt;K,V&gt; next;</span><br><span class="line">                    do &#123;</span><br><span class="line">                        next = e.next;</span><br><span class="line">                        if ((e.hash &amp; oldCap) == 0) &#123;</span><br><span class="line">                            if (loTail == null)</span><br><span class="line">                                loHead = e;</span><br><span class="line">                            else</span><br><span class="line">                                loTail.next = e;</span><br><span class="line">                            loTail = e;</span><br><span class="line">                        &#125;</span><br><span class="line">                        else &#123;</span><br><span class="line">                            if (hiTail == null)</span><br><span class="line">                                hiHead = e;</span><br><span class="line">                            else</span><br><span class="line">                                hiTail.next = e;</span><br><span class="line">                            hiTail = e;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125; while ((e = next) != null);</span><br><span class="line">                    if (loTail != null) &#123;</span><br><span class="line">                        loTail.next = null;</span><br><span class="line">                        newTab[j] = loHead;</span><br><span class="line">                    &#125;</span><br><span class="line">                    if (hiTail != null) &#123;</span><br><span class="line">                        hiTail.next = null;</span><br><span class="line">                        newTab[j + oldCap] = hiHead;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    return newTab;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>添加 k - v 时，通过 key 的哈希值得到其在 table 的索引，判断索引位置是否被占用。</p><p>未占用的场合，直接添加。</p><p>占用的场合，判断其 key 是否相等。相等的场合，替换 value。否则，按照 树 或 链表 的方式处理。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br></pre></td><td class="code"><pre><span class="line">public V put(K key, V value) &#123;</span><br><span class="line">    return putVal(hash(key), key, value, false, true);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">/* 会先对放入元素的哈希值进行一次计算，得到一个数字：hash */</span><br><span class="line">static final int hash(Object key) &#123;</span><br><span class="line">    int h = key.hashCode();</span><br><span class="line">    return (key == null) ? 0 : (h ^ (h &gt;&gt;&gt; 16));// 位运算符：&gt;&gt;&gt; 无符号右移</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">/* put 方法会调用该 putVal 方法。</span><br><span class="line">那些传入值是：hash、key、value、false、true */</span><br><span class="line">final V putVal(int hash, K key, V value, boolean onlyIfAbsent, boolean evict) &#123;</span><br><span class="line">    Node&lt;K,V&gt;[] tab = table; // &lt;- 是那个存放数据的 table 数组</span><br><span class="line">    int n;// &lt;- 是 table.length</span><br><span class="line">    </span><br><span class="line">    /* 如果原先的 table 为空，则对其重新分配空间 */</span><br><span class="line">    if (tab == null || (n = tab.length) == 0) &#123;</span><br><span class="line">        tab = resize();</span><br><span class="line">        n = tab.length;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    /* 用方才计算的 hash 数，得到要放入元素的下标值 i</span><br><span class="line">    n - 1 是数据数组的最大下标，(n - 1) &amp; hash 必定不大于 n - 1 */</span><br><span class="line">    int i = (n - 1) &amp; hash;// 位运算符：&amp; 按位与</span><br><span class="line">    Node&lt;K,V&gt; p = tab[i];// 得到 table 中，位于那个插入位置的元素</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    /* 倘若该位置为空，则直接放入 */</span><br><span class="line">    if (p == null) &#123;</span><br><span class="line">        tab[i] = newNode(hash, key, value, null);</span><br><span class="line">    &#125;</span><br><span class="line">    /* 该位置不为空，意味着可能添加了重复元素 */</span><br><span class="line">    else &#123;</span><br><span class="line">        Node&lt;K,V&gt; e; // &lt;- 被发现重复的那个 Node。无重复时结果为 null。这个 Node 的 value 会被替换。</span><br><span class="line">        K k = p.key;// &lt;- 当前取出进行比较的 key 值</span><br><span class="line">        </span><br><span class="line">        /* 为了验证其是否重复，这里要进行如下比较：</span><br><span class="line">        1. 比较两者的 hash 数。不同的场合是不同元素</span><br><span class="line">        2. 使用 == 和 equals 两种方法比较 key。不同的场合是不同元素 </span><br><span class="line">        如果是相同元素，则该节点的值会被替换 */</span><br><span class="line">        if (p.hash == hash &amp;&amp; (k  == key || (key != null &amp;&amp; key.equals(k)))) &#123;</span><br><span class="line">            e = p;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        /* 此处节点结构是 树 的场合，还需遍历比较树的每个节点 */</span><br><span class="line">        else if (p instanceof TreeNode)</span><br><span class="line">            e = ((TreeNode&lt;K,V&gt;)p).putTreeVal(this, tab, hash, key, value);</span><br><span class="line">        </span><br><span class="line">        /* 此处节点结构是 链表 的场合，还需遍历比较每个链表节点 */</span><br><span class="line">        else &#123;</span><br><span class="line">            for (int binCount = 0; ; ++binCount) &#123;</span><br><span class="line">                e = p.next;</span><br><span class="line">                /* e == null 意味着遍历结束，全部不同。这样，在此处添加那个新的 Node */</span><br><span class="line">                if (e == null) &#123;</span><br><span class="line">                    p.next = newNode(hash, key, value, null);</span><br><span class="line">                    if (binCount &gt;= TREEIFY_THRESHOLD - 1) // -1 for 1st</span><br><span class="line">                        treeifyBin(tab, hash);</span><br><span class="line">                    break;</span><br><span class="line">                &#125;</span><br><span class="line">                /* 故技重施，如果发现相同，则替换那个新元素 */</span><br><span class="line">                if (e.hash == hash &amp;&amp;</span><br><span class="line">                    ((k = e.key) == key || (key != null &amp;&amp; key.equals(k)))) &#123;</span><br><span class="line">                    break;</span><br><span class="line">                &#125;</span><br><span class="line">                p = e;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        /* 经历上述比较后，e != null 意味着有元素要被替换了 */</span><br><span class="line">        if (e != null) &#123;</span><br><span class="line">            V oldValue = e.value;</span><br><span class="line">            /* 传入的参数 onluIfAbsent == false，所以此处一定是 true */</span><br><span class="line">            if (!onlyIfAbsent || oldValue == null)</span><br><span class="line">                e.value = value;</span><br><span class="line">            afterNodeAccess(e);// &lt;- HashMap 中，该方法为空实现。</span><br><span class="line">            return oldValue;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    ++modCount;</span><br><span class="line">    </span><br><span class="line">    /* 如果到达这里，说明添加了元素（而非替换），要查看大小是否超过临界值 */</span><br><span class="line">    if (++size &gt; threshold)</span><br><span class="line">        resize();</span><br><span class="line">    afterNodeInsertion(evict);// &lt;- HashMap 中，该方法为空实现。</span><br><span class="line">    return null;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">/* 上面提到的一些空实现的方法 */</span><br><span class="line">void afterNodeAccess(Node&lt;K,V&gt; p) &#123; &#125;</span><br><span class="line">void afterNodeInsertion(boolean evict) &#123; &#125;</span><br><span class="line">void afterNodeRemoval(Node&lt;K,V&gt; p) &#123; &#125;</span><br></pre></td></tr></table></figure></li></ol><h3 id="散列表-Hashtable"><a href="#散列表-Hashtable" class="headerlink" title="散列表 Hashtable"></a>散列表 Hashtable</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">public class Hashtable&lt;K,V&gt;</span><br><span class="line">    extends Dictionary&lt;K,V&gt;</span><br><span class="line">    implements Map&lt;K,V&gt;, Cloneable, java.io.Serializable</span><br></pre></td></tr></table></figure><blockquote><p>Hashtable 和 HashMap 基本一致，但Hashtable 是线程安全的 。但也因为如此，Hashtable 的效率低下。</p></blockquote><h4 id="Hashtable-与-HashMap-的比较："><a href="#Hashtable-与-HashMap-的比较：" class="headerlink" title="Hashtable 与 HashMap 的比较："></a>Hashtable 与 HashMap 的比较：</h4><table><thead><tr><th></th><th>版本</th><th>线程安全（同步）</th><th>效率</th><th>是否允许 null值</th></tr></thead><tbody><tr><td>Hashtable</td><td>1.0</td><td>安全</td><td>较低</td><td>不允许</td></tr><tr><td>HashMap</td><td>1.2</td><td>不安全</td><td>高</td><td>允许</td></tr></tbody></table><ul><li><p>Hashtable 底层也是有数组，默认构造器的初始容量为 11。临界值是 11 * 0.75 &#x3D; 8。</p></li><li><p>扩容大致如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">int newCapacity = (oldCapacity &lt;&lt; 1) + 1;//即，原容量 * 2 + 1</span><br></pre></td></tr></table></figure></li><li><p>Hashtable 不会树化</p></li></ul><h3 id="红黑树-TreeMap"><a href="#红黑树-TreeMap" class="headerlink" title="红黑树 TreeMap"></a>红黑树 TreeMap</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">public class TreeMap&lt;K,V&gt;</span><br><span class="line">    extends AbstractMap&lt;K,V&gt;</span><br><span class="line">    implements NavigableMap&lt;K,V&gt;, Cloneable, java.io.Serializable</span><br></pre></td></tr></table></figure><blockquote><p>TreeMap 实现了 Map 接口。底层使用 红黑树 存储数据。</p><p>相较数组（访问快，检索、插入慢）和链表（插入快，检索、访问慢），树形数据结构（如二叉排序树）在保证数据检索速度的同时，也能保证数据插入、删除、修改的速度</p></blockquote><p><strong><em>——见 [[14 树]])</em></strong></p><h4 id="TreeMap-的源码："><a href="#TreeMap-的源码：" class="headerlink" title="TreeMap 的源码："></a>TreeMap 的源码：</h4><ol><li><p>TreeMap 底层维护了一个二叉树，以及一个比较器</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">private final Comparator&lt;? super K&gt; comparator;</span><br><span class="line"></span><br><span class="line">private transient Entry&lt;K,V&gt; root;</span><br></pre></td></tr></table></figure></li><li><p>创建对象时，能采用无参构造，也能指定比较器完成构造</p><p>那个无参构造的场合，比较器为空。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">public TreeMap() &#123;</span><br><span class="line">    comparator = null;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public TreeMap(Comparator&lt;? super K&gt; comparator) &#123;</span><br><span class="line">    this.comparator = comparator;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>比较器如果为空，则要求传入的 key 必须是 Comparable 接口的实现子类，否则无法进行比较。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">final int compare(Object k1, Object k2) &#123;</span><br><span class="line">    return comparator==null ? ((Comparable&lt;? super K&gt;)k1).compareTo((K)k2)</span><br><span class="line">        : comparator.compare((K)k1, (K)k2);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>添加时，通过比较器确定那个添加位置。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line">public V put(K key, V value) &#123;</span><br><span class="line">    Entry&lt;K,V&gt; t = root;// &lt;- 树的根节点</span><br><span class="line">    </span><br><span class="line">    /* 二叉树为空的场合，创建根节点，将数据放入 */</span><br><span class="line">    if (t == null) &#123;</span><br><span class="line">        compare(key, key);</span><br><span class="line">        root = new Entry&lt;&gt;(key, value, null);</span><br><span class="line">        size = 1;</span><br><span class="line">        modCount++;</span><br><span class="line">        return null;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    int cmp;// &lt;- 临时值，存放比较结果</span><br><span class="line">    Entry&lt;K,V&gt; parent;// &lt;- 临时值，存放父节点</span><br><span class="line">    Comparator&lt;? super K&gt; cpr = comparator;// &lt;- 比较器</span><br><span class="line">    </span><br><span class="line">    /* 有比较器的场合，按照这个方法进行比较 */</span><br><span class="line">    if (cpr != null) &#123;</span><br><span class="line">        do &#123;</span><br><span class="line">            parent = t;</span><br><span class="line">            cmp = cpr.compare(key, t.key);</span><br><span class="line">            if (cmp &lt; 0)</span><br><span class="line">                t = t.left;</span><br><span class="line">            else if (cmp &gt; 0)</span><br><span class="line">                t = t.right;</span><br><span class="line">            else</span><br><span class="line">                return t.setValue(value);</span><br><span class="line">        &#125; while (t != null);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    /* 比较器为空的场合，按照这个方法进行比较 */</span><br><span class="line">    else &#123;</span><br><span class="line">        if (key == null) &#123;</span><br><span class="line">            throw new NullPointerException();</span><br><span class="line">        &#125;</span><br><span class="line">        Comparable&lt;? super K&gt; k = (Comparable&lt;? super K&gt;) key;</span><br><span class="line">        do &#123;</span><br><span class="line">            parent = t;</span><br><span class="line">            cmp = k.compareTo(t.key);</span><br><span class="line">            if (cmp &lt; 0)</span><br><span class="line">                t = t.left;</span><br><span class="line">            else if (cmp &gt; 0)</span><br><span class="line">                t = t.right;</span><br><span class="line">            else</span><br><span class="line">                return t.setValue(value);</span><br><span class="line">        &#125; while (t != null);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    /* 将数据节点放到正确的路径下 */</span><br><span class="line">    Entry&lt;K,V&gt; e = new Entry&lt;&gt;(key, value, parent);</span><br><span class="line">    if (cmp &lt; 0)</span><br><span class="line">        parent.left = e;</span><br><span class="line">    else</span><br><span class="line">        parent.right = e;</span><br><span class="line">    </span><br><span class="line">    /* 此处会试着将该树转换成完全二叉树 */</span><br><span class="line">    fixAfterInsertion(e);</span><br><span class="line">    size++;</span><br><span class="line">    modCount++;</span><br><span class="line">    return null;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>添加的最后，会试着将该树转换成完全二叉树</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">private void fixAfterInsertion(Entry&lt;K,V&gt; x) &#123;</span><br><span class="line">    x.color = RED;</span><br><span class="line"></span><br><span class="line">    while (x != null &amp;&amp; x != root &amp;&amp; x.parent.color == RED) &#123;</span><br><span class="line">        if (parentOf(x) == leftOf(parentOf(parentOf(x)))) &#123;</span><br><span class="line">            Entry&lt;K,V&gt; y = rightOf(parentOf(parentOf(x)));</span><br><span class="line">            if (colorOf(y) == RED) &#123;</span><br><span class="line">                setColor(parentOf(x), BLACK);</span><br><span class="line">                setColor(y, BLACK);</span><br><span class="line">                setColor(parentOf(parentOf(x)), RED);</span><br><span class="line">                x = parentOf(parentOf(x));</span><br><span class="line">            &#125; else &#123;</span><br><span class="line">                if (x == rightOf(parentOf(x))) &#123;</span><br><span class="line">                    x = parentOf(x);</span><br><span class="line">                    rotateLeft(x);</span><br><span class="line">                &#125;</span><br><span class="line">                setColor(parentOf(x), BLACK);</span><br><span class="line">                setColor(parentOf(parentOf(x)), RED);</span><br><span class="line">                rotateRight(parentOf(parentOf(x)));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            Entry&lt;K,V&gt; y = leftOf(parentOf(parentOf(x)));</span><br><span class="line">            if (colorOf(y) == RED) &#123;</span><br><span class="line">                setColor(parentOf(x), BLACK);</span><br><span class="line">                setColor(y, BLACK);</span><br><span class="line">                setColor(parentOf(parentOf(x)), RED);</span><br><span class="line">                x = parentOf(parentOf(x));</span><br><span class="line">            &#125; else &#123;</span><br><span class="line">                if (x == leftOf(parentOf(x))) &#123;</span><br><span class="line">                    x = parentOf(x);</span><br><span class="line">                    rotateRight(x);</span><br><span class="line">                &#125;</span><br><span class="line">                setColor(parentOf(x), BLACK);</span><br><span class="line">                setColor(parentOf(parentOf(x)), RED);</span><br><span class="line">                rotateLeft(parentOf(parentOf(x)));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    root.color = BLACK;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h3 id="Properties"><a href="#Properties" class="headerlink" title="Properties"></a>Properties</h3><blockquote><p>Properties 继承自 Hashtable 并实现了 Map 接口。也使用键值对的方式保存数据</p><p>Properties 使用特点与 Hashtable 相似</p><p>Properties 还可以用于 xxx.properties 文件中，加载数据到 Properties 对象，进行读取和修改</p><p>xxx.properties 文件常作为配置文件</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">public class Properties extends Hashtable&lt;Object,Object&gt;</span><br></pre></td></tr></table></figure><p><strong><em>——关于这些，详见 [[17 IO流 ]]</em></strong></p><ul><li><p><code>String getProperty(String key)</code> ：输入一个 String 类型的 key，返回一个 String 的 value</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">public String getProperty(String key) &#123;</span><br><span class="line">Object oval = super.get(key);</span><br><span class="line">String sval = (oval instanceof String) ? (String)oval : null;</span><br><span class="line">return ((sval == null) &amp;&amp; (defaults != null)) ? defaults.getProperty(key) : sval;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h2 id="无序集合接口-Set"><a href="#无序集合接口-Set" class="headerlink" title="无序集合接口 Set"></a>无序集合接口 Set</h2><blockquote><p>Set 是 Collection 接口的子类接口。</p><p>Set 接口的特点是无序（添加和取出顺序不一致，其取出顺序由某个算法决定），没有索引</p><p>不允许重复元素。故而，最多包含一个 null</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">public interface Set&lt;E&gt; extends Collection&lt;E&gt;</span><br></pre></td></tr></table></figure><h3 id="HashSet"><a href="#HashSet" class="headerlink" title="HashSet"></a>HashSet</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">public class HashSet&lt;E&gt;</span><br><span class="line">    extends AbstractSet&lt;E&gt;</span><br><span class="line">    implements Set&lt;E&gt;, Cloneable, java.io.Serializable</span><br></pre></td></tr></table></figure><blockquote><p>HashSet 实现了 Set 接口。底层实际上使用 HashMap 来存储数据。<del>身在 Collection 心在 Map</del></p><p>HashSet 是无序的。其实际顺序取决于计算得到的 hash 值</p></blockquote><h4 id="HashSet-的源码"><a href="#HashSet-的源码" class="headerlink" title="HashSet 的源码"></a>HashSet 的源码</h4><ol><li><p>HashSet 底层是 HashMap。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">private transient HashMap&lt;E,Object&gt; map;</span><br></pre></td></tr></table></figure></li><li><p>实例化也和 HashMap 相同</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">public HashSet() &#123;</span><br><span class="line">    map = new HashMap&lt;&gt;();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public HashSet(int initialCapacity) &#123;</span><br><span class="line">    map = new HashMap&lt;&gt;(initialCapacity);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public HashSet(int initialCapacity, float loadFactor) &#123;</span><br><span class="line">    map = new HashMap&lt;&gt;(initialCapacity, loadFactor);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>添加一个元素时调用 HashMap 的方法</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">public boolean add(E e) &#123;</span><br><span class="line">    return map.put(e, PRESENT)==null;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h3 id="LinkedHashSet"><a href="#LinkedHashSet" class="headerlink" title="LinkedHashSet"></a>LinkedHashSet</h3><blockquote><p>LinkedHashSet 是 HashSet 的子类</p><p>LinkedHashSet 底层是一个 LinkedHashMap，维护了一个数组 + 双向链表。<del>有其父必有其子</del></p><p>LinkedHashSet 根据元素的 hashCode 值来决定元素的存储位置。同时，使用链表维护元素的次序。这使得元素看起来是以插入顺序保存的，并得以按照放入顺序取出</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">public class LinkedHashSet&lt;E&gt;</span><br><span class="line">    extends HashSet&lt;E&gt;</span><br><span class="line">    implements Set&lt;E&gt;, Cloneable, java.io.Serializable</span><br></pre></td></tr></table></figure><h4 id="LinkedHashSet-的源码："><a href="#LinkedHashSet-的源码：" class="headerlink" title="LinkedHashSet 的源码："></a>LinkedHashSet 的源码：</h4><ol><li><p>在类 HashSet 中，存在一个默认访问范围的构造器。该构造器不同于其他构造器，会让实例维护一个 LinkedHashMap</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">HashSet(int initialCapacity, float loadFactor, boolean dummy) &#123;</span><br><span class="line">    map = new LinkedHashMap&lt;&gt;(initialCapacity, loadFactor);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>LinkedHashSet 的构造器即调用了该父类构造器</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">public LinkedHashSet(int initialCapacity, float loadFactor) &#123;</span><br><span class="line">    super(initialCapacity, loadFactor, true);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public LinkedHashSet(int initialCapacity) &#123;</span><br><span class="line">    super(initialCapacity, .75f, true);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public LinkedHashSet() &#123;</span><br><span class="line">    super(16, .75f, true);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h3 id="TreeSet"><a href="#TreeSet" class="headerlink" title="TreeSet"></a>TreeSet</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">public class TreeSet&lt;E&gt; extends AbstractSet&lt;E&gt;</span><br><span class="line">    implements NavigableSet&lt;E&gt;, Cloneable, java.io.Serializable</span><br></pre></td></tr></table></figure><blockquote><p>TreeSet 实现了 Set 接口，其底层是一个 TreeMap。<del>好家伙，原来 Set 全家都是卧底</del></p><p>调用无参构造器创建 TreeSet 时，默认是无序排列。也能在构造时传入一个比较器。有比较器的场合，比较器返回 0 时，不发生替换</p><p>不传入比较器的场合，使用的是传入对象自带的比较器。所以，这个场合，传入的 key 对象必须是 Comparable 接口的实现子类</p></blockquote><h2 id="集合的选择"><a href="#集合的选择" class="headerlink" title="集合的选择"></a>集合的选择</h2><p>在开发中，选择什么集合实现类，主要取决于业务操作特点，然后根据集合实现类特性进行分析选择。</p><p>判断存储的类型（一组对象 [单列]，或一组键值对 [双列]） - 一组对象：Collection 接口 - 允许重复：List - 增删多：<code>LinkedList</code> （双向链表） - 改查多：ArrayList （<code>Object[]</code> 数组） - 不允许重复：Set - 无序：HashSet （数组 + 链表 + 红黑树，底层是 HashMap） - 排序：<code>TreeSet</code> - 顺序一致：LinkedHashSet （数组 + 双向链表，底层是 <code>LinkedHashMap</code>） - 一组键值对：Map - 键无序：HashMap （数组 + 链表 + 红黑树 [ JDK 8 以后 ] ） - 键排序：<code>TreeMap</code> - 键顺序一致：<code>LinkedHashMap</code> （底层是 HashMap） - 读取文件：Properties</p><h2 id="工具类-Collections"><a href="#工具类-Collections" class="headerlink" title="工具类 Collections"></a>工具类 Collections</h2><blockquote><p>Collections 工具类是一个操作 Set、List、Map 等集合的工具类</p><p>其中提供了一系列静态方法，对集合元素进行 排序、查询和修改等操作</p></blockquote><h4 id="常用方法：-7"><a href="#常用方法：-7" class="headerlink" title="常用方法："></a>常用方法：</h4><p><strong>排序：</strong></p><ul><li><code>reverse(List)</code>：反转 List 中元素的排序</li><li><code>shuffle(List)</code>：对 <code>List</code> 中元素进行随机排序</li><li><code>sort(List)</code>：根据元素的自然顺序对指定 List 集合元素升序排列</li><li><code>reverse(List, Comparator)</code>：根据指定 Comparator 对 List 排序</li><li><code>swap(List, int, int)</code>：将两处元素位置互换</li></ul><p><strong>查找、替换：</strong></p><ul><li><p><code>Object max(Collection)</code>：根据元素的自然排序，返回集合中最大的元素</p></li><li><p><code>Object max(Collection, Comparator)</code>：根据比较器，返回最大元素</p></li><li><p><code>Object min(Collection)</code>：根据元素的自然排序，返回最小元素</p></li><li><p><code>Object min(Collection, Comparator)</code>：根据比较器，返回最小元素</p></li><li><p><code>int frequency(Collection, Object)</code>：返回集合中指定元素的出现次数</p></li><li><p><code>void copy(List dest, List src)</code>：将 src 的内容复制到 dest 中</p><p>这个场合，要保证 dest 的大小不小于 src。所以，可能需要先给 dest 赋值</p></li><li><p><code>boolean replaceAll(List list, Object oldVal, Object newVal)</code>：用 newVal 替换所有 oldVal 值</p></li></ul><h2 id="JUnit"><a href="#JUnit" class="headerlink" title="JUnit"></a>JUnit</h2><blockquote><p>一个类有多个功能代码需要测试，为了测试，就要写入 <code>main</code> 方法中</p><p>如果有多个功能代码测试，需要反复撤销，过程繁琐</p></blockquote><blockquote><p>JUnit 是一个 Java 语言单元测试框架</p><p>多数 Java 开发环境都已集成了 JUnit 作为单元测试工具</p><p>……总的来讲，方法就是加入 <code>@Test</code>，然后 <code>alt + enter</code> 引入 JUnit 5，最后运行</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 教程 </tag>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java 常用类</title>
      <link href="/2022/12/05/learn/Java/Java%20%E5%B8%B8%E7%94%A8%E7%B1%BB/"/>
      <url>/2022/12/05/learn/Java/Java%20%E5%B8%B8%E7%94%A8%E7%B1%BB/</url>
      
        <content type="html"><![CDATA[<h2 id="包装类"><a href="#包装类" class="headerlink" title="包装类"></a>包装类</h2><blockquote><p>包装类（Wrapper）：针对 八种基本数据类型 相应的 引用类型</p><p>有了类的特点，就可以调用类中的方法</p></blockquote><table><thead><tr><th>基本数据类型</th><th>包装类</th><th>父类</th></tr></thead><tbody><tr><td>boolean</td><td>Boolean</td><td>Object</td></tr><tr><td>char</td><td>Character</td><td>Object</td></tr><tr><td>int</td><td>Integer</td><td>Number</td></tr><tr><td>float</td><td>Float</td><td>Number</td></tr><tr><td>double</td><td>Double</td><td>Number</td></tr><tr><td>long</td><td>Long</td><td>Number</td></tr><tr><td>short</td><td>Short</td><td>Number</td></tr><tr><td>byte</td><td>Byte</td><td>Number</td></tr><tr><td>void</td><td>Void</td><td>Object</td></tr></tbody></table><h3 id="装箱和拆箱"><a href="#装箱和拆箱" class="headerlink" title="装箱和拆箱"></a>装箱和拆箱</h3><ul><li><p><strong>手动装箱和拆箱（JDK 5 以前）</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">int n1 = 100;</span><br><span class="line">Integer integer = new Integer(n1);// 手动装箱</span><br><span class="line">Integer integer2 = Integer.valueOf(n1);// 手动装箱</span><br><span class="line">int i = integer.intValue();// 手动拆箱</span><br></pre></td></tr></table></figure></li><li><p><strong>自动装箱和拆箱（JDK 5 以后）</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">n2 = 200;</span><br><span class="line">Integer integer3 = n2;// 自动装箱</span><br><span class="line">int j = integer3;// 自动拆箱</span><br></pre></td></tr></table></figure><p>虽然可以自动装箱、拆箱，但使用 &#x3D;&#x3D; 直接比较两个包装类时，仍然是比较其地址。以下比较通常会失败：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Integer ia = 1000;</span><br><span class="line">Integer ib = 1000;</span><br><span class="line">System.out.print(ia == ib);// false</span><br></pre></td></tr></table></figure><p>但，Java 实现仍有可能使其成立。Byte、Boolean 以及 Short、Integer 中 [-128, 127] 间的值已被包装到固定的对象中。对他们的比较可以成功。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Integer ia = 127;</span><br><span class="line">Integer ib = 127;</span><br><span class="line">System.out.print(ia == ib);// true</span><br></pre></td></tr></table></figure><p>由此可见，使用 &#x3D;&#x3D; 直接比较两个包装类会带来不确定性。<strong>尽量使用 equals 方法对包装类进行比较。</strong></p></li></ul><p>装箱与拆箱是 <strong>编译器</strong> 的工作。在生成可执行的字节码文件时，编译器已经插入了必要的方法调用。</p><h3 id="包装类和-String-的相互转换"><a href="#包装类和-String-的相互转换" class="headerlink" title="包装类和 String 的相互转换"></a>包装类和 <code>String</code> 的相互转换</h3><ul><li><p>包装类转 <code>String</code>：</p><blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&gt;Integer integer = 100;</span><br><span class="line">&gt;String str1 = integer + &quot;&quot;;//方法1（自动拆箱）</span><br><span class="line">&gt;String str2 = integer.toString();//方法2（toString方法）</span><br><span class="line">&gt;String str3 = String.valueOf(integer);//方法3（自动拆箱）</span><br></pre></td></tr></table></figure></blockquote></li><li><p><code>String</code> 转包装类：</p><blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">String str4 = &quot;100&quot;;</span><br><span class="line">Integer integer2 = Integer.parseInt(str4);//方法1（自动装箱）</span><br><span class="line">Integer integer3 = new Integer(str4);//方法2（构造器）</span><br></pre></td></tr></table></figure></blockquote></li></ul><h3 id="包装类的常用方法"><a href="#包装类的常用方法" class="headerlink" title="包装类的常用方法"></a>包装类的常用方法</h3><ul><li><p><code>Integer.MIN_VALUE</code>：返回最大值</p></li><li><p><code>Double.MAX_VALUE</code>：返回最小值</p></li><li><p><code>byteValue()</code>、<code>doubleValue()</code>、<code>floatValue()</code>、<code>intValue()</code>、<code>longValue()</code></p><p>按各种基本数据类型返回该对象的值</p></li><li><p><code>Character.isDigit(int)</code>：判断是不是数字</p><p><code>Character.isLetter(int)</code>：判断是不是字母</p><p><code>Character.isUpperCase(int)</code>：判断是不是大写字母</p><p><code>Character.isLowerCase(int)</code>：判断是不是小写字母</p><p><code>Characher.isWhitespace(int)</code>：判断是不是空格</p></li><li><p><code>Character.toUpperCase(int)</code>：转成大写字母</p><p><code>Character.toLowerCase(int)</code>：转成小写字母</p></li><li><p><code>Integer.parseInt(string)</code>：将 String 内容转为 int</p><p><code>Double.parseDouble(string)</code></p></li><li><p><code>Integer.toBinaryString(int)</code>：将数字转为 2 进制表示的字符串</p><p><code>Integer.toHexString(int)</code>：将数字转为 16 进制表示的字符串</p><p><code>Integer.toOctalString(int)</code>：将数字转为 8 进制表示的字符串</p><p>特别地，浮点数类型的包装类只有转成 16 进制的方法。而 Short、Byte 及其他包装类无此方法</p></li><li><p><code>int Integer.bitCount(i int)</code>：统计指定数字的二进制格式中 1 的数量</p></li></ul><h3 id="strictfp-关键字"><a href="#strictfp-关键字" class="headerlink" title="strictfp 关键字"></a>strictfp 关键字</h3><blockquote><p>由于不同处理器对于浮点数寄存采取不同策略（有些处理器使用 64 位寄存 double，有些则是 80 位），对于浮点数的运算在不同平台上可能出现不同结果。</p></blockquote><p>使用 strictfp 关键字标记的方法或类中，所有指令都会使用严格统一的浮点数运算。</p><p>比如，把 main 方法标记为 strictfp</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">public static strictfp void main(String[] args) &#123;</span><br><span class="line">    double ᓚᘏᗢ = 1 / 13.97;</span><br><span class="line">    System.out.println(ᓚᘏᗢ);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="String-类"><a href="#String-类" class="headerlink" title="String 类"></a>String 类</h2><ol><li><p><code>String</code> 对象用于保存字符串，也就是一组字符序列</p></li><li><p>字符串常量对象是用双引号扩起的字符序列。例如 <code>&quot;你好&quot;</code></p></li><li><p>字符串的字符使用 Unicode 字符编码。一个字符（不论字母汉字）占 2 字节</p></li><li><p>常用构造器：</p><ul><li><p><code>String str1 = new String();</code></p></li><li><p><code>String str2 = new String(String original);</code></p></li><li><p><code>String str3 = new String(char[] a);</code></p></li><li><p><code>String str4 = new String(char[] a, int startIndex, int count);</code></p><p>这句意思是：<code>char[]</code> 从 <code>startIndex</code> 起的 <code>count</code> 个字符</p></li></ul></li><li><p><code>String</code> 实现了接口 <code>Serializable</code> 和 <code>Comparable</code> ，可以 串行化和 比较大小</p><p><strong><em>串行化：即，可以被网络传输，也能保存到文件</em></strong></p></li><li><p><code>String</code> 是 <code>final</code> 类，不能被继承</p></li><li><p><code>String</code> 有属性 <code>private final char[] value;</code> 用于存放字符串内容。</p><p><code>value</code> 是 <code>final</code> 属性。其在栈中的地址不能修改，但堆中的内容可以修改。</p></li></ol><h3 id="String-构造方法"><a href="#String-构造方法" class="headerlink" title="String 构造方法"></a>String 构造方法</h3><ul><li><p>直接指定</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">String str1 = &quot;哈哈哈&quot;;</span><br></pre></td></tr></table></figure><p>该方法：先从常量池看是否有 <code>&quot;哈哈哈&quot;</code> 数据空间。有的场合，指向那个空间；否则重新创建然后指向。</p><p>这个方法，<code>str1</code> 指向 常量池中的地址。</p></li><li><p>构造器</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">String str2 = new String(&quot;嘿嘿嘿&quot;);</span><br></pre></td></tr></table></figure><p>该方法：先在堆中创建空间，里面维护一个 <code>value</code> 属性，指向 或 创建后指向 常量池的 <code>&quot;嘿嘿嘿&quot;</code> 空间。</p><p>这个方法，<code>str2</code> 指向 堆中的地址</p></li></ul><h3 id="字符串的特性"><a href="#字符串的特性" class="headerlink" title="字符串的特性"></a>字符串的特性</h3><ul><li><p>常量相加，看的是池</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">String str1 = &quot;aa&quot; + &quot;bb&quot;;//常量相加，看的是池</span><br></pre></td></tr></table></figure><blockquote><p>上例由于构造器自身优化，相当于 <code>String str1 = &quot;aabb&quot;;</code></p></blockquote></li><li><p>变量相加，是在堆中</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">String a = &quot;aa&quot;;</span><br><span class="line">String b = &quot;bb&quot;;</span><br><span class="line">String str2 = a + b;//变量相加，是在堆中</span><br></pre></td></tr></table></figure><blockquote><p>上例的底层是如下代码</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">StringBuilder sb = new StringBuilder();</span><br><span class="line">sb.append(a);</span><br><span class="line">sb.append(b);</span><br><span class="line">str2 = sb.toString();//sb.toString()：return new String(value, 0, count);</span><br></pre></td></tr></table></figure></blockquote></li></ul><h3 id="String-的常用方法"><a href="#String-的常用方法" class="headerlink" title="String 的常用方法"></a>String 的常用方法</h3><p>以下方法不需死记硬背，手熟自然牢记</p><ul><li><p><code>boolean equals(String s)</code>：区分大小写，判断内容是否相等</p><p><code>boolean equalsIgnoreCase(String s)</code>：判断内容是否相等（忽略大小写）</p></li><li><p><code>boolean empty()</code>：返回是否为空</p></li><li><p><code>int charAt(int index)</code>：获取某索引处的字符（代码单元）。</p><p>必须用 <code>char c = str.charAt(15);</code>，不能用 <code>char c = str[15];</code></p><p><code>int codePointAt(int index)</code></p><p><code>int length()</code>：获取字符（<strong>代码单元</strong>）的个数</p><p><strong><em>—— 代码单元，见 [[2 变量]]</em></strong></p><p><code>IntStream codePoints()</code>：返回字符串中全部码点构成的流</p><p><code>long codePoints().count()</code>：返回真正长度（码点数量）</p></li><li><p><code>int indexOf(String str)</code>：获取字符（串）在字符串中第一次出现的索引。如果找不到，返回 -1</p><p><code>int indexOf(int char)</code> 参数也可以传入一个 int。由于自动类型转换的存在，也能填入 char</p><p><code>int indexOf(String str, int index)</code>：从 index 处（包含）开始查找指定字符（串）</p><p><code>int lastIndexOf(String str)</code>：获取字符在字符串中最后一次出现的索引。如果找不到，返回 -1</p></li><li><p><code>String substring(int start, int end)</code>：返回截取指定范围 [start, end) 的 <strong>新</strong> 字符串</p><p><code>String substring(int index)</code>：截取 index（包含）之后的部分</p></li><li><p><code>String trim()</code>：返回去前后空格的新字符串</p></li><li><p><code>String toUperCase()</code>：返回字母全部转为大写的新字符串</p><p><code>String toLowerCase()</code>：返回字母全部转为小写的新字符串</p></li><li><p><code>String concat(String another)</code>：返回拼接字符串</p></li><li><p><code>String replace(char oldChar, char newChar)</code>：替换字符串中的元素</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">String str1 = &quot;Foolish cultists&quot;;</span><br><span class="line">String str2 = str1.replace(&quot;cultists&quot;, &quot;believers&quot;);//str1不变，str2为改变的值</span><br></pre></td></tr></table></figure></li><li><p><code>String[] split(String regex)</code>：分割字符串。</p><p>对于某些分割字符，我们需要转义</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">String str1 = &quot;aaa,bbb,ccc&quot;;</span><br><span class="line">String[] strs1 = str1.split(&quot;,&quot;);//这个场合，strs = &#123;&quot;aaa&quot;, &quot;bbb&quot;, &quot;ccc&quot;&#125;;4</span><br><span class="line">String str2 = &quot;aaa\bbb\ccc&quot;;</span><br><span class="line">String[] strs2 = str2.split(&quot;\\&quot;);//&quot;\&quot; 是特殊字符，需要转义为 &quot;\\&quot;</span><br></pre></td></tr></table></figure></li><li><p><code>int compareTo(String another)</code>：按照字典顺序比较两个字符串（的大小）。</p><p>返回出现第一处不同的字符的编号差。前面字符相同，长度不同的场合，返回那个长度差。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">String str1 = &quot;ccc&quot;;</span><br><span class="line">String str2 = &quot;ca&quot;;</span><br><span class="line">String str3 = &quot;ccc111abc&quot;;</span><br><span class="line">int n1 = str1.compareTo(str2);//此时 n1 = &#x27;c&#x27; - &#x27;a&#x27; = 2</span><br><span class="line">int n2 = str1.compareTo(str3);//此时 n2 = str1,length - str3.length = -6</span><br><span class="line">int n3 = str1.compareTo(str1);//此时 n3 = 0</span><br></pre></td></tr></table></figure></li><li><p><code>char[] toCharArray()</code>：转换成字符数组</p><p><code>byte[] getBytes()</code>：字符串转为字节数组</p></li><li><p><code>String String.format(String format, Object... args)</code>：（静态方法）格式字符串</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">String name = &quot;Roin&quot;;</span><br><span class="line">String age = &quot;1M&quot;;</span><br><span class="line">String state = &quot;computer&quot;;</span><br><span class="line">String formatStr = &quot;I am %s, I am %s old, I am a %s&quot;;</span><br><span class="line">String str = String.format(formatStr, name, age, state);</span><br><span class="line">//其中 %s 是占位符。此时，str = &quot;I am Roin, I am 1M old, I am a computer&quot;;</span><br><span class="line">//%s 表示字符串替换；%d 表示整数替换；#.2f 表示小数（四舍五入保留2位）替换；%c 表示字符替换</span><br></pre></td></tr></table></figure></li><li><p><code>String join(deli, ele...)</code>：拼接字符串（<code>ele...</code>），以 <code>deli</code> 间隔。</p></li><li><p><code>boolean startsWith(str)</code>：测试 str 是否为当前字符串的前缀</p></li><li><p><code>String repeat(int n)</code>：返回该字符串重复 n 次的结果</p></li></ul><h2 id="StringBuffer-类"><a href="#StringBuffer-类" class="headerlink" title="StringBuffer 类"></a>StringBuffer 类</h2><blockquote><p><code>java.lang.StringBuffer</code> 代表可变的字符序列。可以对字符串内容进行增删。</p><p>很多方法和 <code>String</code> 相同，但 <code>StringBuffer</code> 是可变长度。同时，<code>StringBuffer</code> 是一个容器</p></blockquote><ol><li><code>StringBuffer</code> 的直接父类是 <code>AbstractStringBuffer</code></li><li><code>StringBuffer</code> 实现了 <code>Serialiazable</code>，可以串行化</li><li>在父类中，<code>AbstractStringBuffer</code> 有属性 <code>char[] value</code> 不是 <code>final</code></li><li><code>StringBuffer</code> 是一个 <code>final</code> 类，不能被继承</li></ol><p><strong><code>String</code> 对比 <code>StringBuffer</code></strong></p><ul><li><code>String</code> 保存字符串常量，其中的值不能更改。每次更新实际上是更改地址，效率较低</li><li><code>StringBuffer</code> 保存字符串变量，里面的值可以更改。每次更新是更新内容，不用每次更新地址。</li></ul><h3 id="StringBuffer-构造方法"><a href="#StringBuffer-构造方法" class="headerlink" title="StringBuffer 构造方法"></a>StringBuffer 构造方法</h3><ol><li><p>无参构造</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">StringBuffer strb1 = new StringBuffer();</span><br></pre></td></tr></table></figure><blockquote><p>创造一个 16 位容量的空 <code>StringBuffer</code></p></blockquote></li><li><p>传入字符串构造</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">String str1 = &quot;abcabc&quot;;</span><br><span class="line">StringBuffer strb2 = new StringBuffer(str1);</span><br></pre></td></tr></table></figure><blockquote><p>（上例）创造一个 str1.length + 16 容量的 <code>StringBuffer</code></p></blockquote></li><li><p>指定容量构造</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">StringBuffer strb3 = new StringBuffer(3);</span><br></pre></td></tr></table></figure><blockquote><p>（上例）创造一个 3 容量的空 <code>StringBuffer</code></p></blockquote></li></ol><h3 id="String-和-StringBuffer的转换"><a href="#String-和-StringBuffer的转换" class="headerlink" title="String 和 StringBuffer的转换"></a>String 和 StringBuffer的转换</h3><ol><li><p>转 <code>StringBuffer</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">String str1 = &quot;abcabc&quot;;</span><br><span class="line">StringBuffer strb1 = new StringBuffer(str1);//方法1（构造器）</span><br><span class="line">StringBuffer strb1 = new StringBuffer();</span><br><span class="line">strb1 = strb1.append(str1);//方法2（先空再append）</span><br></pre></td></tr></table></figure></li><li><p>转 <code>String</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">String str2 = strb1.toString();//方法1（toString）</span><br><span class="line">String str3 = new String(strb1);//方法2（构造器）</span><br></pre></td></tr></table></figure></li></ol><h3 id="StringBuffer-的常用方法"><a href="#StringBuffer-的常用方法" class="headerlink" title="StringBuffer 的常用方法"></a>StringBuffer 的常用方法</h3><ul><li><p><code>append(char c)</code>：增加</p><p><code>append(String s)</code> 参数也能是字符串</p><p>特别的，<code>append(null);</code> 的场合，等同于 <code>append(&quot;null&quot;);</code></p></li><li><p><code>delete(start, end)</code>：删减 [start, end) 的内容</p></li><li><p><code>replace(start, end, string)</code>：将 start 与 end 间的内容替换为 string</p></li><li><p><code>indexOf</code>：查找指定字符串第一次出现时的索引。没找到的场合返回 -1</p></li><li><p><code>insert</code>：在指定索引位置之前插入指定字符串</p></li><li><p><code>length()</code>：返回字符长度</p><p><code>capacity()</code>：返回当前的容量</p><p>String 类对象分配内存时，按照对象中所含字符个数等量分配。</p><p>StringBuffer 类对象分配内存时，除去字符所占空间外，会另加 16 字符大小的缓冲区。</p><p>对于 <code>length()</code> 方法，返回的是字符串长度。对于 <code>capacity()</code> 方法，返回的是 字符串 + 缓冲区 的大小。</p></li></ul><h2 id="StringBuilder-类"><a href="#StringBuilder-类" class="headerlink" title="StringBuilder 类"></a>StringBuilder 类</h2><blockquote><p>一个可变的字符序列。此类提供一个与 <code>StringBuffer</code> 兼容的 API，但不保证同步（有线程安全问题）。该类被设计成 <code>StringBuffer</code> 的一个简易替换，<strong>用在字符串缓冲区被单个线程使用的时候</strong>。如果可能，建议优先使用该类。因为在大多数实现中，它比起 <code>StringBuffer</code> 要快。</p><p>在 <code>StringBuilder</code> 是的主要操作是 <code>append</code> 和 <code>insert</code> 方法。可以重载这些方法，以接受任意类型的数据。</p></blockquote><ol><li><p><code>StringBuilder</code> 也继承了 <code>AbstractStringBuffer</code></p></li><li><p><code>StringBuilder</code> 也实现了 <code>Serialiazable</code>，可以串行化</p></li><li><p>仍然是在父类中有属性 <code>char[] value</code> ，而且不是 <code>final</code></p></li><li><p><code>StringBuilder</code> 也是一个 <code>final</code> 类，不能被继承</p></li><li><p><code>StringBuilder</code> 的方法，没有做互斥的处理（没有 <code>synchronize</code>），故而存在线程安全问题</p></li></ol><h3 id="String、StringBuffer、StringBuilder-的对比"><a href="#String、StringBuffer、StringBuilder-的对比" class="headerlink" title="String、StringBuffer、StringBuilder 的对比"></a>String、StringBuffer、StringBuilder 的对比</h3><ol><li><p><code>StringBuilder</code> 和 <code>StringBuffer</code> 类似，均代表可变字符序列，而且方法也一样</p></li><li><p><code>String</code>：不可变字符序列，效率低，但复用率高</p></li><li><p><code>StringBuffer</code>：可变字符序列，效率较高，线程安全</p></li><li><p><code>StringBuilder</code>：可变字符序列，效率最高，存在线程安全问题</p></li><li><p><code>String</code> 为何效率低：</p><blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">String str1 = &quot;aa&quot;;//创建了一个字符串</span><br><span class="line">for(int n = 0; n &lt; 100; n++)&#123;</span><br><span class="line">str1 += &quot;bb&quot;;//这里，原先的字符串被丢弃，创建新字符串</span><br><span class="line">&#125;//多次执行后，大量副本字符串留在内存中</span><br><span class="line">//导致效率降低，也会影响程序性能</span><br></pre></td></tr></table></figure><p>如上，对 <code>String</code> 大量修改的场合，不要使用 <code>String</code></p></blockquote></li></ol><h2 id="Math-类"><a href="#Math-类" class="headerlink" title="Math 类"></a>Math 类</h2><ul><li><p><code>Math.multiplyExact(int n1, int n2)</code>：进行乘法运算，返回运算结果</p><p>通常的乘法 <code>n1 * n2</code> 在结果大于那个数据类型存储上限时，可能返回错误的值。</p><p>使用此方法，结果大于那个数据类型存储上限时，会抛出异常</p><p><code>Math.addExact(int n1, int n2)</code>：加法</p><p><code>Math.subtractExact(int n1, int n2)</code>：减法</p><p><code>Math.incrementExact(int n1)</code>：自增</p><p><code>Math.decrementExact(int n1)</code>：自减</p><p><code>Math.negateExact(int n1, int n2)</code>：改变符号</p></li><li><p><code>Math.abs(n)</code>：求绝对值，返回 |n1|</p></li><li><p><code>Math.pow(n, i)</code>：求幂，返回 n3 ^ i</p></li><li><p><code>Math.ceil(n)</code>：向上取整，返回 &gt;&#x3D; n3 的最小整数（转成double）</p></li><li><p><code>Math.floor(n)</code>：向下取整，返回 &lt;&#x3D;n4 的最小整数（转成double）</p></li><li><p><code>Math.floorMod(int n1, int n2)</code>：返回 n1 除以 n2 的余数</p><p><code>n1 % n2</code> 的场合，返回的可能是负数，而不是数学意义上的余数</p></li><li><p><code>Math.round(n)</code>：四舍五入，相当于 <code>Math.floor(n5 + 0.5)</code></p></li><li><p><code>Math.sqrt(n)</code>：求开方。负数的场合，返回 <code>NaN</code></p></li><li><p><code>Math.random()</code>：返回一个 [0, 1) 区间的随机小数</p></li><li><p><code>Math.sin(n)</code>：正弦函数</p><p><code>Math.cos(n)</code>：余弦函数</p><p><code>Math.tan(n)</code>、<code>Math.atan(n)</code>、<code>Math.atan2(n)</code></p><p>要注意，上述方法传入的参数是 <strong>弧度值</strong>。</p><p>要得到一个角度的弧度值，应使用：<code>Math.toRadians(n)</code></p></li><li><p><code>Math.exp(n)</code>：e 的 n 次幂</p><p><code>Math.log10(n)</code>：10 为底的对数</p><p><code>Math.log()</code>：自然对数</p></li><li><p><code>Math.PI</code>：圆周率的近似值</p><p><code>Math.E</code>：e 的近似值</p></li></ul><h2 id="Arrays-类"><a href="#Arrays-类" class="headerlink" title="Arrays 类"></a>Arrays 类</h2><ul><li><p><code>Arrays.toString()</code>：返回数组的字符串形式</p><blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">int[] nums = &#123;0, 1, 33&#125;;</span><br><span class="line">String str = Array.toString(nums);//此时，str = &quot;[0, 1, 33]&quot;</span><br></pre></td></tr></table></figure><p>特别的，输入为 null 时返回 “null”</p></blockquote></li><li><p><code>Arrays.sort(arr)</code>：排序</p><p>因为数组是引用类型，使用 sort 排序后，会直接影响到实参。</p><p>默认（自然排序）从小到大排序。</p><p><code>Arrays.sort(arr, Comparator c)</code>：按照传入的比较器决定排序方法</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">Integer[] nums;</span><br><span class="line">...</span><br><span class="line">Comparator&lt;Integer, Integer&gt; c = new Comparator&lt;Integer, Integer&gt;()&#123;</span><br><span class="line">    @Override</span><br><span class="line">    public int compare(Integer o1, Integer o2)&#123;</span><br><span class="line">        return n2 - n1;// 这个场合，变成从大到小排序</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">Arrays.sort(nums, c);</span><br></pre></td></tr></table></figure></li><li><p><code>Arrays.binarySearch(array, num)</code>：通过二分搜索法查找。前提是必须先排序。</p><p>找不到的场合，返回 - (low + 1)。即，其应该在的位置的负值</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Integer[] nums2 = &#123;-10, -5, -2, 0, 4, 5, 9&#125;;</span><br><span class="line">int index = Arrays.binarySearch(nums2, 7);// 此时 index = -7</span><br><span class="line">// 如果 7 存在，应该在第 7 个位置</span><br></pre></td></tr></table></figure></li><li><p><code>Arrays.copyOf(arr, n)</code>：从 <code>arr</code> 中，复制 n 个元素（成为新的数组）。</p><p>n &gt; arr.length 的场合，在多余的位置添加 <code>null</code>。n &lt; 0 的场合，抛出异常。</p><p>该方法的底层使用的是 <code>System.arraycopy</code></p></li><li><p><code>Arrays.fill(arr, o)</code>：用 o 填充 <code>num</code> 的所有元素。</p></li><li><p><code>Arrays.equals(arr1, arr2)</code>：比较两个数组元素是否完全一致（<code>true</code>&#x2F;<code>false</code>）</p></li><li><p><code>Arrays.asList(a, b, c, d)</code>：将输入数据转成一个 <code>List</code> 集合</p></li></ul><h2 id="System-类"><a href="#System-类" class="headerlink" title="System 类"></a>System 类</h2><ul><li><p><code>System.exit(0)</code>：退出当前程序。0 表示一个状态，正常状态是 0</p></li><li><p><code>System.arraycopy(arr, 0, newArr, 0 ,3)</code>：复制数组元素。</p><p>上例是：arr 自下标 0 起开始，向 newArr 自下标 0 开始，依次拷贝 3 个值</p><p>这个方法比较适合底层调用。我们一般使用 <code>Arrays.copyOf</code> 来做</p></li><li><p><code>System.currentTimeMillis</code>：返回当前时间距离 1970 - 1 - 1 的毫秒数</p></li><li><p><code>System.gc</code>：运行垃圾回收机制</p></li></ul><h2 id="BigInteger-和-BigDecimal-类"><a href="#BigInteger-和-BigDecimal-类" class="headerlink" title="BigInteger 和 BigDecimal 类"></a>BigInteger 和 BigDecimal 类</h2><blockquote><p><code>BigInteger</code>：适合保存更大的整数</p><p><code>BigDecimal</code>：适合保存精度更大的浮点数</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">//用引号把大数变成字符串</span><br><span class="line">BigInteger bigNum = new BigInteger(&quot;100000000000000000000000&quot;);</span><br></pre></td></tr></table></figure><p><strong>构造方法：</strong></p><ul><li><code>new BigInteger(String intStr)</code>：通过一个字符串构建大数</li><li><code>BigInteger BigInteger.valueOf(1)</code>：通过静态方法，让整数类型转成大数</li></ul><p>另外，在对 <code>BigInteger</code> 和 <code>BigDecimal</code> 进行加减乘除的时候，需要使用对应方法</p><p>不能直接用 <code>+</code> <code>-</code> <code>*</code> <code>/</code></p><p><strong>常用方法：</strong></p><ul><li><p><code>BigInteger add(BigInteger)</code>：加法运算。返回新的大数</p></li><li><p><code>BigInteger subtract(BigInteger)</code>：减法</p></li><li><p><code>BigInteger multiply(BigInteger)</code>：乘法</p></li><li><p><code>BigInteger divide(BigInteger)</code>：除法运算</p><p>该方法可能抛出异常。因为可能产生是无限长度小数。</p><p>解决方法（保留分子精度）：<code>bigDecimal.divide(bD3, BigDecimal.ROUND_CELLING)</code></p></li><li><p>一些常量：</p><p><code>BigInteger.ONE</code>、<code>BigInteger.ZERO</code>、<code>BigInteger.TEN</code> 分别是 1、0、10</p><p>one 就是英文的 1，zero 就是英文的 0……这个大家都懂的吧？</p></li></ul><h2 id="日期类"><a href="#日期类" class="headerlink" title="日期类"></a>日期类</h2><h3 id="第一代日期类"><a href="#第一代日期类" class="headerlink" title="第一代日期类"></a>第一代日期类</h3><blockquote><p>Date：精确到毫秒，代表特定瞬间。这里的是 java.util.Date</p><p>SimpleDateFormat：格式和解析日期的类</p></blockquote><ol><li><p><code>Date d1 = new Date();</code>：调用默认无参构造器，获取当前系统时间。</p><p>默认输出日期格式是国外的格式，因此通常需要进行格式转换</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">SimpleDateFormat sdf = new SimpleDateFormat(&quot;yyyy.MM.dd HH.mm.ss&quot;);</span><br><span class="line">String dateFormated = sdf.(d1);//日期转成指定格式。</span><br></pre></td></tr></table></figure></li><li><p>通过指定毫秒数得到时间：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Date d2 = new Date(10000000000);</span><br></pre></td></tr></table></figure></li><li><p>把一个格式化的字符串转成对应的 Date：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">SimpleDateFormat sdf2 = new SimpleDateFormat(&quot;yyyy年MM月dd日 HH点mm分 E&quot;);</span><br><span class="line">Date d3 = sdf2.parse(&quot;2021年12月22日 00点03分 星期三&quot;);</span><br></pre></td></tr></table></figure><p>这个场合，给定的字符串格式应和 <code>sdf2</code> 格式相同，否则会抛出异常</p></li></ol><h3 id="第二代日期类"><a href="#第二代日期类" class="headerlink" title="第二代日期类"></a>第二代日期类</h3><blockquote><p>Calendar：构造器是私有的，要通过 getInstance 方法获取实例</p></blockquote><ol><li><p>Calendar 是一个抽象类，其构造器私有</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Calendar c1 = Calendar.genInstance();//获取实例的方法</span><br></pre></td></tr></table></figure></li><li><p>提供大量方法和字段提供给程序员使用</p><ul><li><p><code>c1.get(Calendar.YEAR)</code>：获取年份数</p></li><li><p><code>c1.get(Calendar.MONTH)</code>：获取月份数</p><p>特别的，实际月份是 返回值 +1。因为 Calendar 的月份是从 0 开始编号的</p></li><li><p><code>c1.get(Calendar.DAY_OF_MONTH)</code>：获取日数</p></li><li><p><code>c1.get(Calendar.HOUR)</code>：获取小时数（12小时制）</p><p><code>c1.get(Calendar.HOUR_OF_DATE)</code>：获取小时数（24小时制）</p></li><li><p><code>c1.get(Calendar.MINUTE)</code>：获取分钟数</p></li><li><p><code>c1.get(Calendar.SECOND)</code>：获取秒数</p></li></ul><p>Calendar 没有专门的格式化方法，需要程序员自己组合来显示</p></li></ol><h3 id="第三代日期类"><a href="#第三代日期类" class="headerlink" title="第三代日期类"></a>第三代日期类</h3><blockquote><p>JDK 1.0 加入的 Date 在 JDK 1.1 加入 Calendar 后已被弃用</p><p>然而，Calendar 也存在不足：</p><ol><li>可变性：像日期和实际这样的类应该是不可改变的</li><li>偏移性：年份都是从 1900 年开始，月份都是从 0 开始</li><li>格式化：只对 Date 有用，对 Calendar 没用</li><li>其他问题：如不能保证线程安全，不能处理闰秒（每隔 2 天多 1 秒）等</li></ol><p>于是，在 JDK 8 加入了以下新日期类：</p><ul><li>LocalDate：只包含 日期（年月日），可以获取 日期字段</li><li>LocalTime：只包含 时间（时分秒），可以获取 时间字段</li><li>LocalDateTime：包含 日期 + 时间，可以获取 日期 + 时间字段</li><li>DateTimeFormatter：格式化日期</li><li>Instant：时间戳</li></ul></blockquote><ol><li><p>使用 <code>now()</code> 方法返回当前时间的对象</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">LocalDateTime ldt = LocalDateTime.now();//获取当前时间</span><br></pre></td></tr></table></figure></li><li><p>获取各字段方法：</p><ul><li><p><code>ldt.getYear();</code>：获取年份数</p></li><li><p><code>ldt.getMonth();</code>：获取月份数（英文）</p><p><code>ldt.getMonthValue();</code>：获取月份数（数字）</p></li><li><p><code>ldt.getDayOfMonth();</code>：获取日数</p></li><li><p><code>LocalDateTime ldt2 = ldt.plusDays(100);</code>：获取 ldt 时间 100 天后的时间实例</p></li><li><p><code>LocalDateTime ldt3 = ldt.minusHours(100);</code>：获取 ldt 时间 100 小时前的时间实例</p></li><li><p>…</p></li></ul></li><li><p>格式化日期：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">DateTimeFormatter dtf = new DateTimeFormatter(&quot;yyyy.MM.dd HH.mm.ss&quot;);</span><br><span class="line">String date = dtf.format(ldt);//获取格式化字符串</span><br></pre></td></tr></table></figure></li><li><p><code>Instant</code> 和 <code>Date</code> 类似</p><ul><li><p>获取当前时间戳：<code>Instant instant = Instant.now();</code></p></li><li><p>转换为 <code>Date</code>：<code>Date date = Date.form(instant);</code></p></li><li><p>由 <code>Date</code> 转换：<code>Instant instant = date.toInstant;</code></p></li></ul></li></ol><h2 id="泛型"><a href="#泛型" class="headerlink" title="泛型"></a>泛型</h2><blockquote><p>泛型（generic）：又称 参数化类型。是JDK 5 出现的新特性。解决数据类型的安全性问题。</p><p>在类声明或实例化时只要制定好需要的具体类型即可。</p></blockquote><p>举例说明：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Properties&lt;Person&gt; prop = new Properties&lt;Person&gt;();</span><br></pre></td></tr></table></figure><blockquote><p>上例表示存放到 <code>prop</code> 中的必须是 <code>Person</code> 类型。</p><p>如果编译器发现添加类型不符合要求，即报错。</p><p>遍历时，直接取出 <code>Person</code> 而非 <code>Object</code></p></blockquote><ol><li><p>编译时，检查添加元素的类型。可以保证如果编译时没发出警告，运行就不会产生 ClassCastException 异常。提高了安全性，使代码更加简洁、健壮。</p></li><li><p>也减少了转换的次数，提高了效率。</p></li><li><p>泛型的作用是：可以在类声明是通过一个标识表示类中某个属性的类型，或某个方法返回值的类型，或参数类型。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">class P&lt;E&gt; &#123;</span><br><span class="line">E e;//E 表示 e 的数据类型，在定义 P类 时指定。在编译期间即确认类型</span><br><span class="line">public P(E e)&#123;//可作为参数类型</span><br><span class="line">this.e = e;</span><br><span class="line">&#125;</span><br><span class="line">public E doSth()&#123;//可作为返回类型</span><br><span class="line">return this.e;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>实例化时指定 E 的类型，编译时上例所有 E 会被编译器替换为那个指定类型</p></li></ol><h4 id="使用方法："><a href="#使用方法：" class="headerlink" title="使用方法："></a>使用方法：</h4><ul><li><p><strong>声明泛型：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">interface InterfaceName&lt;T&gt; &#123;...&#125;</span><br><span class="line">class ClassName&lt;A, B, C, D&gt; &#123;...&#125;</span><br></pre></td></tr></table></figure><p>上例 T、A、B、C、D 不是值，而是类型。可以用任意字母代替</p></li><li><p><strong>实例化泛型：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">List&lt;String&gt; strList = new ArrayList&lt;String&gt;();</span><br><span class="line">Iterator&lt;Integer&gt; iterator = vector.interator&lt;Integer&gt;();</span><br></pre></td></tr></table></figure><p>类名后面指定类型参数的值</p></li></ul><p><strong>注意细节：</strong></p><ol><li><p>泛型只能是引用类型</p></li><li><p>指定泛型具体类型后，可以传入该类型或其子类类型</p></li><li><p>在实际开发中往往简写泛型</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">List&lt;String&gt; strList = new ArrayList&lt;&gt;();</span><br></pre></td></tr></table></figure><p>编译器会进行类型推断，右边 <code>&lt; &gt;</code> 内容可以省略</p></li><li><p>实例化不写泛型的场合，相当于默认泛型为 <code>Object</code></p></li></ol><h4 id="自定义泛型类-·-接口："><a href="#自定义泛型类-·-接口：" class="headerlink" title="自定义泛型类 · 接口："></a>自定义泛型类 · 接口：</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">class Name&lt;A, B...&gt; &#123;...&#125;//泛型标识符 可有多个，一般是单个大写字母表示</span><br></pre></td></tr></table></figure><p>这就是自定义泛型啊</p><ol><li><p>普通成员可以使用泛型（属性、方法）</p></li><li><p>泛型类的类型，是在创建对象时确定的。</p><p>因此：静态方法中不能使用类的泛型；使用泛型的数组，也不能初始化。</p></li><li><p>创建对象时不指定的场合，默认 Object。建议还是写上 <code>&lt;Object&gt;</code>，大气，上档次</p></li><li><p>自定义泛型接口</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">interface Name&lt;T, R...&gt; &#123;...&#125;</span><br></pre></td></tr></table></figure><p>泛型接口，其泛型在 继承接口 或 实现接口 时确定。</p></li></ol><h4 id="自定义泛型方法："><a href="#自定义泛型方法：" class="headerlink" title="自定义泛型方法："></a>自定义泛型方法：</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">修饰符 &lt;T, R...&gt; 返回类型 方法名(形参) &#123;...&#125;</span><br></pre></td></tr></table></figure><ol><li><p>可以定义在普通类中，也可以定义在泛型类中</p></li><li><p>当泛型方法被调用时，类型会确定</p></li><li><p>以下场合</p><blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Class C&lt;T&gt; &#123;</span><br><span class="line">public void cMethord(T t)&#123;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></blockquote><p>没有 <code>&lt; &gt;</code>，不是泛型方法，而是使用了泛型的普通方法</p></li></ol><h4 id="泛型继承："><a href="#泛型继承：" class="headerlink" title="泛型继承："></a>泛型继承：</h4><ol><li>泛型不具有继承性</li><li><code>&lt;?&gt;</code>：支持任意泛型类型</li><li><code>&lt;? extends A&gt;</code>：支持 A 及 A的子类，规定了泛型的上限</li><li><code>&lt;? super B&gt;</code>：支持 B 及 B 的父类，规定了泛型的下限</li></ol>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 教程 </tag>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java 异常</title>
      <link href="/2022/12/04/learn/Java/Java%20%E5%BC%82%E5%B8%B8/"/>
      <url>/2022/12/04/learn/Java/Java%20%E5%BC%82%E5%B8%B8/</url>
      
        <content type="html"><![CDATA[<blockquote><p>在 Java 语言中，将程序执行中发生的不正常情况称为 “异常”（开发过程中的语法错误和逻辑错误不是异常）</p><p>这些 异常事件 可分为两类：</p><ul><li><p>Error（错误）：Java 虚拟机无法解决的严重问题。</p><p>如：JVM 系统内部错误，资源耗尽等严重情况。Error 是严重错误，程序会崩溃。</p></li><li><p>Exception：其他因编程错误或偶然的外部因素导致的一般性问题，可以使用针对性的代码进行处理。</p><p>如：空指针访问，试图读取不存在的文件，网络中断等等。</p><p>Exception 又分为两大类：</p><ul><li>运行时异常（程序运行时，发生的异常）</li><li>编译时异常（编程时，编译器检查出的异常）</li></ul></li></ul></blockquote><h2 id="异常体系图"><a href="#异常体系图" class="headerlink" title="异常体系图"></a>异常体系图</h2><blockquote><p>编译异常（受检异常） 和 运行异常（非受检异常）</p><p>Java 源程序 ——(javac.exe)——&gt; 字节码文件 ——(java.exe)——&gt; 在内存中加载，运行类</p><p> 编译异常↑ 运行异常↑</p></blockquote><p>异常分为两大类：运行时异常 和 编译时异常</p><ul><li><p>运行时异常，编译器不要求强制处置的异常。一般是指编程的逻辑错误，是程序员应该避免其出现的异常。</p><p>java.lang.RuntimeException 类及它的子类都是运行时异常</p><p>对于运行时异常，可以不做处理。因为这类异常很普遍，若全处理会对程序的可读性和运行效率产生影响</p></li><li><p>编译时异常，是编译器要求必须处置的异常</p></li></ul><h3 id="常见的运行时异常"><a href="#常见的运行时异常" class="headerlink" title="常见的运行时异常"></a>常见的运行时异常</h3><blockquote><p>常见的运行时异常（RuntimeException）包括</p><ul><li>NullPointerException：空指针异常</li><li>ArithmeticException：数学运算异常</li><li>ArrayIndexOutOfBoundsException：数组下标越界异常</li><li>ClassCastException：类型转换异常</li><li>NumberFormatException：数学格式异常</li></ul></blockquote><p><strong>空指针异常</strong></p><ul><li>当应用程序试图在需要对象的地方使用 null 时，抛出该异常。</li></ul><blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">String str = null;</span><br><span class="line">int n = str.length;//这里，出现了 空指针异常</span><br></pre></td></tr></table></figure></blockquote><p><strong>数学运算异常</strong></p><ul><li>当出现异常的运算条件时，抛出该异常。</li></ul><blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">double n = 100 / 0;//这里，出现了 数学运算异常</span><br></pre></td></tr></table></figure></blockquote><p><strong>数组下标越界异常</strong></p><ul><li>用非法索引（为负或超出范围）访问数组时，抛出该异常。</li></ul><blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">int[] nums = &#123;0, 0, 0, 0&#125;;</span><br><span class="line">nums[-50] = 100;//这里，出现了 数组下标越界异常</span><br></pre></td></tr></table></figure></blockquote><p><strong>类型转换异常</strong></p><ul><li>当试图把对象强制转换为不是实例的子类时，抛出该异常。</li></ul><blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">public class Example &#123;</span><br><span class="line">    public static void main(String[] args)&#123;</span><br><span class="line">        A a1 = new A1();</span><br><span class="line">        A2 a1 = (A2)a1;//这里，出现了 类型转换异常</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">class A &#123;&#125;</span><br><span class="line">class A1 extends A &#123;&#125;</span><br><span class="line">class A2 extends A &#123;&#125;</span><br></pre></td></tr></table></figure></blockquote><p><strong>数字格式不正确异常</strong></p><ul><li>当应用程序试图将字符串转成一种数值类型，但该字符串不能转换为适当格式时，抛出该异常。</li></ul><blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">String str = &quot;ABC&quot;;</span><br><span class="line">int num = Integer.parseInt(str);//这里，出现了 数字格式不正确异常</span><br></pre></td></tr></table></figure></blockquote><h3 id="常见的编译异常"><a href="#常见的编译异常" class="headerlink" title="常见的编译异常"></a>常见的编译异常</h3><blockquote><p>常见的编译异常：</p><ul><li>SQLException：操作数据库时，查询表可能发生异常</li><li>IOException：操作文件时，发生的异常</li><li>FileNotFoundException：操作一个不存在的文件时，发生的异常</li><li>ClassNotFoundException：加载类，而该类不存在时，发生的异常</li><li>EOFException：操作文件，到文档末尾，发生的异常</li><li>IllegalArguementException：参数异常</li></ul></blockquote><p>因为还没有学习 SQL、文件编程 等，这里不举例子</p><h2 id="异常处理"><a href="#异常处理" class="headerlink" title="异常处理"></a>异常处理</h2><blockquote><p>异常发生时，对异常的处理方式。如果没有显式异常处理，默认处理方式是 <code>throws</code></p><ul><li><code>try - chatch - finally</code>：程序员在代码中捕获发生的异常，自行处理</li><li><code>throws</code>：将发生的异常抛出，交给调用者（方法）来处理。最顶级的处理者就是 JVM</li></ul></blockquote><h3 id="try-catch-异常处理"><a href="#try-catch-异常处理" class="headerlink" title="try - catch 异常处理"></a>try - catch 异常处理</h3><blockquote><p>Java 提供 try 和 catch 块 来处理异常。try 块用于包含可能出错的代码，catch 块用于处理 try 块中的异常。可以根据需要在程序中有多个 <code>try - catch</code> 块。</p></blockquote><blockquote><p>基本语法</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">try &#123;</span><br><span class="line">//可疑代码</span><br><span class="line">//将异常生成对应的异常对象，传递给 catch 块</span><br><span class="line">&#125; catch(Exception e) &#123;</span><br><span class="line">//如果发生异常，执行这些代码</span><br><span class="line">&#125; finally &#123;</span><br><span class="line">    //无论是否异常，都执行这些代码</span><br><span class="line">    //finally 块可以不写</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></blockquote><blockquote><p>快捷键：选中代码后按 ctrl + alt + T</p></blockquote><h4 id="使用细节"><a href="#使用细节" class="headerlink" title="使用细节"></a>使用细节</h4><ol><li><p>如果异常发生了，则异常发生后面的代码块都不执行，直接进入 catch 块</p></li><li><p>如果异常未发生，则顺序执行 try 代码块，catch 块不执行</p></li><li><p>如果希望不管是否异常，都执行一些代码，则使用 finally</p></li><li><p>可以有多个 catch 捕获不同的异常。要求 子类异常在前，父类异常在后。</p><blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">try &#123;</span><br><span class="line">...</span><br><span class="line">&#125; catch (NullPointerException e) &#123;</span><br><span class="line">...</span><br><span class="line">&#125; catch (ArithmeticException e) &#123;</span><br><span class="line">...</span><br><span class="line">&#125; catch (ArrayIndexOutOfBoundsException e) &#123;</span><br><span class="line">...</span><br><span class="line">&#125; catch (Exception e)&#123;</span><br><span class="line">...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></blockquote></li><li><p>可以进行 try - finally 配合使用（不写 catch）。这种用法相当于没有捕获异常，此时程序如果出错会直接退出。</p><p>应用场景，就是写一段代码，不管是否发生异常，都必须执行某个业务逻辑。</p></li><li><p>如果没有出现异常，执行 try 中所有语句，不执行 catch 语句，最后执行 finally 语句</p></li><li><p>如果出现异常，则 try 块异常发生后，剩余语句不执行。之后执行 catch 语句，最后，执行 finally 语句。</p></li></ol><h3 id="throws-异常处理"><a href="#throws-异常处理" class="headerlink" title="throws 异常处理"></a>throws 异常处理</h3><blockquote><p>如果一个方法可能生成某种异常，但是并不能确定如何处理这种异常，则此方法应显式地声明抛出异常，表明该方法将不对这些异常进行处理，而由调用者负责处理</p><p>在方法中声明 <code>throws</code> 语句可以声明抛出异常的列表。<code>throws</code> 后面的异常类型可以是方法中产生的异常类型，也可以是它的父类。</p></blockquote><blockquote><p>语法</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">public void metord() throws FileNontFoundException ,NullPointerException &#123;</span><br><span class="line">...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></blockquote><h4 id="使用细节-1"><a href="#使用细节-1" class="headerlink" title="使用细节"></a>使用细节</h4><ol><li>对于 <strong>编译异常</strong>，程序中必须处理。</li><li>对于 <strong>运行异常</strong>，程序中诺没有处理，默认处理是 <code>throws</code></li><li>子类 重写 父类方法时，子类方法抛出的异常类型必须和父类一致，或者是父类抛出异常类型的子类型。</li><li>如果有 <code>try - catch</code> 就不必 <code>throws</code> 了</li></ol><h2 id="自定义异常"><a href="#自定义异常" class="headerlink" title="自定义异常"></a>自定义异常</h2><blockquote><p>当程序中出现了某些 “错误”，但该信息并未在 <code>Throwable</code> 子类中描述处理，这时候可以自己设计异常类，用于描述该错误信息</p></blockquote><ol><li>定义类：自定义异常类名，继承 RuntimeException 或 Exception</li><li>如果继承 Exception，属于 编译异常。</li><li>如果继承 RuntimeException，属于 运行异常。（一般来说，选这个。这样利用了默认处理机制，更方便）</li></ol><blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&gt;class Metords &#123;</span><br><span class="line">   public void method() &#123;</span><br><span class="line">       int n = 10;</span><br><span class="line">       if(n &gt; 100)&#123;</span><br><span class="line">           throw new CustomException(&quot;不能大于100&quot;);</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br><span class="line">&gt;&#125;</span><br><span class="line"></span><br><span class="line">&gt;class CustomException extends RuntimeException &#123;</span><br><span class="line">public CustomException(String message) &#123;</span><br><span class="line">super(message);</span><br><span class="line">&#125;</span><br><span class="line">&gt;&#125;</span><br></pre></td></tr></table></figure></blockquote><h3 id="throw-和-throws"><a href="#throw-和-throws" class="headerlink" title="throw 和 throws"></a>throw 和 throws</h3><table><thead><tr><th></th><th>意义</th><th>位置</th><th>后面跟的东西</th></tr></thead><tbody><tr><td><code>throws</code></td><td>异常处理的一种方式</td><td>方法声明时</td><td>异常类型</td></tr><tr><td><code>throw</code></td><td>手动生成异常对象关键字</td><td>方法体中</td><td>异常对象</td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 教程 </tag>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java 枚举和注解</title>
      <link href="/2022/12/03/learn/Java/Java%20%E6%9E%9A%E4%B8%BE%E5%92%8C%E6%B3%A8%E8%A7%A3/"/>
      <url>/2022/12/03/learn/Java/Java%20%E6%9E%9A%E4%B8%BE%E5%92%8C%E6%B3%A8%E8%A7%A3/</url>
      
        <content type="html"><![CDATA[<h2 id="枚举"><a href="#枚举" class="headerlink" title="枚举"></a>枚举</h2><p>把具体的对象一一列举出来的类，就称为 枚举类（enumeration）</p><p>实现方法：</p><ol><li>自定义枚举</li><li><code>enum</code> 关键字枚举</li></ol><h3 id="自定义枚举"><a href="#自定义枚举" class="headerlink" title="自定义枚举"></a>自定义枚举</h3><ol><li>构造器私有化</li><li>去掉 set 方法（可保留 get），防止属性被修改。因为枚举对象值通常为只读</li><li>在类内部直接创建固定对象。使用 <code>final</code> + <code>static</code> 共同修饰，对象名通常全部大写。</li><li>枚举对象按照需要可以有多个属性</li></ol><h3 id="enum-关键字"><a href="#enum-关键字" class="headerlink" title="enum 关键字"></a>enum 关键字</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">enum Example &#123;</span><br><span class="line"> RED(&quot;小红&quot;, 10), BLUE(&quot;小蓝&quot;, 11), YELLOW; //这句话要放在前面，第三个是无参</span><br><span class="line"> private String name;</span><br><span class="line"> private int age;</span><br><span class="line"></span><br><span class="line"> private Example(String name, int age) &#123;</span><br><span class="line">     this.name = name;</span><br><span class="line">     this.age = age;</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li>用关键字 <code>enum</code> 替代 <code>class</code></li><li>用 <code>常量名.(形参列表);</code> 代替创建对象（放在前面）。多个对象的场合，用 <code>,</code> 间隔。</li><li>如果使用 <code>enum</code> 枚举，要求将常量对象写在前面</li></ol><h4 id="使用细节"><a href="#使用细节" class="headerlink" title="使用细节"></a>使用细节</h4><ol><li><p>当我们用 <code>enum</code> 关键字开发一个枚举类时，默认会继承 java.lang.Enum 类，而且是一个 <code>final</code> 类。</p><p>这样，我们就能使用 Enum 中的相关方法。</p><p><strong>也正因为如此，<code>enum</code> 类不能继承其他类，亦不能被其它类继承</strong></p><p>不过，<code>enum</code> 类和其他类一样，可以实现接口。</p></li><li><p>传统的 <code>public ststic final RED(&quot;小红&quot;, 10);</code> 简化为 <code>RED(&quot;小红&quot;, 10);</code></p></li><li><p>如果使用无参构造器创建枚举对象，则 实参列表 和 <code>( )</code> 都能省略</p></li></ol><h4 id="Enum-类中的常用方法"><a href="#Enum-类中的常用方法" class="headerlink" title="Enum 类中的常用方法"></a>Enum 类中的常用方法</h4><ul><li><code>valueOf</code>：将字符串转换成枚举对象。要求字符串必须是已有的常量名，否则报异常。</li><li><code>values</code>：返回一个数组 <code>Example[]</code>，其中包含定义的所有枚举对象</li><li><code>getDeclaringClass</code>：得到枚举常量所属的 <code>class</code></li><li><code>name</code>：得到当前枚举常量的名称。建议优先用 <code>toString</code></li><li><code>ordinal</code>：输出该枚举对象的次序&#x2F;编号（从 0 开始编号。如上例 <code>BLUE.ordinal = 1</code>）</li><li><code>compareTo</code>：比较两个枚举常量的编号（调用常量编号 减去 传入常量编号）</li><li><code>clone</code>：枚举类不能 <code>clone</code>，所以，这是一个只会抛出异常的方法</li></ul><h2 id="注解"><a href="#注解" class="headerlink" title="注解"></a>注解</h2><p>注解（Annotation）也被称为元数据（Metadata）。用于修饰 包、类、方法、属性、构造器、局部变量 等数据信息</p><p>和注释一样，注解不影响程序逻辑，但注解可以被编译或运行，相当于嵌入在代码中的补充信息</p><p>在 JavaSE 中，注解的使用目的比较简单，例如 标记过时的功能，忽略警告 等。在 JavaEE 中注解占据了更重要的角色，例如用于配置应用程序的任何切面，代替 JavaEE 旧版中所遗留的繁冗代码和 XML 配置等。</p><ol><li>使用 <code>@Annotation</code> 时要在前面增加 <code>@</code> 符号，并把该注解当成一个修饰符使用。用于修饰它支持的程序元素。</li><li>三个基本的 <code>@Annotation</code>：<ul><li><code>@Override</code>：限定某个方法，是 重写 父类方法。该注解只能用于方法。如果你写了该注解，编译器会替你校验，看看是不是真的 重写 了父类方法。</li><li><code>@Deprecated</code>：用于表示某个程序元素（类、方法等）已经过时</li><li><code>@SuppressWarnings()</code>：抑制编辑器警告</li></ul></li><li>如果发现 <code>public @interface XXX&#123;&#125;</code> 这种东西，说明是定义了一个注解类 <code>XXX</code>。这里的 <code>@interface</code> 不代表接口（<code>interface</code>）。</li></ol><h3 id="Override"><a href="#Override" class="headerlink" title="@Override"></a>@Override</h3><ol><li><code>@Override</code> 表示指定重写父类的方法（从编译器层面验证），如果父类没有该方法，就报错</li><li>不写该注解，重写依然构成重写</li><li><code>@Override</code> 只能修饰方法，不能修饰其他 类、包、属性等</li><li>查看 <code>@Override</code> 注解源码为 <code>@Target(ElementType.METHOD)</code> 说明只能修饰方法</li><li><code>@Target</code> 是修饰注解的注解，称为 元注解</li></ol><h3 id="Deprecated"><a href="#Deprecated" class="headerlink" title="@Deprecated"></a>@Deprecated</h3><ol><li><p><code>@Deprecated</code> 表示指定的某个程序元素（类、方法等）已过时</p></li><li><p>不推荐使用，但仍能使用</p></li><li><p>可以修饰方法、类、字段、包、参数</p><p><code>@Target(value=&#123;CONSTRUCTOR, FIELD, LOCAL_VARIABLE, METHOD, PACKAGE, PARAMETER, TYPE&#125;)</code></p></li><li><p><code>@Deprecated</code> 可以做到新旧版本的兼容和过度</p></li></ol><h3 id="SuppressWarnings"><a href="#SuppressWarnings" class="headerlink" title="@SuppressWarnings()"></a>@SuppressWarnings()</h3><ol><li><p>当我们不想看到警告信息时，用 <code>@SuppressWarnings()</code></p><p>语法：<code>@SuppressWarnings(&#123;&quot;...&quot;&#125;)</code></p><p>在后面 <code>(&#123;&quot;unused&quot;, &quot;unchecked&quot;&#125;)</code> 这样写入你希望抑制的信息，以下是所有可以输入的关键字</p></li></ol><table><thead><tr><th><strong>关键字</strong></th><th><strong>用途</strong></th></tr></thead><tbody><tr><td>all</td><td>抑制所有警告</td></tr><tr><td>boxing</td><td>抑制与装箱&#x2F;解装箱操作相关的警告</td></tr><tr><td>cast</td><td>抑制与强制转换操作相关的警告</td></tr><tr><td>dep-ann</td><td>抑制与已弃用注释相关的警告</td></tr><tr><td>deprecation</td><td>抑制与弃用有关的警告</td></tr><tr><td>fallthrough</td><td>抑制与 switch 语句中丢失断点相关的警告</td></tr><tr><td>finally</td><td>抑制不返回的 finally 块的相关警告</td></tr><tr><td>hiding</td><td>抑制与隐藏变量的局部变量相关的警告</td></tr><tr><td>incomplete-switch</td><td>抑制与 switch 语句中缺少条目相关的警告（enum）</td></tr><tr><td>nls</td><td>抑制与 非nls 字符串字面值相关的警告</td></tr><tr><td>null</td><td>抑制相对于null分析的警告</td></tr><tr><td>rawtypes</td><td>在类参数上使用泛型时，抑制与非特定类型相关的警告</td></tr><tr><td>restriction</td><td>抑制与不推荐或禁止引用有关的警告</td></tr><tr><td>serial</td><td>抑制与可序列化类缺少serialVersionUID字段相关的警告</td></tr><tr><td>static-access</td><td>抑制与不正确的静态访问有关的警告</td></tr><tr><td>synthetic-access</td><td>抑制与未优化的内部类访问相关的警告</td></tr><tr><td>unchecked</td><td>抑制与未检查的操作相关的警告</td></tr><tr><td>unqualified-field-access</td><td>抑制与字段访问不合格相关的警告</td></tr><tr><td>unused</td><td>抑制与未使用代码相关的警告</td></tr></tbody></table><ol start="2"><li><code>@SuppressWarnings</code> 的范围与你放置的位置相关。</li></ol><h3 id="JDK-的元注解（了解即可）"><a href="#JDK-的元注解（了解即可）" class="headerlink" title="JDK 的元注解（了解即可）"></a>JDK 的元注解（了解即可）</h3><blockquote><p>JDK 的 元注解 是用于修饰其他注解的注解</p></blockquote><ol><li><p><code>@Rentention</code>：指定注解的作用范围，有三种范围 <code>SOURCE</code> <code>CLASS</code> <code>RUNTIME</code></p><p><code>@Rentention</code> 的三种值：</p><ul><li><code>RententionPolicy.SOURCE</code>：编译器使用后，直接丢弃这种策略的注释</li><li><code>RententionPolicy.CLASS</code>：编译器把注解记录在 class 文件中。当运行 Java 程序时， JVM 不会保留注释。这是默认值</li><li><code>RententionPolicy.RUNTIME</code>：编译器把注解记录在 class 文件中。当运行 Java 程序时，JVM 会保留注解。程序可以通过反射获取该注解</li></ul></li><li><p><code>@Target</code>：指定注解的使用范围</p><p><code>@Target(&#123;TYPE, FIELD, METHOD, PARAMETER, CONSTRUCTOR, LOCAL_VARIABLE&#125;)</code></p></li><li><p><code>@Documented</code>：指定该注解会不会在 Javadoc 体现</p></li><li><p><code>@Inherited</code>：子类会继承父类注解</p></li></ol>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 教程 </tag>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java 面向对象编程（高级）</title>
      <link href="/2022/12/02/learn/Java/Java%20%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%BC%96%E7%A8%8B%EF%BC%88%E9%AB%98%E7%BA%A7%EF%BC%89/"/>
      <url>/2022/12/02/learn/Java/Java%20%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%BC%96%E7%A8%8B%EF%BC%88%E9%AB%98%E7%BA%A7%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<h2 id="类变量和类方法"><a href="#类变量和类方法" class="headerlink" title="类变量和类方法"></a>类变量和类方法</h2><h3 id="类变量"><a href="#类变量" class="headerlink" title="类变量"></a>类变量</h3><blockquote><p>类变量：也叫 静态变量&#x2F;静态属性。是该类所有对象共享的变量。任何一个该类对象访问时都是相同的值，任何一个该类对象修改时也是同一个变量。</p><p>语法（推荐）：<code>访问修饰符 static 数据类型 变量名;</code></p><p>或者也可以：<code>static 访问修饰符 数据类型 变量名;</code></p><p>根据 JDK 版本的不同，类变量存放在 堆 中或 方法区 中。</p></blockquote><ol><li><p>什么时候需要用类变量：</p><p>当我们需要让某个类的所有对象都共享一个变量时，就可以考虑使用类变量（静态变量）</p></li><li><p>类变量 与 实例变量（普通属性）的区别：</p><p>类变量 是该类所有对象共享的，而 实例变量 是每个对象独享的</p></li><li><p>加上 <code>static</code> 称为 类变量 或 静态变量。否则称为 实例变量&#x2F;普通变量&#x2F;非静态变量</p></li><li><p>静态变量 可以通过 <code>类名.类变量名;</code> 或 <code>对象名.类变量名;</code> 来访问。但 Java 设计者推荐我们用 <code>类名.类变量名;</code> 来访问。（需满足访问权限和范围）</p></li><li><p>类变量 是在加载类时就初始化了。所以，没有创建对象实例也能访问。</p></li><li><p>类变量 的生命周期是随着 类的加载 开始，随着 类的消亡 而销毁。</p></li><li><p>特别地：<strong>一个 null 对象也可以访问静态变量 &#x2F; 静态方法</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">public class Test&#123;</span><br><span class="line">    static int n = 0;</span><br><span class="line">    static void met() &#123;</span><br><span class="line">        System.out.println(++n);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    public static void main(String[] args)&#123;</span><br><span class="line">        Test t = null;</span><br><span class="line">        System.out.println(t.n);//这样不会报错</span><br><span class="line">        t.met();//这样也不会报错</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h3 id="类方法"><a href="#类方法" class="headerlink" title="类方法"></a>类方法</h3><blockquote><p>当方法使用 <code>static</code> 修饰后，就是 静态方法。静态方法就能访问静态属性。如果我们不希望创建实例，也能调用方法，这个场合把方法做成静态方法是合适的。开发工具类时就可以如此做。</p></blockquote><ol><li>类方法和普通方法都是随着类的加载而加载，将结构信息存储在 方法区。</li><li>类方法中不允许使用和对象有关的关键字。所以，类方法没有 <code>this</code> 或 <code>super</code></li><li>类方法可以通过类名调用，也能通过对象名调用。普通方法不能通过类名调用。</li><li>类方法 中只能访问 类变量 或 类方法</li><li>普通方法既可以访问普通方法也可以访问类方法</li></ol><h2 id="理解-main-方法语法"><a href="#理解-main-方法语法" class="headerlink" title="理解 main 方法语法"></a>理解 <code>main</code> 方法语法</h2><blockquote><p><code>public static void main(String[] args)&#123;...&#125;</code></p></blockquote><ol><li><p><code>main</code> 方法 是 JVM 调用的方法。所以该方法的 访问权限 必须为 <code>public</code></p></li><li><p>JVM 在执行 <code>main</code> 方法时不必创建对象，所以 <code>main</code>方法 必须为 <code>static</code></p></li><li><p>该方法接收 <code>String</code> 类型的数组参数。该数组中保存执行 Java 命令 时传递给所运行的类的参数。</p><blockquote><p>工作台中：<code>javac 执行的程序.java</code></p><p><code>java 执行的程序 参数1(arg[0]) 参数2(arg[1]) 参数3(arg[2]) ..</code></p></blockquote></li><li><p>在 <code>main</code> 方法 中，我们可以直接调用 <code>main</code> 方法 所在类的静态方法或静态属性。</p><p>但是，不能直接访问该类中的非静态成员，必须创建该类的一个实例后才能通过该实例访问非静态成员。</p></li></ol><h2 id="代码块"><a href="#代码块" class="headerlink" title="代码块"></a>代码块</h2><blockquote><p>代码块：又称为 初始化块。属于类中的成员。类似于方法，将逻辑语句封装在方法体中，通过 <code>&#123; &#125;</code> 包围起来。</p><p>和方法不同，没有方法名，没有返回，没有参数，只有方法体，而且不用通过对象或类 显式调用，而是加载类时，或创建对象时 隐式调用。</p><p>语法：<code>[修饰符]&#123;代码&#125;;</code></p></blockquote><ol><li>修饰符 是可选项，可不写。要写的话，只能写 <code>static</code></li><li>代码块分为两类：<ul><li>静态代码块：有 <code>static</code></li><li>普通代码块：无 <code>static</code></li></ul></li><li>逻辑语句可以为任意的逻辑语句。</li><li><code>;</code> 可以写，也可以省略。建议写上。</li><li>代码块相当于另一种形式的构造器（构造器的补充机制），可以做初始化操作</li><li>如果多个构造器中都有重复语句，就可以抽取到初始化块中，提高代码复用率。这样，不管用哪个构造器，都会执行代码块。</li></ol><h3 id="使用细节"><a href="#使用细节" class="headerlink" title="使用细节"></a>使用细节</h3><ol><li><code>static</code> 代码块：作用是对类进行初始化。<strong>随着 类的加载 会且只会执行一次</strong>。相对的：普通代码块每创建一个对象就执行一次。</li></ol><ul><li><p><strong>类什么时候被加载？</strong></p><ul><li><p>创建对象实例时（new）</p></li><li><p>创建子类对象实例，父类也会加载</p></li><li><p>使用类的静态成员时（父类也会加载）</p></li></ul><p>以上情况下类会被加载。加载后不需要再次加载，所以，静态代码块也只会执行一次。</p></li></ul><ol start="2"><li><p>创建一个对象时，在 <strong>一个类里</strong> 调用顺序是：</p><ul><li>调用静态代码块 和 静态属性初始化。这两者优先级相同，多个存在时按照定义的顺序依次执行。</li><li>调用普通代码块 和 普通属性初始化。这两者优先级也相同。</li><li>调用构造器。</li></ul></li><li><p><code>构造器</code> 的最前面其实隐含了 <code>super();</code> 和 <code>调用普通代码块</code>。而静态相关的代码块，属性初始化，在类加载时就执行完毕了。</p><p>这样，创建一个对象时，在 <strong>有继承关系的多个类里</strong> 调用顺序是：</p><ul><li>父类 静态代码块 和 静态初始化</li><li>子类 静态代码块 和 静态初始化</li><li>父类 普通代码块 和 普通初始化</li><li>父类 构造器</li><li>子类 普通代码块 和 普通初始化</li><li>子类 构造器</li></ul></li><li><p>静态代码块 只能调用 静态成员。普通代码块 能调用 任意成员。</p></li></ol><h2 id="单例设计模式"><a href="#单例设计模式" class="headerlink" title="单例设计模式"></a>单例设计模式</h2><blockquote><p>什么是设计模式：设计模式是在大量的实践中总结和理论化后优选的代码结构、编程风格、解决问题的思考方式。设计模式就像是经典的棋谱，免去我们自己再思考和摸索。</p></blockquote><p>单例设计模式：采取一定的方法，保证再整个的软件系统中，对某个类只能存在一个对象实例，并且该类只提供一个取得其对象实例的方法</p><h3 id="应用实例"><a href="#应用实例" class="headerlink" title="应用实例"></a>应用实例</h3><blockquote><p>后面会学更多，这里先展示两种：饿汉式、懒汉式</p></blockquote><h4 id="饿汉式"><a href="#饿汉式" class="headerlink" title="饿汉式"></a>饿汉式</h4><p>步骤如下：</p><ol><li><p>构造器私有化（防止用户直接 new）</p></li><li><p>类的内部创建对象</p></li><li><p>向外暴露一个静态的公共方法</p></li><li><p>代码实现</p><blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">class GF&#123;</span><br><span class="line">       private String name;</span><br><span class="line">    private static GF gf = new GF(&quot;萝茵&quot;);</span><br><span class="line">       private GF(String name)&#123;</span><br><span class="line">           this.name = name;</span><br><span class="line">       &#125;</span><br><span class="line">       public static GF getGF()&#123;</span><br><span class="line">           return gf;</span><br><span class="line">       &#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>对象，通常都是重量级的对象</p><p>有时，我们用不到这个创建的对象，那个场合，会造成资源浪费。</p></blockquote></li></ol><h4 id="懒汉式"><a href="#懒汉式" class="headerlink" title="懒汉式"></a>懒汉式</h4><p>步骤如下：</p><ol><li><p>构造器私有化</p></li><li><p>定义一个静态属性对象</p></li><li><p>提供一个静态的公共方法，可以返回对象。如果静态对象为空，则创建对象</p></li><li><p>代码实现</p><blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">  &gt;class GF&#123;</span><br><span class="line">   private String name;</span><br><span class="line">private static GF gf;</span><br><span class="line">   private GF(String name)&#123;</span><br><span class="line">       this.name = name;</span><br><span class="line">   &#125;</span><br><span class="line">   public static GF getGF()&#123;</span><br><span class="line">       if(gf == null)&#123;</span><br><span class="line">           gf = new GF(&quot;萝茵&quot;);</span><br><span class="line">       &#125;</span><br><span class="line">       return gf;</span><br><span class="line">   &#125; </span><br><span class="line">  &gt;&#125;</span><br></pre></td></tr></table></figure></blockquote></li></ol><h4 id="两种方法对比"><a href="#两种方法对比" class="headerlink" title="两种方法对比"></a>两种方法对比</h4><ol><li>二者创建对象的时机不同。饿汉式在加载类信息时创建，懒汉式在使用时才创建</li><li>饿汉式可能造成资源浪费，懒汉式可能存在线程安全问题（学习[线程]后会进行完善）。</li><li>Java SE 标准类中 java.lang.Runtime 就是一个单例模式。</li></ol><h2 id="final-关键字"><a href="#final-关键字" class="headerlink" title="final 关键字"></a>final 关键字</h2><blockquote><p><code>final</code> 可以修饰 类、属性、方法、局部变量</p><p>以下情况下，可能用到 <code>final</code></p><ol><li><code>final</code> 修饰类：该类不能被继承</li><li><code>final</code> 修饰方法：该方法不能被重写</li><li><code>final</code> 修饰值：该值不能被修改</li></ol></blockquote><h3 id="使用细节-1"><a href="#使用细节-1" class="headerlink" title="使用细节"></a>使用细节</h3><ol><li><p><code>final</code> 修饰的属性又叫常量，一般用 XX_XX_XX 来命名（全大写字母+下划线）</p></li><li><p><code>final</code> 修饰的属性在定义时，必须赋初始值，且之后不能再修改。赋值可以在下列位置之一：</p><ul><li>定义时</li><li>构造器中</li><li>代码块中</li></ul><p>注意：如果 <code>final</code> 修饰的属性是静态的，则只能在以下位置赋值。</p><ul><li>定义时</li><li>静态代码块中</li></ul></li><li><p><code>final</code> 类不能继承，但能实例化对象。对的，是可以的。</p></li><li><p>如果不是 <code>final</code> 类，但含有 <code>final</code> 方法，虽然该方法不能重写，但能被继承。</p></li><li><p><code>final</code> 类可以有 <code>final</code> 方法。可以，但没必要。</p></li><li><p><code>final</code> 不能修饰构造方法。</p></li><li><p><code>final</code> 和 <code>static</code> 搭配使用，效率更高（那个场合，虽然顺序不限，还是推荐 <code>static</code> 在前）。底层编译器做了优化处理。这样做，调用 <strong>属性（定义时赋值）</strong> 时居然 <strong>不会造成类的加载！</strong></p></li><li><p>包装类（Integer、Double、Float、Boolean、String等）都是 <code>final</code> 类，都不能被继承。</p></li></ol><h2 id="抽象类"><a href="#抽象类" class="headerlink" title="抽象类"></a>抽象类</h2><blockquote><p>当父类的某些方法需要声明，却不知道如何实现时，可以将其声明为抽象方法。那个场合，要将该类声明为 <code>abstract</code> 类。</p><p>抽象类的价值更多是用于设计。设计者设计好后，让子类继承并实现。也是考官爱问的考点。</p></blockquote><blockquote><p>定义抽象类：<code>访问修饰符 abstract 类名&#123;...&#125;</code></p><p>定义抽象方法（注意：无方法体）：<code>访问修饰符 abstract 返回值 方法名(形参列表);</code></p></blockquote><h3 id="使用细节-2"><a href="#使用细节-2" class="headerlink" title="使用细节"></a>使用细节</h3><ol><li>抽象类不能被实例化</li><li>抽象类不一定包含抽象方法。也就是说，抽象类可以没有 <code>abstract</code>方法</li><li>一旦包含 <code>abstract</code> 方法，则该类一定要声明为 <code>abstract</code></li><li><code>abstract</code> 只能修饰 类 和 方法，不能修饰其他。</li><li>抽象类可以有任意成员（非抽象方法、构造器、静态属性等）。即，抽象类本质还是类。</li><li>抽象方法不能有主体。即，抽象方法不能实现。</li><li>如果一个类继承了 <code>abstract</code> 类，则其必须实现所有 <code>abstract</code> 方法，除非其自己也是 <code>abstract</code> 类。</li><li>抽象方法不能用 <code>private</code> <code>final</code> <code>static</code> 来修饰。因为，这些关键词都和 重写 相违背。</li></ol><h3 id=""><a href="#" class="headerlink" title=""></a></h3><h2 id="接口"><a href="#接口" class="headerlink" title="接口"></a>接口</h2><blockquote><p>接口就是给出一些没有实现的方法，封装到一起，到某个类要用的时候，再根据具体情况把这些方法写出来。</p><p>语法：<code>interface 接口名&#123;...&#125;</code></p><p><code>class 类名 implements 接口名&#123;...必须实现接口的抽象方法...&#125;</code></p><p>注意：JDK 7.0 以前，接口中只能是抽象方法。而 JDK 8.0 后，接口可以有静态（<code>static</code>）方法、默认（<code>default</code>）方法。</p><p>在接口中，抽象方法可以省略 <code>abstract</code></p></blockquote><p>接口中可以存在：</p><ul><li>属性（只有静态 <code>static</code> 属性，可以不加 <code>static</code> 关键字）</li><li>方法（抽象 <code>abstract</code> 方法、默认 <code>default</code> 实现方法、静态 <code>static</code> 方法）</li></ul><h3 id="使用细节-3"><a href="#使用细节-3" class="headerlink" title="使用细节"></a>使用细节</h3><ol><li>接口 不能被实例化。</li><li>接口中所有方法都是 <code>public</code> 方法。接口中的 抽象方法 可以不用 <code>abstract</code> 修饰。</li><li>一个普通类实现接口，就必须把该接口所有方法都实现。（用快捷键吧 <code>alt + enter</code>）</li><li>抽象类实现接口，可以不用实现接口的方法。</li><li>一个类可以同时实现多个接口。<code>class Name implements In1,In2&#123;...&#125;</code></li><li>接口中的属性只能是 <code>final</code> 的，并且是 <code>public static final</code> 修饰符。修饰符就算不写，还是这样。</li><li>接口中属性的访问形式：<code>接口名.属性名</code></li><li>接口不能 <strong>继承</strong> 其他的类，但可以 <strong>继承</strong> 多个别的接口。（不是也不能 实现 别的接口）</li><li>接口的修饰符只能是 <code>public</code> 和 默认。这点和类的修饰符相同。</li></ol><h3 id="实现接口-vs-继承类"><a href="#实现接口-vs-继承类" class="headerlink" title="实现接口 vs 继承类"></a>实现接口 vs 继承类</h3><ol><li>当子类继承父类，就自动拥有父类的所有功能。如果需要扩展功能，可以通过接口方式扩展。</li><li>可以认为，接口 是对于 Java 单继承机制的补充。</li><li>继承的价值主要在于：解决代码的复用性和可维护性。</li><li>接口的价值主要在于：设计。设计好各种规范，让其他类去实现这些方法。</li><li>接口比继承更加灵活。继承需要满足 is - a 的关系，而接口只需要满足 like - a 关系。</li><li>接口在一定程度上实现代码解耦。（即：接口规范性 + 动态绑定机制）</li></ol><h3 id="接口的多态特性"><a href="#接口的多态特性" class="headerlink" title="接口的多态特性"></a>接口的多态特性</h3><ol><li><p>多态参数（接口的引用可以指向实现了接口的类的对象）</p><blockquote><p><code>viod work(Inerface01 i1)&#123;...&#125;</code> 参数可以传入任意实现该接口的类</p></blockquote></li><li><p>多态数组</p></li><li><p>接口存在多态传递现象</p></li></ol><h3 id="接口中的static-default"><a href="#接口中的static-default" class="headerlink" title="接口中的static&#x2F;default"></a>接口中的static&#x2F;default</h3><ul><li><p>接口中的default方法，可以写方法内容。</p></li><li><p>接口中的default方法不强制实现类重写，不会影响到已有的实现类。</p></li><li><p>接口的实现类，可以调用接口中的default方法</p></li><li><p>接口中的static方法，可以写方法内容。</p></li><li><p>接口中的static方法不允许实现类重写(如果重写方法加上@Override会报错)，不会影响到已有的实现类。</p></li><li><p>接口中的static方法，可以直接通过接口名称调用</p></li></ul><p>细节</p><ol><li>default</li></ol><ul><li>当继承的父类和实现的接口中有相同签名的方法时，优先使用父类的方法。</li><li>当接口的父接口中也有同样的默认方法时，就近原则调用子接口的方法。</li><li>当实现的多个接口中有相同签名的方法时，必须在实现类中通过重写方法解决冲突问题，否者无法通过编译，在重写的方法中可以通过 接口名.super.方法名(); 的方式显示调用需要的方法。</li></ul><ol start="2"><li>static</li></ol><ul><li>接口中的数据对所有实现类只有一份,所以是static</li><li>要使实现类为了向上转型成功,所以必须是final的（接口不能被实例化，所以接口里面如果是变量的话不会被赋初始值这样就会出问题，所以必须是final的。其实还是为了安全考虑的）</li></ul><h2 id="内部类"><a href="#内部类" class="headerlink" title="内部类"></a>内部类</h2><blockquote><p>一个类的内部又完整的嵌套了另一个类结构。被嵌套的类被称为 内部类。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">class Outer&#123;//外部类</span><br><span class="line">class Inner&#123;//内部类</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">class Other&#123;//外部其他类</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>内部类的最大特点是可以直接访问私有属性，并且可以体现类与类之间的包含关系。</p></blockquote><h3 id="四种内部类"><a href="#四种内部类" class="headerlink" title="四种内部类"></a>四种内部类</h3><p>分别是：</p><ul><li>定义在外部类的局部位置上<ul><li>局部内部类：有 类名</li><li><strong>匿名内部类：无 类名</strong></li></ul></li><li>定义在外部类的成员位置上<ul><li>成员内部类：无 <code>static</code> 修饰</li><li>静态内部类： <code>static</code> 修饰的类</li></ul></li></ul><h3 id="局部内部类"><a href="#局部内部类" class="headerlink" title="局部内部类"></a>局部内部类</h3><blockquote><p>局部内部类：定义在外部类的局部位置上，并且有类名。（局部位置？比如：方法&#x2F;代码块里）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">class Outer &#123;//外部类</span><br><span class="line">    public void tools01() &#123;</span><br><span class="line">        class Inner &#123;//局部内部类</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></blockquote><h4 id="使用细节-4"><a href="#使用细节-4" class="headerlink" title="使用细节"></a>使用细节</h4><ol><li><p>定义在外部类的局部位置上，并且有类名。</p></li><li><p>可以访问外部类的所有成员，包含私有成员</p></li><li><p>局部内部类可以 直接访问 外部类的成员。</p></li><li><p>不能添加 访问修饰符，因为其地位相当于局部变量。但，可以使用 <code>final</code>，因为局部变量也能用 <code>final</code></p></li><li><p>作用域 仅仅在定义它的方法或代码块中</p></li><li><p>外部类 在方法中，可以创建 局部内部类 的对象实例，然后调用方法。</p></li><li><p>外部其他类 不能访问 局部内部类</p></li><li><p>如果外部类和局部内部类的成员重名时，默认遵循就近原则。那个场合，访问外部类成员使用 <code>外部类名.this.变量名</code></p><p><code>外部类名.this</code> 本质就是 外部类的对象。即，调用了该方法（上例的 <code>tools01</code> ）的对象</p></li></ol><h3 id="匿名内部类"><a href="#匿名内部类" class="headerlink" title="匿名内部类"></a>匿名内部类</h3><blockquote><p>匿名内部类：定义在外部类的局部位置，且没有类名</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt;new 类/接口 (参数列表) &#123;</span><br><span class="line">   类体</span><br><span class="line">&gt;&#125;</span><br></pre></td></tr></table></figure><p>匿名内部类本质是没有名字的类，而且是内部类。同时，还是一个对象。</p><p>可以用匿名内部类简化开发</p></blockquote><blockquote><p>一个例子</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&gt;class Outer &#123;//外部类</span><br><span class="line">   public void tools01() &#123;</span><br><span class="line">       Inter whatEver = new Inter()&#123;//匿名内部类            </span><br><span class="line">       &#125;;</span><br><span class="line">   &#125;</span><br><span class="line">&gt;&#125;</span><br><span class="line">&gt;interface Inter&#123;</span><br><span class="line">&gt;&#125;</span><br></pre></td></tr></table></figure><p>其实，这个匿名内部类 <code>new Inter()&#123;&#125;</code> 的运行类型就是 <code>class XXXX implements Inter</code>。系统自动分配的名字是 <code>Outer$1</code>（<code>whatEver.getClass = &quot;Outer$1&quot;</code>）</p><p>JDK 在创建匿名内部类 <code>Outer$1</code> 时，立即创建了一个对象实例，并将地址返回给了 <code>whatEver</code></p><p>匿名内部类使用一次后就不能再次使用（<code>Outer$1</code> 就这一个了）</p></blockquote><h4 id="使用细节-5"><a href="#使用细节-5" class="headerlink" title="使用细节"></a>使用细节</h4><ol><li>匿名内部类语法比较独特。其既是一个类的定义，也是一个对象。因此，从语法上看，其既有 定义类的特征，也有 创建对象的特征。</li><li>可以访问外部类的所有成员，包括私有的。</li><li>局部内部类可以 直接访问 外部类的成员。</li><li>不能添加 访问修饰符，因为其地位相当于局部变量。但，可以使用 <code>final</code>，因为局部变量也能用 <code>final</code></li><li>作用域：仅仅在定义它的方法或方法快中</li><li>外部其他类 不能访问 匿名内部类</li><li>如果外部类和匿名内部类的成员重名时，默认遵循就近原则。那个场合，访问外部类成员使用 <code>外部类名.this.变量名</code></li></ol><h4 id="使用场景"><a href="#使用场景" class="headerlink" title="使用场景"></a>使用场景</h4><ol><li><p>当作实参直接传递，简洁高效</p><blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">public class Homework1 &#123;</span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        new Cellphone().clock(new Bell() &#123;//看这里看这里</span><br><span class="line">            @Override</span><br><span class="line">            public void belling() &#123;</span><br><span class="line">                System.out.println(&quot;小懒猪起床了！&quot;);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">interface Bell &#123;</span><br><span class="line">    void ringing();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class Cellphone&#123;</span><br><span class="line">    public void clock(Bell bell)&#123;</span><br><span class="line">        bell.ringing();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></blockquote></li></ol><h3 id="成员内部类"><a href="#成员内部类" class="headerlink" title="成员内部类"></a>成员内部类</h3><blockquote><p>成员内部类：定义在外部类的成员位置，并且没有 <code>static</code> 修饰。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">class Outer&#123;</span><br><span class="line">class Inner&#123;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></blockquote><h4 id="使用细节-6"><a href="#使用细节-6" class="headerlink" title="使用细节"></a>使用细节</h4><ol><li>可以直接访问外部类的所有成员，包括私有的</li><li>可以添加任意访问修饰符。因为，成员内部类的地位就是一个成员。</li><li>作用域 和外部类其他成员相同，为整个类体。</li><li>局部内部类可以 直接访问 外部类的成员。</li><li>外部类可以通过创建对象的方式访问成员内部类</li><li>外部其他类访问成员内部类<ul><li><code>Outer.Inner name = Outer.new Inner();</code> 下个方法的缩写</li><li><code>Outer.Inner name = new Outer().new Inner();</code></li><li>在外部类中编写一个方法，返回一个 <code>Inner</code> 的对象实例（就是对象的 getter）</li></ul></li><li>如果外部类和匿名内部类的成员重名时，默认遵循就近原则。那个场合，访问外部类成员使用 <code>外部类名.this.变量名</code></li></ol><h3 id="静态内部类"><a href="#静态内部类" class="headerlink" title="静态内部类"></a>静态内部类</h3><blockquote><p>静态内部类：定义在外部类的成员位置，经由 <code>static</code> 修饰。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">class Outer&#123;</span><br><span class="line">static class Inner&#123;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></blockquote><h4 id="使用细节-7"><a href="#使用细节-7" class="headerlink" title="使用细节"></a>使用细节</h4><ol><li>可以直接访问外部类的所有 <strong>静态</strong> 成员，包括私有的。但不能访问非静态成员</li><li>可以添加访问修饰符。因为，静态内部类的地位就是一个成员。</li><li>作用域 和其他成员相同，为整个类体。</li><li>静态内部类可以 直接访问 外部类的成员。</li><li>外部类可以通过创建对象的方式访问静态内部类</li><li>外部其他类访问静态内部类<ul><li><code>Outer.Inner name = new Outer.Inner();</code> 即通过类名直接访问</li><li>在外部类中编写一个方法，返回一个 <code>Inner</code> 的对象实例</li><li>如果外部类和匿名内部类的成员重名时，默认遵循就近原则。那个场合，访问外部类成员使用 <code>外部类名.变量名</code>。<em>（怎么不一样了呢？因为静态内部类访问的都是静态成员）</em></li></ul></li></ol>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 教程 </tag>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java 面向对象编程（中级）</title>
      <link href="/2022/12/01/learn/Java/Java%20%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%BC%96%E7%A8%8B%EF%BC%88%E4%B8%AD%E7%BA%A7%EF%BC%89/"/>
      <url>/2022/12/01/learn/Java/Java%20%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%BC%96%E7%A8%8B%EF%BC%88%E4%B8%AD%E7%BA%A7%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<blockquote><p>IDE：集成开发环境</p><ul><li><p>IDEA</p></li><li><p>Eeclipse：一个开源的、基于 Java 的可扩展开发平台。是由 IBM 公司开发，在 2001 年 11 月贡献给开源社区的，目前最优秀的 Java 开发 IDE 之一。</p></li></ul></blockquote><h2 id="IDEA-的使用"><a href="#IDEA-的使用" class="headerlink" title="IDEA 的使用"></a>IDEA 的使用</h2><blockquote><p>IDEA：全程 IntelliJ IDEA。在业界被公认为最好的 Java 开发工具。是捷克 JetBrains 公司的产品。除了 Java 开发，还支持 HTML，CSS，PHP，MySQL，Python 等。</p></blockquote><h3 id="常用快捷键"><a href="#常用快捷键" class="headerlink" title="常用快捷键"></a>常用快捷键</h3><ul><li>删除当前行：<code>ctrl + Y</code></li><li>复制当前行：<code>ctrl + D</code></li><li>补全代码：<code>alt + /</code></li><li>添加 &#x2F; 取消注释：<code>ctrl + /</code></li><li>导入该行需要的类：<code>alt + enter</code></li><li>快速格式化代码：<code>ctrl + alt + L</code></li><li>快速运行程序：<code>shift + F10</code>（我改成了<code>alt + R</code>）</li><li>生成构造器：<code>alt + insert</code></li><li>查看一个类的层级关系：<code>ctrl + H</code></li><li>定位一个方法：把光标放在一个方法上，按 <code>ctrl + B</code></li><li>自动分配变量名：在后面加上 <code>.var</code></li><li>查看模板快捷键：<code>ctrl + J</code></li><li>快速环绕代码：<code>ctrl + alt + T</code></li></ul><h3 id="模板快捷键"><a href="#模板快捷键" class="headerlink" title="模板快捷键"></a>模板快捷键</h3><ul><li><code>main</code>：<code>public static void main(String[] args) &#123;&#125;</code></li><li><code>sout</code>：<code>System.out.println();</code></li><li><code>fori</code>：<code>for (int i = 0; i &lt; ; i++) &#123;&#125;</code></li><li><code>xxx.for</code>：<code>for(int i = 0; i &lt; xxx; i++) &#123;&#125;</code></li></ul><p>更多的请在 File - Settings - Editor - Live template 中查看或添加</p><p>或者，通过下列快捷键查看</p><ul><li><code>ctrl + J</code>：查看模板快捷键</li></ul><h2 id="包"><a href="#包" class="headerlink" title="包"></a>包</h2><blockquote><p>包的作用：1. 区分相同名字的类 2. 当类很多时，便于管理 3. 控制访问范围</p><p>语法：<code>package com.name</code> 其中 <code>com</code> <code>name</code> 分别是 一级 和 二级目录，用 <code>.</code> 分隔</p><p>包的本质：就是创建不同 文件夹&#x2F;目录 来保存 类 文件</p></blockquote><p>如何使用包中的对象：</p><ol><li><p>先引入包，之后创建对象</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">import com.name.T;</span><br><span class="line">...</span><br><span class="line">T tools = new T();</span><br></pre></td></tr></table></figure></li><li><p>不引入包，而在创建对象时写全路径</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">com.name.T tools = new com.name.T();</span><br></pre></td></tr></table></figure></li></ol><p><strong>命名规则：</strong></p><ul><li>只能包含 数字 <code>1 2 3</code>、字母 <code>a b A b</code>、下划线 <code>_</code>、小圆点 <code>.</code></li><li>不能用 数字 开头。每级目录都不能。</li></ul><p><strong>命名规范：</strong></p><ul><li>全小写字母 + 小圆点</li><li><code>com.公司名.项目名.业务模块名</code></li></ul><p><strong>常用的包：</strong></p><p><code>java.lang</code>：基本包，默认引入，不需要再引入</p><p><code>java.util</code>：系统提供的工具包。工具类。</p><p><code>java.net</code>：网络包，网络开发。</p><p><code>java.awt</code>：Java 的界面开发，GUI。</p><p><strong>引入包：</strong></p><ul><li>只引入该包下的一个类：<code>import java.util.Scanner</code></li><li>引入该包的所有内容（不建议）：<code>import java.util.*</code></li></ul><p><strong>使用细节：</strong></p><ol><li><p><code>package</code> 的作用是声明当前类所在的包，要放在 类 的 最上面。一个 类 中最多有一句 <code>package</code></p></li><li><p><code>import</code> 放在 <code>package</code> 下面，类定义 前面。可以有多条语句，且没有顺序要求</p></li><li><p>编译器编译时 <strong>不会</strong> 检查目录结构。</p><p>即使一个包处于错误的目录下（只要其不依赖其他包）也可能通过编译。</p><p>但是，虚拟机会找不到该包，最终程序无法运行。</p></li><li><p>从 1.2 版本开始，用户不能再把包放在 java. 开头的目录下了。若如此做，这些包会被禁止加载。</p></li></ol><h2 id="访问修饰符"><a href="#访问修饰符" class="headerlink" title="访问修饰符"></a>访问修饰符</h2><h3 id="访问权限特点"><a href="#访问权限特点" class="headerlink" title="访问权限特点"></a>访问权限特点</h3><p>Java 提供 4 种 访问控制修饰符号，用于控制方法和属性（成员变量）的访问权限（范围）</p><ul><li><p>公开级别：<code>public</code>，对外公开。</p></li><li><p>受保护级别：<code>protected</code>，对 子类 和 同一个包中的类 公开。</p></li><li><p>默认级别：没有修饰符号，向 同一个包的类 公开。</p></li><li><p>私有级别：<code>private</code>，只有 同类 可以访问，不对外公开。</p></li></ul><p>(⌐■_■)</p><table><thead><tr><th></th><th>默认（无修饰符）</th><th>private</th><th>protected</th><th>public</th></tr></thead><tbody><tr><td>本类</td><td>可</td><td>可</td><td>可</td><td>可</td></tr><tr><td>同包中的子类</td><td>可</td><td>不可以</td><td>可</td><td>可</td></tr><tr><td>同包的非子类</td><td>可</td><td>不可以</td><td>可</td><td>可</td></tr><tr><td>其他包的子类</td><td>不可以</td><td>不可以</td><td>可</td><td>可</td></tr><tr><td>其他包的非子类</td><td>不可以</td><td>不可以</td><td>不可以</td><td>可</td></tr></tbody></table><h3 id="使用说明"><a href="#使用说明" class="headerlink" title="使用说明"></a>使用说明</h3><ol><li>修饰符可以修饰类中的 属性、成员方法 及 类</li><li>只有 默认 和 <code>public</code> 才能修饰 类，并遵循上述访问权限特点</li><li>成员方法 的访问规则和 属性 相同</li><li>private 修饰的变量可以被 任意本对象同类的对象访问</li></ol><h2 id="封装"><a href="#封装" class="headerlink" title="封装"></a>封装</h2><blockquote><p>封装（encapsulation）就是把抽象出的 数据[属性] 和对数据的 操作[方法] 封装在一起。数据 被保护在内部，程序的其他部分只有通过被授权的 操作[方法]，才能对数据进行操作。</p></blockquote><p>封装的好处：</p><ul><li>隐藏实现细节</li><li>可以对数据进行验证，保证安全合理</li></ul><p><strong>实现步骤：</strong></p><ol><li>将属性私有化 <code>private</code></li><li>提供一个公共的 <code>set</code> 方法，用于对属性判断并赋值</li><li>提供一个公共的 <code>get</code> 方法，用于获取属性的值</li></ol><p><strong>编译多个源文件：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">javac MyClass.java</span><br></pre></td></tr></table></figure><p>该文件中使用了其他类时，Java 编译器会查找对应名称的 .class 文件。没有找到的场合，转而寻找 .java 文件，并对其编译。倘若 .java 文件相较原有 .class 文件更新，编译器也会自动重新编译该文件。</p><h3 id="静态导入"><a href="#静态导入" class="headerlink" title="静态导入"></a>静态导入</h3><blockquote><p>有一种 import 语句允许导入静态方法和字段，而不只是类</p></blockquote><p>比如：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">import static java.lang.Math.*;</span><br></pre></td></tr></table></figure><p>这个场合，使用 Math 包内的静态方法、字段时，不需要再添加类名前缀。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">double n = pow(10, 5);// &lt;———— 本来是 double n = Math.pow(10, 5);</span><br><span class="line">double pi = PI;// &lt;———— 本来是 double pi = Math.PI;</span><br></pre></td></tr></table></figure><p><strong><em>—— 上述方法、字段见 [[12 常用类]]</em></strong></p><h3 id="JAR-文件"><a href="#JAR-文件" class="headerlink" title="JAR 文件"></a>JAR 文件</h3><blockquote><p>为了避免向用户提供包含大量类文件的复杂目录结构，可以将 Java 程序打包成 JAR （Java 归档）文件。</p><p>一个 JAR 文件既可以包含类文件，也可以包含诸如图像和声音等其他类型的文件。</p><p>JAR 文件是压缩的。其使用了 ZIP压缩格式。</p></blockquote><p><strong>创建 JAR：</strong></p><p>使用 jar 工具以制作 JAR 文件。该工具在 jdk&#x2F;bin 目录下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">jar cvf 包名 文件名1 文件名2 ...</span><br></pre></td></tr></table></figure><p>关于 jar 工具的各种指令，还是自己去百度一下吧</p><h2 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h2><blockquote><p>继承：能解决代码复用，让我们的编程更接近人类思维。当多个类存在相同的 属性（变量）和 方法 时，可以从这些类中抽象出 父类（基类&#x2F;超类）。在 父类 中定义这些属性·方法，所有的子类不需要重新定义这些属性和方法，只需要通过 <code>extends</code> 来声明继承父类即可。</p><p>通过继承的方法，代码的复用性提高了，代码的维护性和拓展性也提高了。</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">public class Son extends Father &#123;&#125;;// Son 类继承了 Father 类</span><br></pre></td></tr></table></figure><p>定义类时可以指明其父类，也能不指明。不指明的场合，默认继承 Object 类。</p><p>所有类有且只有一个父类。Object 是所有类的直接或间接父类。只有 Object 本身没有父类。</p><h3 id="使用细节"><a href="#使用细节" class="headerlink" title="使用细节"></a>使用细节</h3><ol><li><p>子类 继承了所有属性和方法，但私有（<code>private</code>）的 属性·方法 不能在 子类 直接访问。要调用父类提供的 公共（<code>public</code>）等方法 访问。</p></li><li><p>子类 必须调用 父类 的 构造器，完成 父类 的 初始化。</p></li><li><p>当创建 子类对象 时，不管使用 子类的哪个构造器，默认情况下总会调用 父类的无参构造器。如果 父类 没有提供 无参构造器，则必须在 子类的构造器 中用 <code>super</code> 去指定使用 父类的哪个构造器 完成 对父类的初始化。否则编译不能通过。</p></li><li><p>如果希望指定调用 父类的某构造器，则显式地调用一下：<code>super(形参列表);</code></p></li><li><p><code>super</code> 在使用时，必须放在构造器第一行。<code>super</code> 只能在构造器中使用。</p></li><li><p>由于 <code>super</code> 与 <code>this</code> 都要求放在第一行，所以此两个方法不能同时存在于同一构造器。</p></li><li><p>Java 所有的类都是 <code>Object</code> 的子类。换言之，<code>Object</code> 是所有类的父类。</p></li><li><p>父类构造器的调用不限于直接父类，将持续向上直至追溯到顶级父类 <code>Object</code></p></li><li><p>子类 最多只能直接继承 一个 父类。即，Java 中是 单继承机制。</p></li><li><p>不能滥用继承。子类 和 父类 之间必须满足 is - a 的逻辑关系。</p></li></ol><h3 id="继承的本质"><a href="#继承的本质" class="headerlink" title="继承的本质"></a>继承的本质</h3><ul><li>内存布局：<ol><li>在 方法区，自顶级父类起，依次加载 类信息。</li><li>在 堆 中开辟一个空间，自顶级父类起，依次创建并初始化各个类包含的所有属性信息。</li><li>在 栈 中存放该空间的 地址。</li></ol></li><li>如何查找信息？<ol><li>查看该子类是否有该属性。如果该子类有这个属性且可以访问，则返回信息。</li><li>子类没有该属性的场合，查看父类是否有该属性。如有且可访问，则返回信息。如不可访问，则报错。</li><li>父类也没有该属性的场合，继续查找上级父类，直到顶级父类（Object）。</li><li>如需调用某个特定类包含的特定信息，可以调用该类提供的方法。</li></ol></li></ul><h3 id="super-关键字"><a href="#super-关键字" class="headerlink" title="super 关键字"></a>super 关键字</h3><blockquote><p><code>super</code> 代表父类的引用。用于访问父类的 属性、方法、构造器。</p></blockquote><p><strong>super 的使用：</strong></p><ul><li><code>super.属性名</code>：访问父类的属性。不能访问父类的私有（private）属性。</li><li><code>super.方法名(形参列表)</code>：访问父类的方法。不能访问父类的私有（private）方法。</li><li><code>super(参数列表);</code>：访问父类的构造器。此时，super 语句必须放在第一句。</li></ul><p><strong>使用细节：</strong></p><ol><li>调用父类构造器，好处是分工明确。父类属性由父类初始化，子类由子类初始化。</li><li>子类中由和父类中成员（属性和方法）重名时，要调用父类成员必须用 <code>super</code>。没有重名的场合，<code>super</code>、<code>this</code> 及直接调用的效果相同。</li><li><code>super</code> 的访问不限于直接父类。如果爷爷类和本类中都有同名成员也能使用。如果多个基类中都有同名成员，则遵循就近原则。</li></ol><h3 id="方法重写-覆盖"><a href="#方法重写-覆盖" class="headerlink" title="方法重写 &#x2F; 覆盖"></a>方法重写 &#x2F; 覆盖</h3><blockquote><p>方法重写&#x2F;覆盖（Override）：如若子类有一个方法，和父类的某方法的 名称、返回类型、参数 一样，那么我们就说该子类方法 覆盖 了那个父类方法。</p></blockquote><p><strong>使用细节：</strong></p><ol><li>子类方法的参数，方法名称，要和父类方法完全一致。</li><li>子类方法的返回类型需和父类方法 一致，或者是父类返回类型的子类。</li><li>子类方法 <strong>不能缩小</strong> 父类方法的访问范围（访问修饰符）。</li></ol><h2 id="多态"><a href="#多态" class="headerlink" title="多态"></a>多态</h2><blockquote><p>多态：方法 或 对象 有多种形态。多态 是面向对象的第三大特征，是建立在 封装 和 继承 的基础之上的</p></blockquote><h3 id="多态的体现"><a href="#多态的体现" class="headerlink" title="多态的体现"></a>多态的体现</h3><ol><li><p>方法的多态：重写 和 重载 体现了 方法的多态。</p></li><li><p><strong>对象的多态：</strong></p><ul><li><p>一个对象的 编译类型 和 运行类型 可以不一致。</p><p><code>Animal animal = new Dog();</code></p><p>上例，编译类型是 <code>Animal</code>，运行类型是子类 <code>Dog</code>。要理解这句话，请回想 [[6 面向对象编程（基础）]]：<code>animal</code> 是对象的<strong>引用</strong>。</p></li><li><p>编译类型在定义对象时就确定了，不能改变。</p></li><li><p>运行类型是可以变化的。</p><p>上例中，再让 <code>animal = new Cat();</code>，这样，运行类型变为了 <code>Cat</code></p></li><li><p>编译类型看定义时 <code>=</code> 的左边，运行类型看 <code>=</code> 的右边。</p></li></ul></li></ol><h3 id="使用细节-1"><a href="#使用细节-1" class="headerlink" title="使用细节"></a>使用细节</h3><ol><li><p>多态的前提：两个对象 &#x2F; 类存在继承关系。</p></li><li><p>多态的向上转型：</p><ul><li>本质：父类的引用指向了子类的对象。（如 [ 7.6.1.2 ]）</li><li>语法：<code>父类类型 引用名 = new 子类类型(参数列表);</code></li><li>编译类型看左边，运行类型看右边。</li><li>可以调用父类中的所有成员，但不能调用子类特有的成员，而且需要遵守访问权限。因为在编译阶段，能调用哪些成员是由编译类型决定的。</li><li>最终的运行结果要看子类的具体实现。即从子类起向上查找方法调用（与 [ 7.5.2 ] 规则相同）。</li></ul></li><li><p>多态的向下转型：</p><ul><li><p>语法：<code>子类类型 引用名 = (子类类型)父类引用;</code></p><p>[7.6.2.2] 的例子里，向下转型。这个语法其实和 [2.8.2 强制类型转换] 很像。</p><p><code>Dog dog = (Dog)animal;</code></p></li><li><p>只能强转父类的引用，不能强转父类的对象。</p></li><li><p>要求父类的引用必须指向的是当前目标类型的对象。即上例中的 <code>animal</code> 运行类型需是 <code>Dog</code></p></li><li><p>向下转型后，可以调用子类类型中的所有成员。</p></li></ul></li><li><p>属性没有重写一说。<strong>和 方法 不同，属性的值 看编译类型。</strong></p></li><li><p><code>instanceof</code> 比较操作符。用于判断对象类型是否是某类型或其子类型。此时判断的是 <strong>运行类型</strong>。</p></li></ol><h3 id="理解方法调用"><a href="#理解方法调用" class="headerlink" title="理解方法调用"></a>理解方法调用</h3><p>在对象上调用方法的过程如下：</p><ol><li><p>编译器查看对象的声明类型和方法名。该类和其父类中，所有同名方法（包括参数不同的方法）都被列举。</p><p>至此，编译器已经知道所有可能被调用的方法。</p></li><li><p>编译器确认方法调用中提供的参数类型。</p><p>那些列举方法中存在参数类型完全匹配的方法时，即调用该方法。</p><p>没有发现匹配方法，抑或是发现经过类型转换产生了多个匹配方法时，就会报错</p><p>至此，编译器已经知道要调用方法的名字和参数类型</p></li><li><p>如若是 private 方法、static 方法、final 方法、构造器，那么编译器将能准确知道要调用哪个方法。这称为 <strong>静态绑定</strong></p><p>与之相对的，如果调用方法依赖于隐式参数类型，那么必须在运行时 <strong>动态绑定</strong></p></li><li><p>程序运行并采取动态绑定方法时，JVM 将调用那个 <strong>实际类型</strong> 对应的方法。</p></li></ol><p>倘若每次调用方法都进行以上搜索，会造成庞大的时间开销。为此，JVM 预先为每个类计算了 <strong>方法表</strong>。</p><p>方法表中列举了所有方法的签名与实际调用的方法。如此，每次调用方法时，只需查找该表即可。</p><p>特别地，使用 super 关键字时，JVM 会查找其父类的方法表。</p><p><strong>动态绑定机制：</strong></p><ul><li>当调用对象方法的时候，该方法和该对象（隐式参数）的内存地址&#x2F;运行类型绑定。</li><li>当调用对象属性时，没有动态绑定机制。于是哪里声明，哪里调用。</li></ul><h2 id="Object-类"><a href="#Object-类" class="headerlink" title="Object 类"></a>Object 类</h2><p>Object 类是所有类的超类。Java 中所有类默认继承该类。</p><h3 id="equals-方法"><a href="#equals-方法" class="headerlink" title="equals 方法"></a>equals 方法</h3><p><code>boolean equals(Object obj)</code></p><p>用于检测一个对象是否等于另一对象。</p><p>在 Object 中，该方法的实现是比较 形参 与 隐式参数 的对象引用是否一致。</p><p><strong>与 <code>==</code> 的区别：</strong></p><ul><li><p><code>==</code>：既可以判断基本类型，也可以判断引用类型。如果判断基本类型，判断的是值是否相等。如果判断引用类型，判断的是地址是否相等。</p></li><li><p>equals 方法：是 Object 中的方法，只能判断引用类型。默认判断地址是否相等，但子类中往往重写该代码，以判断内容是否相等。</p><p>在子类中定义 equals 方法时，首先调用超类的 equals 方法。那个一致时，再比较子类中的字段。</p></li></ul><p><strong>Java 语言规范要求 equals 方法具有如下特性：</strong></p><ul><li><p>_自反性_：对于任何非空引用 x，<code>x.equals(x)</code> 应返回 true</p></li><li><p>_对称性_：对于任何引用 x 和 y，当且仅当 <code>x.equals(y)</code> 为 true 时，<code>y.equals(x)</code> 为 true</p><p>如果所有的子类具有相同的相等性语义，可以使用 <code>instanceof</code> 检测其类型。否则，最好使用 <code>getClass</code> 方法比较类型。</p></li><li><p>_传递性_：对于任何引用 x、y、z，如果 <code>x.equals(y)</code> 为 true ，<code>y.equals(z)</code> 为 true，那么 <code>x.equals(z)</code> 也应该为 true</p></li><li><p>_一致性_：如果 x 和 y 的引用没有发生变化，反复调用 <code>x.equals(y)</code> 应该返回相同的结果</p></li><li><p>对于任何非空引用 x，<code>x.equals(null)</code> 应该返回 false</p></li></ul><h3 id="hashCode-方法"><a href="#hashCode-方法" class="headerlink" title="hashCode 方法"></a>hashCode 方法</h3><p><code>int hashCode()</code></p><p>返回对象的 散列码值。</p><p>散列码值是由对象导出的一个整型值。散列码是无规律的。如果 x 与 y 是不同对象，两者的散列码基本上不会相同。</p><p>字符串的散列码是由其内容导出的，而其他引用对象的散列码是根据存储地址得出的。</p><p><strong>散列码的作用：</strong></p><ol><li>提高哈希结构的容器的效率。</li><li>两个引用，若是指向同一对象，则哈希值一般不同。</li><li>哈希值是根据地址生成的，因而，哈希值不能等同于地址</li></ol><p><strong>相关方法：</strong></p><ul><li><p><code>Objects.hashCode(Object obj)</code></p><p>这是一个 null 安全的返回散列值的方法。传入 null 时会返回 0</p></li><li><p><code>Objects.hash(Object... values)</code></p><p>组合所有传入参数的散列值</p></li><li><p><code>Integer.hashCode(int value)</code></p><p>返回给定基本数据类型的散列值。所有包装类都有该静态方法</p></li><li><p><code>Arrays.hashCode(xxx[] a)</code></p><p>计算数组的散列码。数组类型可以是 Object 或基本数据类型</p></li></ul><p>空对象调用 hashCode 方法会抛出异常。</p><p>hashCode 与 equals 的定义必须相符。如果 <code>x.equals(y)</code> 返回 true，那么 <code>x.hashCode()</code> 与 <code>y.hashCode()</code> 应该返回相同的值。</p><h3 id="toString-方法"><a href="#toString-方法" class="headerlink" title="toString 方法"></a>toString 方法</h3><p><code>String toString()</code></p><p>返回表示对象的一个字符串。Object 的默认实现如下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">public String toString() &#123;</span><br><span class="line">    return getClass().getName() + &quot;@&quot; + Integer.toHexString(hashCode());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p><code>Class getClass()</code></p><p>返回包含对象信息的 Class 对象。</p></li><li><p><code>String getName()</code></p><p>由 Class 类实例调用。返回这个类的全类名</p><p>全类名：即包名 + 类名。比如 <code>com.prictice.codes.Person</code></p></li><li><p><code>Class getSuperClass()</code></p><p>由 Class 类实例调用。以 Class 形式返回其父类</p><p>Object 使用时返回 null</p></li><li><p><code>Integer.toHexString(int val)</code></p><p>返回一个数字的十六进制表示的字符串</p></li></ul><p>toString 方法非常实用。Java 标准类库中的很多类重写了该方法，以便用户能获得一些有关对象状态的信息。</p><p>打印对象 或 使用 <strong>+</strong> 操作符拼接对象 时，都会自动调用该对象的 toString 方法。</p><p>当直接调用对象时，也会默认调用该方法。</p><h3 id="finalize-方法"><a href="#finalize-方法" class="headerlink" title="finalize 方法"></a>finalize 方法</h3><ol><li>当对象被回收时，系统会自动调用该对象的 <code>finalize</code> 方法。子类可以重写该方法，做一些释放资源的操作。</li><li>何时被回收：当某对象没有任何引用时，JVM 就认为该对象是一个垃圾对象，就会（在算法决定的某个时刻）使用垃圾回收机制来销毁该对象。在销毁该对象前，会调用 <code>finalize</code> 方法。</li><li>垃圾回收机制的调用，是由系统决定。也可以通过 <code>System.gc();</code> 主动触发垃圾回收机制。这个方法一经调用就会继续执行余下代码，而不会等待回收完毕。</li><li>实际开发中，几乎不会运用该方法。</li></ol><h2 id="断点调试（Debug）"><a href="#断点调试（Debug）" class="headerlink" title="断点调试（Debug）"></a>断点调试（Debug）</h2><blockquote><p>断点调试：在程序某一行设置一个断点，调试时，代码运行至此就会停住，然后可以一步一步往下调试。调试过程中可以看各个变量当前的值。如若出错，则测试到该出错代码行即显示错误并停下。进行分析从而找到这个 Bug。</p><p>调试过程中是运行状态，所以，是以对象的 运行类型 执行。</p><p>断点调试是程序员必须掌握的技能，能帮助我们查看 Java 底层源代码的执行过程，提高程序员 Java 水平。</p></blockquote><p>快捷键如下</p><ul><li>跳入：<code>F7</code></li><li>跳过：<code>F8</code></li><li>跳出：<code>shift + F8</code></li><li>resume，执行到下一个断点：<code>F9</code></li></ul><h2 id="附录"><a href="#附录" class="headerlink" title="附录"></a>附录</h2><h3 id="零钱通程序"><a href="#零钱通程序" class="headerlink" title="零钱通程序"></a>零钱通程序</h3><ul><li><p><strong>Wallet.java</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">package com.the_wallet;</span><br><span class="line"></span><br><span class="line">public class Wallet &#123;</span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        Data p1 = new Data(&quot;Melody&quot;);</span><br><span class="line">        p1.menu();</span><br><span class="line">        System.out.println(&quot;再见~&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><strong>Data.java</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br></pre></td><td class="code"><pre><span class="line">package com.the_wallet;</span><br><span class="line"></span><br><span class="line">import java.text.SimpleDateFormat;</span><br><span class="line">import java.util.Date;</span><br><span class="line">import java.util.Scanner;</span><br><span class="line"></span><br><span class="line">public class Data &#123;</span><br><span class="line">    private String name = &quot;user&quot;;</span><br><span class="line">    private double balance = 0;</span><br><span class="line">    private String[][] detail = new String[1][5];</span><br><span class="line"></span><br><span class="line">    private Data() &#123;</span><br><span class="line">        detail[0][0] = &quot;项目\t&quot;;</span><br><span class="line">        detail[0][1] = &quot;\t\t&quot;;</span><br><span class="line">        detail[0][2] = &quot;时间&quot;;</span><br><span class="line">        detail[0][3] = &quot; &quot;;</span><br><span class="line">        detail[0][4] = &quot; &quot;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public Data(String name) &#123;</span><br><span class="line">        this();</span><br><span class="line">        this.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public String getName() &#123;</span><br><span class="line">        return name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setName(String name) &#123;</span><br><span class="line">        this.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void menu() &#123;</span><br><span class="line">        char inp = &#x27;a&#x27;;</span><br><span class="line">        double inpD;</span><br><span class="line">        Scanner scanner = new Scanner(System.in);</span><br><span class="line">        while (inp != &#x27;y&#x27; &amp;&amp; inp != &#x27;Y&#x27;) &#123;</span><br><span class="line">            System.out.print(&quot;\n===============零钱通菜单===============&quot;</span><br><span class="line">                    + &quot;\n\t\t\t1.零钱通明细&quot;</span><br><span class="line">                    + &quot;\n\t\t\t2.收益入帐&quot;</span><br><span class="line">                    + &quot;\n\t\t\t3.消费入账&quot;</span><br><span class="line">                    + &quot;\n\t\t\t4.退   出&quot;</span><br><span class="line">                    + &quot;\n请选择（1-4）：&quot;);</span><br><span class="line">            inp = scanner.next().charAt(0);</span><br><span class="line">            System.out.println(&quot;======================================&quot;);</span><br><span class="line">            switch (inp) &#123;</span><br><span class="line">                case &#x27;4&#x27;:</span><br><span class="line">                    System.out.println(&quot;确定要退出吗？（y/n）：&quot;);</span><br><span class="line">                    inp = scanner.next().charAt(0);</span><br><span class="line">                    while (inp != &#x27;y&#x27; &amp;&amp; inp != &#x27;n&#x27; &amp;&amp; inp != &#x27;Y&#x27; &amp;&amp; inp != &#x27;N&#x27;) &#123;</span><br><span class="line">                        System.out.println(&quot;请输入“y”或者“n”！听话！&quot;);</span><br><span class="line">                        inp = scanner.next().charAt(0);</span><br><span class="line">                    &#125;</span><br><span class="line">                    break;</span><br><span class="line">                case &#x27;1&#x27;:</span><br><span class="line">                    showDetail();</span><br><span class="line">                    break;</span><br><span class="line">                case &#x27;2&#x27;:</span><br><span class="line">                    System.out.println(&quot;请输入收益数额：&quot;);</span><br><span class="line">                    inpD = scanner.nextDouble();</span><br><span class="line">                    if (inpD &lt;= 0) &#123;</span><br><span class="line">                        System.out.print(&quot;收益需要为正，记录消费请选择“消费入账”&quot;);</span><br><span class="line">                        break;</span><br><span class="line">                    &#125;</span><br><span class="line">                    earning(inpD);</span><br><span class="line">                    break;</span><br><span class="line">                case &#x27;3&#x27;:</span><br><span class="line">                    System.out.println(&quot;请输入支出数额：&quot;);</span><br><span class="line">                    inpD = scanner.nextDouble();</span><br><span class="line">                    if (inpD &lt; 0) &#123;</span><br><span class="line">                        inpD = -inpD;</span><br><span class="line">                    &#125;</span><br><span class="line">                    if (balance &lt; inpD) &#123;</span><br><span class="line">                        System.out.println(&quot;您的余额不足！&quot;);</span><br><span class="line">                        break;</span><br><span class="line">                    &#125;</span><br><span class="line">                    System.out.println(&quot;请输入支出项目：&quot;);</span><br><span class="line">                    spending(inpD, scanner.next());</span><br><span class="line">                    break;</span><br><span class="line">                case &#x27;g&#x27;:</span><br><span class="line">                    break;</span><br><span class="line">                default:</span><br><span class="line">                    System.out.print(&quot;错误。请输入数字（1-4）&quot;);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    private void earning(double earn) &#123;</span><br><span class="line">        String[][] temp = new String[this.detail.length + 1][5];</span><br><span class="line">        record(detail, temp);</span><br><span class="line">        this.balance += earn;</span><br><span class="line">        tidy(&quot;收益入账&quot;, earn, true, temp);</span><br><span class="line">        showDetail();</span><br><span class="line">        System.out.println(&quot;\n收益记录完成&quot;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    private void spending(double spend, String title) &#123;</span><br><span class="line">        String[][] temp = new String[this.detail.length + 1][5];</span><br><span class="line">        record(detail, temp);</span><br><span class="line">        this.balance -= spend;</span><br><span class="line">        tidy(title, spend, false, temp);</span><br><span class="line">        showDetail();</span><br><span class="line">        System.out.println(&quot;\n消费记录完成&quot;);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    private void record(String[][] detail, String[][] temp) &#123;</span><br><span class="line">        for (int i = 0; i &lt; detail.length; i++) &#123;</span><br><span class="line">            for (int j = 0; j &lt; 5; j++) &#123;</span><br><span class="line">                temp[i][j] = detail[i][j];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    private void tidy(String title, double num, boolean isPos, String[][] temp) &#123;</span><br><span class="line">        Date date = new Date();</span><br><span class="line">        SimpleDateFormat sDate = new SimpleDateFormat(&quot;yyyy-MM-dd HH:mm:ss&quot;);</span><br><span class="line">        if (title.length() &lt;= 2) &#123;</span><br><span class="line">            temp[temp.length - 1][0] = title + &quot;\t\t&quot;;</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            temp[temp.length - 1][0] = title + &quot;\t&quot;;</span><br><span class="line">        &#125;</span><br><span class="line">        String sign = isPos ? &quot;+&quot; : &quot;-&quot;;</span><br><span class="line">        temp[temp.length - 1][1] = sign + num + &quot;&quot;;</span><br><span class="line">        temp[temp.length - 1][2] = sDate.format(date);</span><br><span class="line">        temp[temp.length - 1][3] = &quot;余额：&quot;;</span><br><span class="line">        temp[temp.length - 1][4] = balance + &quot;&quot;;</span><br><span class="line">        detail = temp;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    private void showDetail() &#123;</span><br><span class="line">        System.out.println(&quot;--------------------------------------&quot;);</span><br><span class="line">        for (int i = 0; i &lt; detail.length; i++) &#123;</span><br><span class="line">            System.out.println(detail[i][0] + detail[i][1] + &quot;\t&quot; + detail[i][2] + &quot;\t\t&quot; + detail[i][3] + detail[i][4]);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(&quot;--------------------------------------&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 教程 </tag>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java 面向对象编程（基础）</title>
      <link href="/2022/11/30/learn/Java/Java%20%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%BC%96%E7%A8%8B%EF%BC%88%E5%9F%BA%E7%A1%80%EF%BC%89/"/>
      <url>/2022/11/30/learn/Java/Java%20%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%BC%96%E7%A8%8B%EF%BC%88%E5%9F%BA%E7%A1%80%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<blockquote><p>面向对象是一种开发软件的方法，使分析、设计和实现一个系统的方法尽可能接近人们认识一个系统的方法。包括三个方面：面向对象分析、面向对象设计、面向对象程序设计。</p><p>Java 语言是纯面向对象的语言。其所有数据类型都有相应的类，程序可以完全基于对象编写。</p></blockquote><h2 id="类与对象（OOP）"><a href="#类与对象（OOP）" class="headerlink" title="类与对象（OOP）"></a>类与对象（OOP）</h2><blockquote><p>类 就是数据类型。可以是 <code>int</code> 也可以是 <code>人类</code></p><p>对象 就是其中具体的实例。可以是 <code>100</code> </p><p>从 类 到 对象，可以称为 创建一个对象，也可以说 实例化一个对象，或者 把对象实例化</p><ol><li>类 是抽象的、概念的，代表一类事物</li><li>对象 是具体的、实际的，代表一个个具体事物</li><li>类 是 对象 的模板，对象 是 类 的一个个体，对应一个实例</li></ol></blockquote><p>下面，我们定义了一个类 <code>Cat</code> 并创建了一些 对象 <code>cat1</code> <code>cat2</code>：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">public class Code6_1&#123;</span><br><span class="line">public static void main(String[] args)&#123;</span><br><span class="line"></span><br><span class="line">Cat cat1 = new Cat();</span><br><span class="line">cat1.name = &quot;福福&quot;;</span><br><span class="line">cat1.age = 2;</span><br><span class="line">Cat cat2 = new Cat();</span><br><span class="line">cat2.name = &quot;妞子&quot;;</span><br><span class="line">cat2.age = 1;</span><br><span class="line">System.out.println(cat1.name);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class Cat&#123;</span><br><span class="line">String name;</span><br><span class="line">int age;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="属性-成员变量"><a href="#属性-成员变量" class="headerlink" title="属性&#x2F;成员变量"></a>属性&#x2F;成员变量</h3><blockquote><p>从概念或叫法上看：成员变量 &#x3D; 属性 &#x3D; field（字段）</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">class Cat&#123;</span><br><span class="line">String name;</span><br><span class="line">int age;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其中，<code>String name;</code> 就是一个成员变量（属性）。</p><p>属性可以是基本数据类型，也可以是引用数据类型。</p><ol><li>属性的定义语法同变量。<code>访问修饰符 属性类型 属性名</code><ul><li>访问修饰符：控制属性的访问范围。有四种：<code>publie</code> <code>protected</code> <code>默认(空)</code> <code>private</code></li></ul></li><li>属性的定义类型可以为任意类型，包含 基本类型 或 引用类型</li><li>属性如果不赋值，有默认值。规则同 <em>[[5 数组、排序和查找]]</em></li></ol><h3 id="创建对象"><a href="#创建对象" class="headerlink" title="创建对象"></a>创建对象</h3><ul><li><p>先声明再创建：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Cat cat1;      //声明对象cat1</span><br><span class="line">cat1 = new Cat();//创建对象</span><br></pre></td></tr></table></figure></li><li><p>直接创建：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Cat cat2 = new Cat();</span><br></pre></td></tr></table></figure></li></ul><p>注意事项：</p><ol><li><p>声明对象的场合，只是在内存中建立了一个引用。此时，该地址引用不指向任何内存空间。</p><p>对象的引用，也被称为对象的句柄。</p></li><li><p>使用 new 运算符创建对象实例时，会为对象分配空间，就会调用类的构造方法。那之后，会将该段内存的首地址赋给刚才建立的引用。</p></li></ol><h3 id="访问对象"><a href="#访问对象" class="headerlink" title="访问对象"></a>访问对象</h3><p>基本语法：<code>对象名.属性名</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">System.out.println(cat1.name);</span><br></pre></td></tr></table></figure><p>在Java中，任何对象变量的值都是对储存在另外一个地方的某个对象的引用。</p><h3 id="类与对象的内存访问机制"><a href="#类与对象的内存访问机制" class="headerlink" title="类与对象的内存访问机制"></a>类与对象的内存访问机制</h3><blockquote><p>栈：一般存放基本数据类型（局部变量）</p><p>堆：存放对象（如<code>Cat cat1 = new Cat()</code>，是在这里开辟的空间）</p><p>方法区：常量池（常量，比如字符串），类加载信息</p></blockquote><ol><li>创建对象时，先加载 类 信息，然后在 堆 中分配空间，栈 中的对象名被赋予指向那个空间的地址。</li><li>之后进行指定初始化。该对象的 属性 中，是 基本数据类型 的直接记录在 堆 中；是 字符串 的记录一个地址，该地址指向 方法区，那里的常量池有该字符串。</li></ol><h2 id="成员方法"><a href="#成员方法" class="headerlink" title="成员方法"></a>成员方法</h2><p>在某些情况下，我们需要定义成员方法。比如 <code>Cat</code> 除了有属性（<code>name</code> <code>age</code>）外，还可以有一些行为比如玩耍。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">修饰符 返回数据类型 方法名(形参列表)&#123;</span><br><span class="line">方法体语句;</span><br><span class="line">returen 返回值;//返回数据类型是 void 的场合，return语句不是必须的</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li><p>方法名必须是一个合法的标识符</p></li><li><p>返回类型即返回值的类型。如果方法没有返回值，应声明为 void</p></li><li><p>修饰符段可以有几个不同的修饰符。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">public static strictfp final void method() &#123;</span><br><span class="line">        System.out.println(&quot;哎咿呀~ 哎咿呀~&quot;);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>其中 public（访问修饰符）、static（static 关键字）、final（final 关键字）</p><p><strong><em>—— 访问修饰符见 [[ 7 面向对象编程（中级）]]</em></strong></p><p><strong><em>—— static 关键字见 [[9 面向对象编程（高级）]]</em></strong></p><p><strong><em>—— final 关键字见 [[9 面向对象编程（高级）]]</em></strong></p><p><strong><em>—— strictfp 关键字见 [[12 常用类]]</em></strong></p></li><li><p>参数列表是传递给方法的参数表。各个元素间以 <code>,</code> 分隔。每个元素由一个类型和一个标识符表示的参数组成。</p><p>特别地，<code>参数类型... 标识符</code> 这样的参数被称为可变参数</p><p><strong><em>—— 可变参数见 [[6 面向对象编程（基础）]]</em></strong></p></li><li><p>方法体是实际要执行的代码块。方法体一般用 return 作为方法的结束。</p></li></ol><p>使用 成员方法，能提高代码的复用性。而且能把实现的细节封装起来，供其他用户调用。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">class Cat&#123;</span><br><span class="line">String name;//属性 name</span><br><span class="line">int age;//属性 age</span><br><span class="line"></span><br><span class="line">public void speak()&#123;//方法 speak()</span><br><span class="line">  System.out.println(&quot;喵~&quot;);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><ol><li>方法写好后，不去调用就不会输出</li><li>先创建对象，然后调用方法即可</li></ol></blockquote><p>下面，展示一个含有成员方法的代码：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">public class Code6_2&#123;</span><br><span class="line">    public static void main(String[] args)&#123;</span><br><span class="line">       Cat cat1 = new Cat();</span><br><span class="line">       cat1.speak(10, 15);//调用 speak 方法，并且给 n1 = 10, n2 = 15</span><br><span class="line">       int r = cat1.speak2(15, 135);//调用 speak2 方法,返回值赋给 r</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class Cat&#123;</span><br><span class="line">    public void speak(int n1, int n2)&#123;//(int n1, int n2)形参列表，当前有两个形参 n1,n2</span><br><span class="line">       int res = n1 + n2;</span><br><span class="line">       System.out.println(&quot;喵~&quot; + n1 + &quot; + &quot; + n2 +&quot; 的值是：&quot; + res);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public int speak2(int n1, int n2)&#123;//int 表示方法执行后，返回一个 int 值</span><br><span class="line">       int res = n1 + n2;</span><br><span class="line">       return res;//返回 res 的值</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="方法的调用机制"><a href="#方法的调用机制" class="headerlink" title="方法的调用机制"></a>方法的调用机制</h3><p>以前文代码为例：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line">int r = cat1.speak2(15, 135);</span><br><span class="line">...</span><br><span class="line">public int speak2(int n1, int n2)&#123;</span><br><span class="line">   int res = n1 + n2;</span><br><span class="line">   return res;</span><br><span class="line">&#125;</span><br><span class="line">...</span><br></pre></td></tr></table></figure><ol><li>当程序执行到方法时，在 栈 中开辟一个新的 栈空间。该空间里储存 <code>n1 = 15</code> <code>n2 = 135</code>，之后计算并储存结果 <code>res = 150</code></li><li>当方法执行完毕，或执行到 <code>return</code> 语句时，就会返回</li><li>把 新栈空间 中的 <code>res = 150</code> 返回 main栈 中调用方法的地方</li><li>返回后，继续执行该方法的后续代码</li></ol><h3 id="使用细节"><a href="#使用细节" class="headerlink" title="使用细节"></a>使用细节</h3><ol><li><p>访问修饰符：作用是控制方法的使用范围。</p><ul><li>不写（默认访问控制范围）</li><li>public：公共</li><li>protected：受保护</li><li>private：私有</li></ul><p><strong><em>—— 访问修饰符见 [[7 面向对象编程（中级）]]</em></strong></p></li><li><p>返回数据类型：</p><ul><li>一个方法最多有一个返回值。要返回多个结果可以使用 数组。</li><li>返回类型为任意类型。包括 基本数据类型 和 引用数据类型。</li><li>如果方法要求有返回数据类型，则方法体中最后的执行语句必为 <code>return 值</code>，且返回类型必须和 return 的值一致。</li><li>如果 返回数据类型 为 <code>void</code>，则可以不写 <code>return</code> 语句</li></ul></li><li><p>方法名：</p><ul><li>遵循驼峰命名法，最好见名知意，表达出该功能的意思。</li></ul></li><li><p>参数列表（形参列表）：</p><ul><li>一个方法可以有 0 个参数，也可以有多个参数。参数间用 <code>,</code> 间隔。</li><li>参数类型可以为任意类型，包含 基本类型 和 引用类型。</li><li>调用带参数的方法时，一定对应着 参数列表 传入 相同类型 或 兼容类型 的参数。</li><li>方法定义时的参数称为 形式参数 ，简称 形参；方法调用时的参数（传入的参数）称为 实际参数，简称 实参。实参 与 形参 的类型、个数、顺序必须一致。</li></ul></li><li><p>方法体：</p><ul><li>写完成功能的具体语句。方法中不能再定义方法。即：方法不能嵌套定义。</li></ul></li><li><p>调用细节：</p><ul><li><p>同一个类中的方法调用，可以直接调用。</p></li><li><p>跨类的方法调用，需要创建新对象，然后再调用方法。</p></li></ul></li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">class C1&#123;</span><br><span class="line">public void m1()&#123;</span><br><span class="line">&#125;</span><br><span class="line">public void m2()&#123;</span><br><span class="line">   m1();//同一个类中的方法调用，可以直接调用。</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class C2&#123;</span><br><span class="line">public void m3()&#123;</span><br><span class="line">   C1 c = new C1();</span><br><span class="line">   c.m2();//跨类的方法调用，需要创建新对象，然后再调用方法。</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="成员方法传参机制"><a href="#成员方法传参机制" class="headerlink" title="成员方法传参机制"></a>成员方法传参机制</h3><p>Java 语言对对象采用的是 <strong>值传递</strong>，方法得到的总是那个传入对象的副本。</p><ul><li><p>方法不能修改基本数据类型的参数。基本数据类型传递的是一个值，形参不影响实参。</p></li><li><p>方法可以改变对象参数的状态。</p><p>引用类型传递的是一个地址，形参和实参指向一处，两者总会相关。</p><p>但改变那个形参地址指向的场合，实参的指向不会改变。</p></li></ul><h2 id="方法递归调用"><a href="#方法递归调用" class="headerlink" title="方法递归调用"></a>方法递归调用</h2><blockquote><p>递归：即方法自己调用自己，每次调用时传入不同变量。递归有助于编程者解决复杂问题，同时可以让代码变得简洁。</p></blockquote><blockquote><p>下面，示范一个斐波那契数列方法</p></blockquote> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">class T&#123;</span><br><span class="line">   public int fib(int n)&#123;</span><br><span class="line">       if(n == 1 || n == 2)&#123;</span><br><span class="line">           return 1;</span><br><span class="line">       &#125;else&#123;</span><br><span class="line">           return (fib(n - 1)) + (feb(n - 2));</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="使用细节-1"><a href="#使用细节-1" class="headerlink" title="使用细节"></a>使用细节</h3><ol><li>执行一个方法时，就创建一个新的受保护的独立 栈空间。</li><li>方法的局部变量是独立的，不会相互影响。</li><li>如果方法中使用的是引用变量，就会共享数据。（因为 [[6 面向对象编程（基础）]]）</li><li>递归必须向退出递归的条件逼近，否则就是无限递归，会提示 <code>StackOverflowError</code> “死龟”</li><li>当一个方法执行完毕，或遇到 <code>return</code> 就会返回。遵守谁调用就返回给谁。同时当方法执行完毕或返回时，该方法也执行完毕。</li></ol><h2 id="方法重载"><a href="#方法重载" class="headerlink" title="方法重载"></a>方法重载</h2><blockquote><p>方法重载（Overload）：Java 中允许同一类中，多个同名方法的存在，但要求 形参列表 不一致。</p><p>这样，减轻了起名和记名的麻烦。</p></blockquote><p><strong>使用细节：</strong></p><ol><li>方法名：必须相同</li><li>形参列表：必须不同（参数的类型、个数、顺序，这其中至少一个不同）</li><li>返回值：无要求</li></ol><p><strong>签名：</strong></p><p>由于重载的存在，要完整的描述一个方法，要指定方法名及参数类型。这叫做方法的签名。</p><p>如：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">public void act() &#123;&#125;</span><br><span class="line">public int act(int n) &#123;</span><br><span class="line">    return n;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>两个方法的签名分别是：<code>act()</code> 和 <code>act(int n)</code></p><h2 id="可变参数"><a href="#可变参数" class="headerlink" title="可变参数"></a>可变参数</h2><blockquote><p>Java 允许将同一个类中多个同名同功能但参数个数不同的方法，封装成一个方法。</p></blockquote><p>语法：<code>访问修饰符 返回类型 方法名（数据类型... 形参名）&#123;代码块;&#125;</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">public void m(int... n)&#123;</span><br><span class="line">//此时，n 相当于一个 数组。</span><br><span class="line">int length = n.length;</span><br><span class="line">int num1 = n[0];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="使用细节-2"><a href="#使用细节-2" class="headerlink" title="使用细节"></a>使用细节</h3><ol><li><p>可变参数 的实参可以是 0 个，也可以是 任意多 个。</p></li><li><p>可变参数 的实参可以是数组</p></li><li><p>可变参数 本质就是数组</p><p>因此，出现：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">public void met(int... n)&#123;//这个方法与下面的方法不能构成重载</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>的场合，不能有方法：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">public void met(int[] n)&#123;//这个方法与上面的方法不能构成重载</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>可变参数 和 普通参数 可以一起放在形参列表，但必须保证 可变参数 在最后</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">public void m(double dou, int... n) &#123;&#125;</span><br></pre></td></tr></table></figure></li><li><p>一个形参列表最多出现 一个 可变参数。</p></li></ol><h2 id="作用域"><a href="#作用域" class="headerlink" title="作用域"></a>作用域</h2><ol><li>在 Java 编程中，主要的变量就是 属性（成员变量）和 局部变量。</li><li>我们说的 局部变量 一般是指在成员方法中定义的变量。</li><li>作用域的分类<ul><li>全局变量：也就是 属性，作用域为整个类体</li><li>局部变量：除了属性外的其他变量。作用域为定义它的代码块中</li></ul></li><li>全局变量（属性）可以不赋值直接使用，那个场合有默认值。局部变量必须赋值使用</li></ol><h3 id="使用细节-3"><a href="#使用细节-3" class="headerlink" title="使用细节"></a>使用细节</h3><ol><li><p>属性 和 局部变量 可以重名，访问时遵循就近原则</p></li><li><p>在同一作用域中，两个局部变量不能重名</p></li><li><p>属性 的生命周期较长。其伴随对象的创建而创建，伴随对象的销毁而销毁。</p><p>局部变量 生命周期较短。其伴随代码块的执行而创建，伴随代码块的结束而销毁。</p></li><li><p>全局变量&#x2F;属性 可以被本类使用，也可以被其他类（通过对象）使用。</p><p>局部变量 只能被本类的对应方法中调用</p></li><li><p>全局变量&#x2F;属性 <strong>可以加</strong> 修饰符</p><p>局部变量 <strong>不能加</strong> 修饰符</p></li></ol><h2 id="构造方法、构造器"><a href="#构造方法、构造器" class="headerlink" title="构造方法、构造器"></a>构造方法、构造器</h2><blockquote><p>构造方法又叫构造器（constructor），是类的一种特殊的方法。它的主要作用是完成对新对象的初始化。</p></blockquote><p>语法：<code>[修饰符] 方法名(形参列表)&#123;方法体&#125;</code></p><ol><li>构造器的修饰符可以是默认。也可以是别的</li><li>参数列表 规则同 成员方法</li></ol><p>以下示范一个构造器：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">class T&#123;</span><br><span class="line">String name;</span><br><span class="line">int mun;</span><br><span class="line">    //下面这块就是构造器</span><br><span class="line">public T(String str, int i)&#123;</span><br><span class="line">name = str;</span><br><span class="line">num = i;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="使用细节-4"><a href="#使用细节-4" class="headerlink" title="使用细节"></a>使用细节</h3><ol><li><p>构造器本质也是方法。所以，可以 构造器重载。</p></li><li><p>构造器名 和 类名 相同</p></li><li><p>构造器无返回值</p></li><li><p>构造器是完成对象的初始化，而不是创建</p></li><li><p>创建对象时，系统自动调用构造器</p></li><li><p>如果程序员没有定义构造器，系统会自动给类生成一个无参构造器（默认构造器）</p></li><li><p>一旦定义了自己的构造器，就不能用无参构造器了。除非显式的定义一个无参构造器</p></li></ol><h3 id="流程分析"><a href="#流程分析" class="headerlink" title="流程分析"></a>流程分析</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">Person p1 = new Person(&quot;Amy&quot;, 10);</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line">    </span><br><span class="line">class Person&#123;</span><br><span class="line">String name;</span><br><span class="line">int age = 20;</span><br><span class="line">public Person(String pName, int pAge)&#123;</span><br><span class="line">name = pName;</span><br><span class="line">age = pAge;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li><p>加载 类信息（方法区）</p></li><li><p>在 堆 中开辟空间（地址）</p></li><li><p>完成对象初始化</p><ul><li><p>首先默认初始化。<code>age = 0; name = null</code></p></li><li><p>之后显式初始化。<code>age = 20; name = null</code></p><p>其中，显式初始化和代码块初始化按编写的先后顺序依次进行。</p></li><li><p>之后构造器的初始化。<code>age = 10; name = &quot;Amy&quot;</code></p></li></ul></li><li><p>把对象在 堆 中的 地址，返回给 <code>p1</code></p></li></ol><h2 id="this-关键字"><a href="#this-关键字" class="headerlink" title="this 关键字"></a>this 关键字</h2><blockquote><p>JVM 会给每个对象分配 this 代表当前对象。</p><p>相当于在 堆 中，this 指向自己（对象）</p><p>在类定义的方法中，Java 会自动用 this 关键字把所有变量和方法引用结合在一起。</p><p>遇到有同名的局部变量的场合，需要程序员加入 this 关键字进行区分。不加入 this 关键字的场合，Java 遵循就近原则。</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">class Example&#123;</span><br><span class="line">    int n = 0;</span><br><span class="line">public void act(int n) &#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面这个类的 <code>act()</code> 方法实际有 2 个参数。对其调用：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Example e = new Exmaple();</span><br><span class="line">e.act(100);</span><br></pre></td></tr></table></figure><p>可见，出现在方法名前的参数 <code>e</code>，以及出现在方法名后的括号中的参数 <code>100</code></p><p>出现在方法名前的参数被称为 <strong>隐式参数</strong>（也称为 方法调用的 目标 或 接收者）</p><p>出现在方法名后的参数被称为 <strong>显式参数</strong>，就是所谓的实参</p><p>在每一个方法中，用 this 指代隐式参数。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">public void act(int n) &#123;</span><br><span class="line">    this.n = n;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>此时，再以相同方式调用方法：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">e.act(100);// &lt;———— 相当于 e.n = 100;</span><br></pre></td></tr></table></figure><h3 id="使用方法"><a href="#使用方法" class="headerlink" title="使用方法"></a>使用方法</h3><ol><li><p><code>this</code> 关键字可以用来访问本类的属性、方法、构造器</p></li><li><p><code>this</code> 用于区分当前类的 属性 和 局部变量</p></li><li><p>访问本类中成员方法的语法：<code>this.方法名</code></p></li><li><p>访问构造器的语法：<code>this(参数列表);</code></p><p>注意：只能在构造器中访问另一个构造器。而且，如果有这个语法，必须放置在第一条语句。</p></li><li><p><code>this</code> 不能在类定义的 外部 使用，只能在类定义的 方法中 使用</p></li></ol><h2 id="附录"><a href="#附录" class="headerlink" title="附录"></a>附录</h2><h3 id="迷宫游戏代码"><a href="#迷宫游戏代码" class="headerlink" title="迷宫游戏代码"></a>迷宫游戏代码</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br><span class="line">401</span><br><span class="line">402</span><br><span class="line">403</span><br><span class="line">404</span><br><span class="line">405</span><br><span class="line">406</span><br><span class="line">407</span><br><span class="line">408</span><br><span class="line">409</span><br><span class="line">410</span><br><span class="line">411</span><br><span class="line">412</span><br><span class="line">413</span><br><span class="line">414</span><br><span class="line">415</span><br><span class="line">416</span><br><span class="line">417</span><br><span class="line">418</span><br><span class="line">419</span><br><span class="line">420</span><br><span class="line">421</span><br><span class="line">422</span><br><span class="line">423</span><br><span class="line">424</span><br><span class="line">425</span><br><span class="line">426</span><br><span class="line">427</span><br><span class="line">428</span><br><span class="line">429</span><br><span class="line">430</span><br><span class="line">431</span><br><span class="line">432</span><br><span class="line">433</span><br><span class="line">434</span><br><span class="line">435</span><br><span class="line">436</span><br><span class="line">437</span><br><span class="line">438</span><br><span class="line">439</span><br><span class="line">440</span><br><span class="line">441</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line">*@author Melody</span><br><span class="line">*@version v1.2.6</span><br><span class="line">**/</span><br><span class="line"></span><br><span class="line">//迷宫</span><br><span class="line">import java.util.Scanner;</span><br><span class="line">public class MazeOut&#123;</span><br><span class="line"></span><br><span class="line">    public static void main(String[] args)&#123;</span><br><span class="line">        //tools 方便后面调用方法。 inP 可以接收用户输入</span><br><span class="line">        T tools = new T();</span><br><span class="line">        Scanner inP = new Scanner(System.in);</span><br><span class="line">        </span><br><span class="line">        //提示并接收用户输入信息</span><br><span class="line">        System.out.println(&quot;\n输入迷宫宽度（至少为6）：&quot;);</span><br><span class="line">        int x = inP.nextInt();</span><br><span class="line">        System.out.println(&quot;\n输入迷宫长度（至少为6）：&quot;);</span><br><span class="line">        int y = inP.nextInt();  </span><br><span class="line">        //若用户输入的长或宽超出范围，则将其重置为正常值</span><br><span class="line">        if(x &lt; 6)&#123;</span><br><span class="line">            x = 6;</span><br><span class="line">        &#125; else if(x &gt; 110)&#123;</span><br><span class="line">        x = 110;</span><br><span class="line">        &#125;</span><br><span class="line">        if(y &lt; 6)&#123;</span><br><span class="line">            y = 6;</span><br><span class="line">        &#125; else if(y &gt; 60)&#123;</span><br><span class="line">        y = 60;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(&quot;\n输入迷宫的困难度（请输入1 - 6的数字，数字越高越不容易获胜）：&quot;);</span><br><span class="line">        int hard = inP.nextInt();</span><br><span class="line">        if(hard == 7)&#123;</span><br><span class="line">        System.out.println(&quot;\n\n您选择了找点麻烦&quot;);</span><br><span class="line">        &#125; else if (hard == 8 || hard == 9)&#123;</span><br><span class="line">        System.out.println(&quot;\n\n您选择了给自己添堵&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(&quot;\n\t迷宫生产完毕\n&quot;);</span><br><span class="line">        </span><br><span class="line">        //设置一个 count 值，记录步数。设为数组，以便数据通用。第一位记录当前值，第二位为最大值。</span><br><span class="line">        int[] count = &#123;0, 0&#125;;</span><br><span class="line">        //调用方法，生成迷宫</span><br><span class="line">        char[][] maze =new char[y][x];</span><br><span class="line">        tools.newMaze(maze.length, maze[0].length, maze, hard);</span><br><span class="line">        //调用方法，展示迷宫</span><br><span class="line">        tools.showMaze(maze);</span><br><span class="line">        </span><br><span class="line">        //提示用户开始游戏</span><br><span class="line">        System.out.println(&quot;\n召唤一个探索者，来探索迷宫吧（随便输点什么吧）&quot;);</span><br><span class="line">        //输入 r 或 c 则采用递归方法，其余采用爬墙方法</span><br><span class="line">        char inC = inP.next().charAt(0);</span><br><span class="line">        if(inC == &#x27;c&#x27;)&#123;</span><br><span class="line">            System.out.println(&quot;\n您触发了迷宫之神的眷顾。&quot;);</span><br><span class="line">            if(hard &gt; 5)&#123;</span><br><span class="line">            System.out.println(&quot;\n迷宫之神眉头一皱，发现事情并不简单。&quot;);</span><br><span class="line">            &#125;</span><br><span class="line">            if(x &gt; 12 || y &gt; 12)&#123;</span><br><span class="line">                System.out.println(&quot;看到地图这么大，迷宫之神悻悻而归。他只喜欢12格以下的地图。&quot;);</span><br><span class="line">                return; </span><br><span class="line">            &#125;</span><br><span class="line">        &#125; else if(inC == &#x27;r&#x27;)&#123;</span><br><span class="line">            System.out.println(&quot;\n您引来了一群无畏小黄鸡。他们视死如归，一心想着寻找出口&quot;);</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            System.out.println(&quot;\n我们找来了一只小蜘蛛。试试看吧。&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(&quot;\n&quot;);</span><br><span class="line">        //调用方法，解密</span><br><span class="line">        if(inC == &#x27;r&#x27; || inC == &#x27;c&#x27;)&#123;</span><br><span class="line">            tools.outMazeRec(maze, inC, count);</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            tools.outMaze(maze, count);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class T&#123;   </span><br><span class="line">    //=======================================================================================    </span><br><span class="line">    </span><br><span class="line">    //方法 newMaze：让 n3 生成随机的 长 * 宽 = n1 * n2 的迷宫，其困难度为 n4</span><br><span class="line">    public void newMaze(int n1, int n2, char[][] n3, int n4)&#123;</span><br><span class="line">        //构建迷宫墙壁，以&#x27;#&#x27;表示。并随机向其中填充石块，以&#x27;O&#x27;表示</span><br><span class="line">        ////墙壁是迷宫的 开头和结尾行 以及 每行的开头和结尾</span><br><span class="line">        for(int i = 0; i &lt; n1; i++)&#123;</span><br><span class="line">            for(int j = 0; j &lt; n2; j++)&#123;</span><br><span class="line">                if(i == 0 || i == n1 - 1 ||j == 0 || j == n2 - 1)&#123;</span><br><span class="line">                    n3[i][j] = &#x27;#&#x27;;</span><br><span class="line">                &#125;else&#123;</span><br><span class="line">                    //ran 是一个随机值，此处是概率生成挡路的石块&#x27;O&#x27;。其概率与 n4 值的大小正相关</span><br><span class="line">                    //此外，若 n4（即用户输入的难度值 hard）超过范围，则按照 难度6 计算</span><br><span class="line">                    int ran;</span><br><span class="line">                    if(n4 &lt;= 9 &amp;&amp; n4 &gt;= 0)&#123;</span><br><span class="line">                        ran = (int)(Math.random() * (9 - n4) + 1);</span><br><span class="line">                    &#125;else&#123;</span><br><span class="line">                        ran = (int)(Math.random() * 3 + 1);</span><br><span class="line">                    &#125;</span><br><span class="line">                    n3[i][j] = (ran == 1) ? &#x27;O&#x27; : &#x27; &#x27;;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        //生成起点、终点，优化地形</span><br><span class="line">        n3[1][1] = &#x27;B&#x27;;</span><br><span class="line">        n3[2][1] = &#x27; &#x27;;</span><br><span class="line">        n3[1][2] = &#x27; &#x27;;</span><br><span class="line">        n3[n1 - 2][n2 - 2] = &#x27;F&#x27;;</span><br><span class="line">        n3[n1 - 3][n2 - 2] = &#x27; &#x27;;</span><br><span class="line">        n3[n1 - 2][n2 - 3] = &#x27; &#x27;;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line"></span><br><span class="line">    </span><br><span class="line">    //方法 showMaze：展示一个迷宫</span><br><span class="line">    public void showMaze(char[][] n1)&#123;</span><br><span class="line">        for(int i = 0; i &lt; n1.length; i++)&#123;</span><br><span class="line">            for(int j = 0; j &lt; n1[i].length; j++)&#123;</span><br><span class="line">                System.out.print(&quot; &quot; + n1[i][j]);</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    //=======================================================================================   </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    //=======================================================================================</span><br><span class="line">    //方法 outMazeRec：递归方法迷宫游戏入口。可以接入普通递归方法，或最短路径方法。</span><br><span class="line">    public void outMazeRec(char[][] n1, char n2, int[] count)&#123;</span><br><span class="line">        //out：是否走出迷宫</span><br><span class="line">        boolean out = false;</span><br><span class="line">        //将迷宫的起止位置记为通路</span><br><span class="line">        n1[1][1] = &#x27; &#x27;;</span><br><span class="line">        n1[n1.length - 2][n1[0].length -2] = &#x27; &#x27;;</span><br><span class="line">        //如果输入的是&#x27;c&#x27;，则采用最短路径法。反之采用普通递归方法</span><br><span class="line">        if(n2 == &#x27;c&#x27;)&#123;</span><br><span class="line">            out = outCountMaze(1, 1, n1, count);</span><br><span class="line">        &#125;else&#123;</span><br><span class="line">            out = outMazeRecursion(1, 1, n1, count);           </span><br><span class="line">        &#125;</span><br><span class="line">        //把迷宫起始位置重新标注出来</span><br><span class="line">        n1[1][1] = &#x27;B&#x27;;</span><br><span class="line">        //判断是否解谜成功。如果成功，迷宫终点显示&#x27;V&#x27;，并展示步数，否则显示&#x27;F&#x27;</span><br><span class="line">        if(out)&#123;</span><br><span class="line">            n1[n1.length - 2][n1[0].length -2] = &#x27;V&#x27;;</span><br><span class="line">            showMaze(n1);</span><br><span class="line">            System.out.println(&quot;\t YOU WIN！！！&quot;);</span><br><span class="line">            System.out.println(&quot;通过路径为 &quot; + count[1] + &quot; 格&quot;);    </span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            n1[n1.length - 2][n1[0].length -2] = &#x27;F&#x27;;</span><br><span class="line">            showMaze(n1);</span><br><span class="line">            System.out.println(&quot;\t YOU LOSE&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    //=======================================================================================</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    //=======================================================================================</span><br><span class="line">    //方法 outMazeRecursion：迷宫游戏，普通递归方法</span><br><span class="line">    public boolean outMazeRecursion(int y, int x, char[][] n3, int[] count)&#123;</span><br><span class="line">        count[1]++;</span><br><span class="line">        if(n3[n3.length - 2][n3[0].length - 2] == &#x27;.&#x27;)&#123;</span><br><span class="line">            return true;</span><br><span class="line">        &#125; else if(n3[y][x] == &#x27; &#x27;)&#123;</span><br><span class="line">            n3[y][x] = &#x27;.&#x27;;</span><br><span class="line">            if(outMazeRecursion(y, x + 1, n3, count))&#123;</span><br><span class="line">                return true;</span><br><span class="line">            &#125; else if(outMazeRecursion(y + 1, x, n3, count))&#123;</span><br><span class="line">                return true;</span><br><span class="line">            &#125; else if(outMazeRecursion(y, x - 1, n3, count))&#123;</span><br><span class="line">                return true;</span><br><span class="line">            &#125; else if(outMazeRecursion(y - 1, x, n3, count))&#123;</span><br><span class="line">                return true;</span><br><span class="line">            &#125; else&#123;</span><br><span class="line">                count[1]--;</span><br><span class="line">                n3[y][x] = &#x27;+&#x27;; </span><br><span class="line">            &#125;</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            count[1]--;</span><br><span class="line">            return false;</span><br><span class="line">        &#125;</span><br><span class="line">        count[1]--;</span><br><span class="line">        return false;</span><br><span class="line">    &#125;</span><br><span class="line">    //=======================================================================================    </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    //=======================================================================================</span><br><span class="line">    //方法 outCountMaze：迷宫游戏，最短路径法的入口。这个入口由普通递归法接入。</span><br><span class="line">    public boolean outCountMaze(int y, int x, char[][] n, int[] count)&#123;</span><br><span class="line"></span><br><span class="line">        //首先，创建一个里数组。该数组用于 part1，原数组用于 part2。</span><br><span class="line">        //似乎没必要作此设计。但我还是予以保留。</span><br><span class="line">        char[][] inMaze = new char[n.length][n[0].length];</span><br><span class="line">        for(int i = 0; i &lt; n.length; i++)&#123;</span><br><span class="line">            for(int j = 0; j &lt; n[0].length; j++)&#123;</span><br><span class="line">                inMaze[i][j] = n[i][j];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        //首先进行 part1，然后必定进行 part2。因为 part1 总会返回一个 false</span><br><span class="line">        if(countMazeRec(y, x, inMaze, count) || true)&#123;</span><br><span class="line">            count[0] = 0;</span><br><span class="line">            return outMazeRecC(y, x, n, count);</span><br><span class="line">        &#125;</span><br><span class="line">        return false;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    //方法 countMazeRec：迷宫游戏，最短路径法，part1</span><br><span class="line">    //该方法是先统计最短路径。最终总会返回 false</span><br><span class="line">    public boolean countMazeRec(int y, int x, char[][] n3, int[] count)&#123;</span><br><span class="line">        count[0]++;</span><br><span class="line">        if(y == n3.length - 2 &amp;&amp; x == n3[0].length - 2)&#123;</span><br><span class="line">            if(count[0] &lt; count[1] || count[1] == 0)&#123;</span><br><span class="line">                count[1] = count[0];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; else if(n3[y][x] == &#x27; &#x27;)&#123;</span><br><span class="line">            n3[y][x] = &#x27;.&#x27;;           </span><br><span class="line">            if(countMazeRec(y, x + 1, n3, count))&#123;</span><br><span class="line">                return true;</span><br><span class="line">            &#125; else if(countMazeRec(y + 1, x, n3, count))&#123;</span><br><span class="line">                return true;</span><br><span class="line">            &#125; else if(countMazeRec(y, x - 1, n3, count))&#123;</span><br><span class="line">                return true;</span><br><span class="line">            &#125; else if(countMazeRec(y - 1, x, n3, count))&#123;</span><br><span class="line">                return true;</span><br><span class="line">            &#125; else&#123;</span><br><span class="line">                n3[y][x] = &#x27; &#x27;;</span><br><span class="line">                count[0]--;</span><br><span class="line">                return false;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            count[0]--;</span><br><span class="line">            return false;</span><br><span class="line">        &#125;</span><br><span class="line">        count[0]--;</span><br><span class="line">        return false;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    //方法 outMazeRecC：迷宫游戏，最短路径法，part2</span><br><span class="line">    //该方法是在 part1 统计完最短路径后，按最短路径走出迷宫，并绘制路径</span><br><span class="line">    public boolean outMazeRecC(int y, int x, char[][] n3, int[] count)&#123;</span><br><span class="line">        count[0]++;</span><br><span class="line">        if(y == n3.length - 2 &amp;&amp; x == n3[0].length - 2)&#123;</span><br><span class="line">            if(count[0] &lt;= count[1])&#123;</span><br><span class="line">                return true;</span><br><span class="line">            &#125; else &#123;</span><br><span class="line">                n3[n3.length - 2][n3[0].length - 2] = &#x27; &#x27;;</span><br><span class="line">                count[0]--;</span><br><span class="line">                return false;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; else if(n3[y][x] == &#x27; &#x27;)&#123;</span><br><span class="line">            n3[y][x] = &#x27;.&#x27;;</span><br><span class="line">            if(outMazeRecC(y, x + 1, n3, count))&#123;</span><br><span class="line">                return true;</span><br><span class="line">            &#125; else if(outMazeRecC(y + 1, x, n3, count))&#123;</span><br><span class="line">                return true;</span><br><span class="line">            &#125; else if(outMazeRecC(y, x - 1, n3, count))&#123;</span><br><span class="line">                return true;</span><br><span class="line">            &#125; else if(outMazeRecC(y - 1, x, n3, count))&#123;</span><br><span class="line">                return true;</span><br><span class="line">            &#125; else&#123;</span><br><span class="line">                n3[y][x] = &#x27; &#x27;;</span><br><span class="line">                count[0]--;</span><br><span class="line">                return false;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            count[0]--;</span><br><span class="line">            return false;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    //=======================================================================================</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    //=======================================================================================</span><br><span class="line">    //方法 outMaze：爬墙方法迷宫游戏入口</span><br><span class="line">    public void outMaze(char[][] n1, int[] count)&#123;</span><br><span class="line">        //boolean out：记录是否走出迷宫</span><br><span class="line">        boolean out = false;</span><br><span class="line">        //角色光标 m</span><br><span class="line">        n1[1][1] = &#x27;m&#x27;;</span><br><span class="line">        </span><br><span class="line">        //创建一系列变量，后面解释用法</span><br><span class="line">        //创建 角色坐标</span><br><span class="line">        int x = 1;</span><br><span class="line">        int y = 1;</span><br><span class="line">        //创建 辅助坐标 及 方向字符。初始方向为右。</span><br><span class="line">        int xi = 1;</span><br><span class="line">        int yi = 0;</span><br><span class="line">        char dir = &#x27;r&#x27;;  </span><br><span class="line">        //创建 里迷宫，标记起止点。</span><br><span class="line">        char[][] inMaze = new char[n1.length][n1[0].length];</span><br><span class="line">        inMaze[1][1] = &#x27;B&#x27;;</span><br><span class="line">        inMaze[n1.length - 2][n1[0].length - 2] = &#x27;F&#x27;;</span><br><span class="line">        </span><br><span class="line">        //开始走迷宫。</span><br><span class="line">        //如果一个迷宫有出路，则沿着一侧的墙壁走就一定能走到出路。以下方法就是基于这个原理。</span><br><span class="line">        //角色坐标 y,x 是角色所在的位置坐标。辅助坐标 yi，xi 是角色靠近的墙壁坐标。</span><br><span class="line">        //dir 代表角色此时的朝向。只要角色按照墙壁延申的方向向前，就一定不会迷路。</span><br><span class="line">        //里迷宫的大小和真迷宫相同，坐标也一一对应。目的是为了记录数据，这些数据不会被用户看到。</span><br><span class="line">        //里迷宫记载了 起始点 和 终点 的位置。如角色回到起点，则必定失败。到达终点则成功。</span><br><span class="line">        for(;;)&#123;</span><br><span class="line"></span><br><span class="line">            //判断 是否走出迷宫。如若是，则展示迷宫，记录脱出为真，并退出寻路</span><br><span class="line">            if(inMaze[y][x] == &#x27;F&#x27;)&#123;</span><br><span class="line">                n1[y][x] = &#x27;V&#x27;;</span><br><span class="line">                n1[1][1] = &#x27;B&#x27;;</span><br><span class="line">                showMaze(n1);</span><br><span class="line">                out = true;</span><br><span class="line">                break;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            //通过爬墙方式试图走出迷宫</span><br><span class="line">            //这是方向朝右时的情况</span><br><span class="line">            if(dir == &#x27;r&#x27;)&#123;</span><br><span class="line">                //如果角色面对墙壁，意味着走到了墙角，则角色坐标不变，调整墙壁坐标，并转向</span><br><span class="line">                if(n1[y][x + 1] == &#x27;#&#x27; || n1[y][x + 1] == &#x27;O&#x27;)&#123;</span><br><span class="line">                    dir = yi &gt; y ? &#x27;u&#x27; : &#x27;d&#x27;;</span><br><span class="line">                    yi = y;</span><br><span class="line">                    xi = x + 1;</span><br><span class="line">                //如果面前有路，且墙壁延伸，则前进</span><br><span class="line">                &#125; else if (n1[yi][xi + 1] == &#x27;#&#x27; || n1[yi][xi + 1] == &#x27;O&#x27;)&#123;</span><br><span class="line">                    n1[y][x] = &#x27;.&#x27;;</span><br><span class="line">                    x++;</span><br><span class="line">                    xi++;</span><br><span class="line">                    n1[y][x] = &#x27;m&#x27;;</span><br><span class="line">                    count[1]++;</span><br><span class="line">                //如果面前有路，但墙壁不延伸，则是遇到了转角。角色移动，转向，但墙壁坐标不变</span><br><span class="line">                &#125; else &#123;</span><br><span class="line">                    dir = yi &gt; y ? &#x27;d&#x27; : &#x27;u&#x27;;</span><br><span class="line">                    n1[y][x] = &#x27;.&#x27;;</span><br><span class="line">                    n1[y][x + 1] = &#x27;.&#x27;;</span><br><span class="line">                    y = yi;</span><br><span class="line">                    x = xi + 1;</span><br><span class="line">                    n1[y][x] = &#x27;m&#x27;;</span><br><span class="line">                    count[1] += 2;</span><br><span class="line">                &#125;</span><br><span class="line">            //这是方向朝左的情况</span><br><span class="line">            &#125; else if(dir == &#x27;l&#x27;)&#123;</span><br><span class="line">                if(n1[y][x - 1] == &#x27;#&#x27; || n1[y][x - 1] == &#x27;O&#x27;)&#123;</span><br><span class="line">                    dir = yi &gt; y ? &#x27;u&#x27; : &#x27;d&#x27;;</span><br><span class="line">                    yi = y;</span><br><span class="line">                    xi = x - 1;</span><br><span class="line">                &#125; else if(n1[yi][xi - 1] == &#x27;#&#x27; || n1[yi][xi - 1] == &#x27;O&#x27;)&#123;</span><br><span class="line">                    n1[y][x] = &#x27;.&#x27;;</span><br><span class="line">                    x--;</span><br><span class="line">                    xi--;</span><br><span class="line">                    n1[y][x] = &#x27;m&#x27;;</span><br><span class="line">                    count[1]++;</span><br><span class="line">                &#125; else &#123;</span><br><span class="line">                    dir = yi &gt; y ? &#x27;d&#x27; : &#x27;u&#x27;;</span><br><span class="line">                    n1[y][x] = &#x27;.&#x27;;</span><br><span class="line">                    n1[y][x - 1] = &#x27;.&#x27;;</span><br><span class="line">                    y = yi;</span><br><span class="line">                    x = xi - 1;</span><br><span class="line">                    n1[y][x] = &#x27;m&#x27;;</span><br><span class="line">                    count[1] += 2;</span><br><span class="line">                &#125;</span><br><span class="line">            //这是方向朝下的情况</span><br><span class="line">            &#125; else if(dir == &#x27;d&#x27;)&#123;</span><br><span class="line">                if(n1[y + 1][x] == &#x27;#&#x27; || n1[y + 1][x] == &#x27;O&#x27;)&#123;</span><br><span class="line">                    dir = xi &lt; x ? &#x27;r&#x27; : &#x27;l&#x27;;</span><br><span class="line">                    yi = y + 1;</span><br><span class="line">                    xi = x;</span><br><span class="line">                &#125; else if(n1[yi + 1][xi] == &#x27;#&#x27; || n1[yi + 1][xi] == &#x27;O&#x27;)&#123;</span><br><span class="line">                    n1[y][x] = &#x27;.&#x27;;</span><br><span class="line">                    y++;</span><br><span class="line">                    yi++;</span><br><span class="line">                    n1[y][x] = &#x27;m&#x27;;</span><br><span class="line">                    count[1]++;</span><br><span class="line">                &#125; else &#123;</span><br><span class="line">                    dir = xi &lt; x ? &#x27;l&#x27; : &#x27;r&#x27;;</span><br><span class="line">                    n1[y][x] = &#x27;.&#x27;;</span><br><span class="line">                    n1[y + 1][x] = &#x27;.&#x27;;</span><br><span class="line">                    y = yi + 1;</span><br><span class="line">                    x = xi;</span><br><span class="line">                    n1[y][x] = &#x27;m&#x27;;</span><br><span class="line">                    count[1] += 2;</span><br><span class="line">                &#125;</span><br><span class="line">            //这是方向朝上的情况</span><br><span class="line">            &#125; else if(dir == &#x27;u&#x27;)&#123;</span><br><span class="line">                if(n1[y - 1][x] == &#x27;#&#x27; || n1[y - 1][x] == &#x27;O&#x27;)&#123;</span><br><span class="line">                    dir = xi &lt; x ? &#x27;r&#x27; : &#x27;l&#x27;;</span><br><span class="line">                    yi = y - 1;</span><br><span class="line">                    xi = x;</span><br><span class="line">                &#125; else if(n1[yi - 1][xi] == &#x27;#&#x27; || n1[yi - 1][xi] == &#x27;O&#x27;)&#123;</span><br><span class="line">                    n1[y][x] = &#x27;.&#x27;;</span><br><span class="line">                    y--;</span><br><span class="line">                    yi--;</span><br><span class="line">                    n1[y][x] = &#x27;m&#x27;;</span><br><span class="line">                    count[1]++;</span><br><span class="line">                &#125; else &#123;</span><br><span class="line">                    dir = xi &lt; x ? &#x27;l&#x27; : &#x27;r&#x27;;</span><br><span class="line">                    n1[y][x] = &#x27;.&#x27;;</span><br><span class="line">                    n1[y - 1][x] = &#x27;.&#x27;;</span><br><span class="line">                    y = yi - 1;</span><br><span class="line">                    x = xi;</span><br><span class="line">                    n1[y][x] = &#x27;m&#x27;;</span><br><span class="line">                    count[1] += 2;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            //判断 是否回到起点。如若是，则一定是迷宫无解。展示迷宫并退出寻路</span><br><span class="line">            if(inMaze[y][x] == &#x27;B&#x27;)&#123;</span><br><span class="line">                showMaze(n1);</span><br><span class="line">                break;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        //输出结果</span><br><span class="line">        if(out)&#123;</span><br><span class="line">            System.out.println(&quot;\t YOU WIN！！！\n\t您的步数为：&quot; + count[1]);</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            System.out.println(&quot;\t YOU LOSE&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="八皇后代码"><a href="#八皇后代码" class="headerlink" title="八皇后代码"></a>八皇后代码</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br></pre></td><td class="code"><pre><span class="line">import java.util.Scanner;</span><br><span class="line">public class EightQueen&#123;</span><br><span class="line"></span><br><span class="line">    public static void main(String[] args)&#123;</span><br><span class="line">        T tools = new T();</span><br><span class="line">        char[][] chess = new char[8][8];</span><br><span class="line">        //调用方法，建立棋盘</span><br><span class="line">        tools.buildChess(chess);</span><br><span class="line">        //调用方法，开始游戏</span><br><span class="line">        tools.eightQueen(chess);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class T&#123;</span><br><span class="line">    //buildChess：建立一个新棋盘。该棋盘白色格子用&#x27; &#x27;表示，黑色格子用&#x27;#&#x27;表示</span><br><span class="line">    public void buildChess(char[][] chess)&#123;</span><br><span class="line">        for(int i = 0; i &lt; chess.length; i++)&#123;</span><br><span class="line">            for(int j = 0; j &lt; chess[0].length; j++)&#123;</span><br><span class="line">                chess[i][j] = ((i + j) % 2 == 0) ? &#x27; &#x27; : &#x27;#&#x27;;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    //eightQueen：八皇后游戏的接入口</span><br><span class="line">    public void eightQueen(char[][] chess)&#123;</span><br><span class="line">    //建立 里棋盘 inward 及 计数数组 count。里棋盘用于计算问题，原棋盘输出给用户看。</span><br><span class="line">    //计数 count 使用数组，这样其数据在所有方法都能通用</span><br><span class="line">        char[][] inward = new char[chess.length][chess[0].length];</span><br><span class="line">        int[] count = &#123;0&#125; ;</span><br><span class="line">        //进行游戏。因为穷举所有方法，最后返回的一定是 false。反正我们不在意。</span><br><span class="line">        boolean isFinished = gameEQS(0, 0, chess, inward, count);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    //gameEQS：八皇后游戏的基本方法</span><br><span class="line">    //八皇后游戏方法。y 代表当前位置的纵坐标，x 是横坐标。chess 是棋盘，inward 是里棋盘，count 是计数数组</span><br><span class="line">    public boolean gameEQS(int y, int x, char[][] chess, char[][] inward, int[] count)&#123;</span><br><span class="line">        //当 y 超出棋盘 时，显然已经完成八皇后。</span><br><span class="line">        //由于要进行穷举，此时我们计数并输出棋盘，然后返回 false 使其继续计算</span><br><span class="line">        if(y == inward.length)&#123;</span><br><span class="line">            count[0]++;</span><br><span class="line">            System.out.println();</span><br><span class="line">            gameEQS2(chess, inward, count);</span><br><span class="line">            return false;</span><br><span class="line">        //当 x 超出棋盘 时，显然棋盘该列已经无合法放置位置。我们返回 false</span><br><span class="line">        &#125; else if(x == inward[0].length)&#123;</span><br><span class="line">            return false;</span><br><span class="line">        //gameEQS1，这个方法是查看该格子是否是合法放置位置。如若是，返回 true，而且在该位置放置棋子&#x27;Q&#x27;</span><br><span class="line">        //当这个位置合法，我们进入下一行，从头开始判断。</span><br><span class="line">        //如果后面的判断为 false，我们就拿掉这枚棋子。如果后面判断为 true 说明我们找到了一个方法。</span><br><span class="line">        //特别地，由于代码目前是穷举模式，我想我们永远不会在此输出 true</span><br><span class="line">        &#125; else if(gameEQS1(y, x, inward))&#123;</span><br><span class="line">            if(gameEQS(y + 1, 0, chess, inward, count))&#123;</span><br><span class="line">                return true;</span><br><span class="line">            &#125; else &#123;</span><br><span class="line">                inward[y][x] = &#x27; &#x27;;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        //如果代码进行到这个位置，证明我们所在的格子不适合放置棋子。我们只好去看看下一格如何。</span><br><span class="line">        return gameEQS(y, x + 1, chess, inward, count);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    //gameEQS1：该方法是输入一个坐标，并输入里棋盘地址，在里棋盘上查看该位置是否合法</span><br><span class="line">    //什么是合法的位置：就是该坐标的 同列、同行、同斜线 没有别的棋子</span><br><span class="line">    //如果是合法位置，我们放置一个棋子，并返回 true</span><br><span class="line">    public boolean gameEQS1(int y, int x, char[][] inward)&#123;</span><br><span class="line">        for(int i = 0; i &lt; inward.length; i++)&#123;</span><br><span class="line">            for(int j = 0; j &lt; inward[0].length; j++)&#123;</span><br><span class="line">                if(j == x || i == y || i - j == y - x || i + j == y + x)&#123;</span><br><span class="line">                    if(inward[i][j] == &#x27;Q&#x27;)&#123;</span><br><span class="line">                        return false;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        inward[y][x] = &#x27;Q&#x27;;</span><br><span class="line">        return true;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    //gameEQS2：这个方法是把当前 里棋盘 的棋子放置到棋盘上，输出棋盘 并 输出计数。</span><br><span class="line">    //在输出完成后，会清空棋盘。</span><br><span class="line">    public void gameEQS2(char[][] chess, char[][] inward,int[] count)&#123;</span><br><span class="line">        for(int i = 0; i &lt; chess.length; i++)&#123;</span><br><span class="line">            for(int j = 0; j &lt; chess[0].length; j++)&#123;</span><br><span class="line">                if(inward[i][j] == &#x27;Q&#x27;)&#123;</span><br><span class="line">                    chess[i][j] = &#x27;Q&#x27;;</span><br><span class="line">                &#125;</span><br><span class="line">                System.out.print(&quot; &quot; + chess[i][j]);</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println();</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.print(&quot;\n&quot; + count[0] + &quot;\n&quot;);</span><br><span class="line">        buildChess(chess);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    //gameEQSDebug</span><br><span class="line">    //输出里棋盘。测试用。</span><br><span class="line">    public void gameEQSDebug(char[][] inward)&#123;</span><br><span class="line">        for(int i = 0; i &lt; inward.length; i++)&#123;</span><br><span class="line">            for(int j = 0; j &lt; inward[0].length; j++)&#123;</span><br><span class="line">                System.out.print(&quot; &quot; + inward[i][j]);</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println();</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 教程 </tag>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java 数组、排序和查找</title>
      <link href="/2022/11/29/learn/Java/Java%20%E6%95%B0%E7%BB%84%E3%80%81%E6%8E%92%E5%BA%8F%E5%92%8C%E6%9F%A5%E6%89%BE/"/>
      <url>/2022/11/29/learn/Java/Java%20%E6%95%B0%E7%BB%84%E3%80%81%E6%8E%92%E5%BA%8F%E5%92%8C%E6%9F%A5%E6%89%BE/</url>
      
        <content type="html"><![CDATA[<blockquote><p>数组：可以存放多个同一类型的数据。数组也是一种数据，是引用类型。</p><p>即：数组就是一组数据。</p></blockquote><h2 id="一维数组"><a href="#一维数组" class="headerlink" title="一维数组"></a>一维数组</h2><blockquote><p>数组可以是多个相同类型数据的组合，实现对这些数据的统一管理。</p><p>数组中的元素可以是任何数据类型。包括基本类型和引用类型。</p><p>数组的下标从 0 开始。且必须在指定范围内使用，否则报错。</p><p>数组属于 引用类型，数组型数据是 对象（Object）</p><p>数组创建后，如果没有赋值，有默认值：int（0），short（0），byte（0），long（0L），float（0.0F），double（0.0），char（000），boolean（false），String（null），Object（null）</p></blockquote><p><strong>数组的构造方法：</strong></p><p>使用数组的步骤：1.声明数组并开辟空间 2.给数组各个元素赋值 3.使用数组</p><ul><li><p>构造方式1：动态初始化</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">int[] ints = new int[5];// 创建了数组 name，存放5个int</span><br><span class="line">int ints2[] = new int[1];// 这种写法也行</span><br><span class="line">ints[2] = 15;// 访问数组第3个数</span><br></pre></td></tr></table></figure></li><li><p>构造方式2：动态初始化</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">char[] chars;// 先声明数组 name，此时数组是 null</span><br><span class="line">chars = new char[2];// 分配内存空间，可以存放数据了</span><br><span class="line">chars[1] = &#x27;\t&#x27;;</span><br></pre></td></tr></table></figure></li><li><p>构造方式3：静态初始化</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">boolean[] bools = &#123;true, false, true, false&#125;;</span><br><span class="line">String[] strs = new String[]&#123;&quot;阿伟，你又在打电动噢&quot;, &quot;烦啦&quot;&#125;;</span><br></pre></td></tr></table></figure><p>确切知道数组每个元素的场合可以用这个方法。</p></li></ul><p><strong>数组的使用方法：</strong></p><ul><li><p>访问数组元素：<code>数组名[元素下标]</code></p><p>其中，元素下标从 0 开始编号。如：访问 strs 数组的第一个元素 <code>strs[0]</code></p></li><li><p>数组长度：<code>数组名.length</code></p><p>是一个 int 值。不能通过试图改变该值来改变数组容量</p></li></ul><h3 id="数组赋值机制"><a href="#数组赋值机制" class="headerlink" title="数组赋值机制"></a>数组赋值机制</h3><ol><li><p>基本数据类型赋值，赋值方式是值拷贝。这个值就是具体的数据，且互不影响</p></li><li><p>数组在默认情况下是引用传递，赋的值是地址，赋值方式为引用传达。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">int[] array1 = &#123;0, 0, 0&#125;;</span><br><span class="line">int[] array2 = array1;</span><br><span class="line">array2[0] = 100;</span><br></pre></td></tr></table></figure><p>上述情况下，<code>array1[0]</code> 也会变成 <code>100</code>。因为数组在 JVM 的 栈 里是一个地址，指向 堆 里的一个空间。这两个数组在上述情况下指向同一空间。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">int[] array1 = &#123;0, 0, 0&#125;;</span><br><span class="line">int[] array2 = new int[array1.length];</span><br><span class="line">for (int i = 0;i &lt; array1.length;i++) &#123;</span><br><span class="line">    array2[i] = array1[i];</span><br><span class="line">&#125;</span><br><span class="line">//同 int[] array2 = Arrays.copyOf(array1,array1.length);</span><br></pre></td></tr></table></figure><p>上述方式拷贝后，两数组相互独立。</p></li></ol><h3 id="数组的扩容"><a href="#数组的扩容" class="headerlink" title="数组的扩容"></a>数组的扩容</h3><p>当数组达到上限时，创建一个容量更大的新数组。将旧数组的元素依次放入，之后替换旧数组。</p><p>以下是一个扩容方法：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">import java.util.Scanner;</span><br><span class="line">public class Code5_1_3&#123;</span><br><span class="line"></span><br><span class="line">public static void main(String[] args)&#123;</span><br><span class="line"></span><br><span class="line">Scanner inP = new Scanner(System.in);</span><br><span class="line">int[] arr1 = &#123;1, 2, 3&#125;;// 这是原数组</span><br><span class="line">int add = 0;// 这个变量记录输入的新元素的值</span><br><span class="line">int count = arr1.length;// 这个变量是新数组的长度</span><br><span class="line">char yN = &#x27;a&#x27;;// 记录询问继续与否时用户的输入字符</span><br><span class="line"></span><br><span class="line">do&#123;</span><br><span class="line">       /* 创建多一位的新数组，把新元素赋给新数组的最后一位 */</span><br><span class="line">System.out.println(&quot;请输入添加数字：&quot;);</span><br><span class="line">add = inP.nextInt();</span><br><span class="line">int[] tem = new int[arr1.length + 1];</span><br><span class="line">tem[count] = add;</span><br><span class="line"></span><br><span class="line">       /* 把旧数组的值全部赋给新数组 */</span><br><span class="line">for(int i = 0; i &lt; arr1.length; i++)&#123;</span><br><span class="line">tem[i] = arr1[i];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">       /* 把新数组保存下来，输出现在的数组 */</span><br><span class="line">arr1 = tem;</span><br><span class="line">count++;</span><br><span class="line">System.out.println(&quot;\n\n当前数组为：&quot;);</span><br><span class="line"></span><br><span class="line">for(int i = 0; i &lt; arr1.length; i++)&#123;</span><br><span class="line">System.out.print(arr1[i] + &quot; &quot;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">       /* 询问是否继续添加，输入n跳出，否则循环 */</span><br><span class="line">System.out.println(&quot;\n\n是否继续添加？（Y/N）&quot;);</span><br><span class="line">yN = inP.next().charAt(0);</span><br><span class="line"></span><br><span class="line">&#125;while(yN != &#x27;N&#x27; &amp;&amp; yN != &#x27;n&#x27;);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="二维（多维）数组"><a href="#二维（多维）数组" class="headerlink" title="二维（多维）数组"></a>二维（多维）数组</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">int[][] ints;// 声明一个二维数组</span><br><span class="line">int[] ints2[];// 也能这样声明</span><br><span class="line">int ints3[][];// 这样也行</span><br><span class="line">int[] x,y[];// 声明了两个数组，一个是 int[] x 一个是 int[][] y</span><br><span class="line">// 把 int[] 视作一个类型，就能很好地理解这个写法</span><br></pre></td></tr></table></figure><p>二维数组实际是由多个一维数组组成的，它的各个元素的长度可以相同，也可以不同。</p><p>数组是一个对象，所以二维数组的元素存放的是一维数组的地址。</p><p><strong>二维数组构造方法：</strong></p><ul><li><p>构造方法1：动态初始化</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">int[][] many_ints = new int[3][4]// 创建 有3个 包含4个元素的一维数组 的二维数组</span><br></pre></td></tr></table></figure></li><li><p>构造方法2：动态初始化</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">double[][] many_doubles;// 先声明变量</span><br><span class="line">many_doubles = new double[3][4];// 再开辟空间</span><br></pre></td></tr></table></figure></li><li><p>构造方法3：动态初始化-列数不确定</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">char[][] many_chars = new char[3][];// 创建一个三行列数不确定的二维数组</span><br><span class="line">for (int i = 0; i &lt; 3; i++) &#123;</span><br><span class="line">    many_chars[i] = new char[i + 1];// 此时，每个数组空间依次增大</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>构造方法4：静态初始化</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">int[][] many_many = &#123;&#123;1, 3&#125;, &#123;4, 10, 2&#125;, &#123;95&#125;&#125;;</span><br></pre></td></tr></table></figure></li></ul><p><strong>二维数组使用方法：</strong></p><ul><li><code>ints.length</code>：该二维数组的长度，这里是 3</li><li><code>ints[0]</code>：该二维数组的第一个子数组</li><li><code>ints[0].length</code>：该二维数组的第一个子数组的长度，这里是 4</li><li><code>ints[1][0]</code>：该二维数组第二个子数组的第一个元素的值，这里是 21</li></ul><p><strong>多维数组（不规则数组）：</strong></p><ul><li>Java实际上没有多维数组，只有一维数组。多维数组被解释为数组的数组。</li><li>由于Java可以单独地访问数组的某一行，所以可以让两行交换</li></ul><h2 id="查找算法"><a href="#查找算法" class="headerlink" title="查找算法"></a>查找算法</h2><p>在 Java 中，常用的查找有 4 种：</p><ul><li>顺序查找（遍历）</li><li>二分查找</li><li>插值查找</li><li>斐波那契查找</li></ul><h3 id="线性查找"><a href="#线性查找" class="headerlink" title="线性查找"></a>线性查找</h3><p>逐一比对，直到发现目标值</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">public static int seqSearch(int[] array, int target) &#123;</span><br><span class="line">    for (int i = 0; i &lt; array.length; i++) &#123;</span><br><span class="line">        if (array[i] == target) return i;</span><br><span class="line">    &#125;</span><br><span class="line">    return -1;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="二分查找"><a href="#二分查找" class="headerlink" title="二分查找"></a>二分查找</h3><p>二分查找要求数组必须是有序数组。</p><p>每次取出那个中位数。目标值大于中位数的场合，则在较小一侧的范围内继续二分查找。否则在那个较大一侧查找。</p><p>递归方式二分查找：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">public static int binarySearch(int[] array, int target) &#123;</span><br><span class="line">    return binarySearch(array, target, 0, array.length);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public static int binarySearch(int[] array, int target, int l, int r) &#123;</span><br><span class="line">    if (l &gt;= r) return -l - 1;</span><br><span class="line">    int p = (l + r) / 2;</span><br><span class="line">    if (target == array[p]) return p;</span><br><span class="line">    else if (target &gt; array[p]) &#123;</span><br><span class="line">        return binarySearch(array, target, p + 1, r);</span><br><span class="line">    &#125; else return binarySearch(array, target, l, p - 1);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>非递归方式二分查找：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">public static int binarySearch2(int[] array, int target) &#123;</span><br><span class="line">    int l = 0;</span><br><span class="line">    int r = array.length;</span><br><span class="line">    while (r &gt; l) &#123;</span><br><span class="line">        int p = (r + l) / 2;</span><br><span class="line">        if (target == array[p]) return p;</span><br><span class="line">        else if (target &gt; array[p]) l = p + 1;</span><br><span class="line">        else r = p - 1;</span><br><span class="line">    &#125;</span><br><span class="line">    return -l - 1;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="插值查找"><a href="#插值查找" class="headerlink" title="插值查找"></a>插值查找</h3><p>插值查找类似于二分查找，但其不是取出中位数，而是从自适应的位置取出一个元素</p><p>那个自适应的取出位置 mid &#x3D; low + (target - arr[low]) × (high - low) &#x2F; (arr[high] - arr[low])</p><p>如若那个目标值更靠近某一端，这个自适应的取出位置也会更接近那一端</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">public static int insertSearch(int[] array, int target) &#123;</span><br><span class="line">    if (target &gt; array[array.length - 1]) return -array.length;</span><br><span class="line">    else if (target &lt; array[0]) return 0;</span><br><span class="line">    int l = 0;</span><br><span class="line">    int r = array.length;</span><br><span class="line">    int p = 0;</span><br><span class="line">    while (r &gt;= l) &#123;</span><br><span class="line">        p = l + (target - array[l]) * (r - 1 - l) / (array[r - 1] - array[l]);</span><br><span class="line">        if (target == array[p]) return p;</span><br><span class="line">        else if (target &gt; array[p]) l = p + 1;</span><br><span class="line">        else r = p - 1;</span><br><span class="line">    &#125;</span><br><span class="line">    return -p;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="斐波那契查找"><a href="#斐波那契查找" class="headerlink" title="斐波那契查找"></a>斐波那契查找</h3><p>斐波那契查找原理与前两种类似，仅仅改变了中间节点的位置。</p><p>其中间节点不是中位或插值，而是位于黄金分割点附近。</p><h2 id="排序算法"><a href="#排序算法" class="headerlink" title="排序算法"></a>排序算法</h2><blockquote><p>排序也叫排序算法。是将一组数据，依指定的顺序进行排列的过程</p></blockquote><p>排序分为两类：</p><ul><li><p>内部排序：将所有要处理的数据加载到内部存储器中进行排序</p><p>内部排序主要有以下几种：</p><ul><li>插入排序：直接插入排序、希儿排序</li><li>选择排序：简单选择排序、堆排序</li><li>交换排序：冒泡排序、快速排序</li><li>归并排序</li><li>基数排序</li></ul></li><li><p>外部排序：数据量庞大，无法全部加载到内存中，需要借助外部存储进行排序</p><p>如：合并排序法、直接合并排序法</p></li></ul><h4 id="排序算法的时间复杂度："><a href="#排序算法的时间复杂度：" class="headerlink" title="排序算法的时间复杂度："></a>排序算法的时间复杂度：</h4><table><thead><tr><th>排序法</th><th>平均时间</th><th>最差情形</th><th>稳定性</th><th>额外空间</th><th>说明</th></tr></thead><tbody><tr><td>冒泡排序</td><td>O(n2)</td><td>O(n2)</td><td>稳定</td><td>O(1)</td><td>n 小时较好</td></tr><tr><td>交换排序</td><td>O(n2)</td><td>O(n2)</td><td>不稳定</td><td>O(1)</td><td>n 小时较好</td></tr><tr><td>选择排序</td><td>O(n2)</td><td>O(n2)</td><td>不稳定</td><td>O(1)</td><td>n 小时较好</td></tr><tr><td>插入排序</td><td>O(n2)</td><td>O(n2)</td><td>稳定</td><td>O(1)</td><td>大部分已排序时较好</td></tr><tr><td>基数排序</td><td>O(n × k)</td><td>O(n × k)</td><td>稳定</td><td>O(n)</td><td>k 是 “桶” 的个数</td></tr><tr><td>Shell 排序</td><td>O(n㏒2n)</td><td>O(n㏒22n)</td><td>不稳定</td><td>O(1)</td><td>n 大时较好</td></tr><tr><td>快速排序</td><td>O(n㏒2n)</td><td>O(n2)</td><td>不稳定</td><td>O(n㏒n)</td><td>n 大时较好</td></tr><tr><td>归并排序</td><td>O(n㏒2n)</td><td>O(n㏒2n)</td><td>稳定</td><td>O(1)</td><td>n 小时较好</td></tr><tr><td>堆排序</td><td>O(n㏒2n)</td><td>O(n㏒2n)</td><td>不稳定</td><td>O(1)</td><td>n 大时较好</td></tr></tbody></table><p><strong>稳定性</strong>：排序后，那些原本相等元素的相对顺序不改变</p><h3 id="冒泡排序"><a href="#冒泡排序" class="headerlink" title="冒泡排序"></a>冒泡排序</h3><p><strong>冒泡排序</strong>：通过对 待排序序列 从后向前遍历，依次比较相邻元素的值。若发现 逆序 则交换。</p><p>如此，各元素不断接近自己的位置。值较大的元素逐渐向后移动，就像水下的气泡一样逐渐上浮。</p><p>特别地：如果在某次排序中没有发生过任何交换，则此时是已完成排序，可提前结束排序过程。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">public static void bubble_sort(int[] array) &#123;</span><br><span class="line">    /* 共执行 n - 1 轮排序 */</span><br><span class="line">    for(int count = 1; count &lt; array.length; count++)&#123;</span><br><span class="line">        boolean non_exchange = true;// 该轮排序进行了交换时变为 false</span><br><span class="line">        /* 每轮遍历 n - count 次 */</span><br><span class="line">        for(int n = 0; n &lt; array.length - count; n++)&#123;</span><br><span class="line">            /* 当比较时，如果逆序，则交换 */</span><br><span class="line">            if(array[n] &gt; array[n + 1])&#123;</span><br><span class="line">                non_exchange = false;</span><br><span class="line">                int temp = array[n + 1];</span><br><span class="line">                array[n + 1] = array[n];</span><br><span class="line">                array[n] = temp;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        /* 如果没有交换过，则提前结束排序过程 */</span><br><span class="line">        if (non_exchange) break;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果有 n 个元素，就进行 n - 1 轮排序，第 k 轮排序比较 n - k 个元素，并进行最多 n - k 次交换。时间复杂度为 O(n2)</p><p>对随机数组 int[] array（array.length &#x3D; 80000；array[i] ∊ [0, 107)）进行冒泡排序。  </p><h3 id="选择排序"><a href="#选择排序" class="headerlink" title="选择排序"></a>选择排序</h3><p><strong>选择排序</strong>：从待排序序列中，按指定规则选出某一元素，再依照规定交换位置后达到排序目的。</p><p>从待排序序列中找出最小值，与下标 0 位置元素交换。之后在剩余元素中找出最小值，与下标 1 元素交换。以此类推，直到完成。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">public static void choice_sort(int[] array) &#123;</span><br><span class="line">    for (int p = 0; p &lt; array.length - 1; p++) &#123;</span><br><span class="line">        int min_index = p;// loc 指向那个当前找到的最小值的下标</span><br><span class="line">        /* 找出当前剩余元素中的最小值 */</span><br><span class="line">        for (int n = p + 1; n &lt; array.length; n++) &#123;</span><br><span class="line">            if (array[n] &lt; array[min_index]) min_index = n;</span><br><span class="line">        &#125;</span><br><span class="line">        /* 将找到的最小值与对应位置元素交换 */</span><br><span class="line">        if (min_index != p) &#123;</span><br><span class="line">            int temp = array[min_index];</span><br><span class="line">            array[min_index] = array[p];</span><br><span class="line">            array[p] = temp;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果有 n 个元素，就进行 n - 1 轮排序，第 k 轮排序比较 n - k 个元素，并进行 1 次交换。时间复杂度为 O(n2)</p><p>对随机数组 int[] array（array.length &#x3D; 80000；array[i] ∊ [0, 107)）进行选择排序。  </p><h3 id="插入排序"><a href="#插入排序" class="headerlink" title="插入排序"></a>插入排序</h3><p><strong>插入排序</strong>：在待排序序列中的元素，以插入的方式找寻该元素的适当位置，以达到排序目的。</p><p>将待排序序列的元素视为一个有序表和一个无序表。起初，有序表中只有一个元素，无序表中有 n - 1 个元素。</p><p>排序过程中每次从 无序表中取出第一个元素，把它依次与有序表元素进行比较，确定其在有序表的位置，将其插入有序表 ，成为新的有序表 。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">public static void insert_sort(int[] array) &#123;</span><br><span class="line">    /* 数组的前一部分视为有序表，后一部分视为无序表 */</span><br><span class="line">    for (int p = 1; p &lt; array.length; p++) &#123;</span><br><span class="line">        int temp = array[p];// 那个 无序表首元素 的值</span><br><span class="line">        int insertPos = p;// 那个 无序表首元素 在有序表的位置</span><br><span class="line">        </span><br><span class="line">        /* 逆向遍历那个有序表，以确定该无序表首元素在有序表的位置。</span><br><span class="line">        到达位置前，将有序表的插入位置后的元素后移 */</span><br><span class="line">        for (int n = p - 1; n &gt;= 0; n--) &#123;</span><br><span class="line">            if (array[n] &lt; temp) break;</span><br><span class="line">            array[n + 1] = array[n];</span><br><span class="line">            insertPos--;</span><br><span class="line">        &#125;</span><br><span class="line">        /* 将该元素插入指定位置 */</span><br><span class="line">        array[insertPos] = temp;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果有 n 个元素，就进行 n - 1 轮排序，第 k 轮排序需要进行 k 次比较、移动或插入。时间复杂度为 O(n2)</p><p>对随机数组 int[] array（array.length &#x3D; 80000；array[i] ∊ [0, 107)）进行插入排序。  </p><h3 id="希儿排序"><a href="#希儿排序" class="headerlink" title="希儿排序"></a>希儿排序</h3><p><strong>希儿排序</strong>：是希儿通过在量子之海中领悟事物的演变模式，于 1959 年提出的一种排序算法。</p><p>希儿排序也是一种插入排序，是简单插入排序的高效改进版。也称为：缩小增量排序。</p><p>希儿排序是把待排序序列按下标的一定步长进行分组，对每组使用插入排序法。随着步长逐渐减少，每组包含的元素个数也越来越多。</p><p>当步长减至 1 时，整个待排序序列恰被分为 1 组，算法便中止。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">public static void seele_sort(int[] array) &#123;</span><br><span class="line">    int step = array.length / 2;// 步长。该值等于分组数量</span><br><span class="line">    </span><br><span class="line">    /* 初始将数组为 2 数一组，那么每组的步长就是 array.length / 2</span><br><span class="line">    步长是那个分组中，相邻两个数的下标间隔。步长的值也等于组数</span><br><span class="line">    直到那个分组大小等于原序列，也就是步长 == 1 时，进行最后一次排序 */</span><br><span class="line">    while (step &gt;= 1) &#123;</span><br><span class="line">        </span><br><span class="line">        /* 一共有 step 组，对每一组都进行一次完整的插入排序 */</span><br><span class="line">        for (int group = 0; group &lt; step; group++) &#123;</span><br><span class="line">            </span><br><span class="line">            /* 每一组中，下一个元素的下标是：当前下标 + step</span><br><span class="line">            每组的起始下标是 group，根据插入排序法，将每组视为有序表和无序表</span><br><span class="line">            那个无序表从每组第二个元素开始计数，也就是下标 group + step */</span><br><span class="line">            for (int toSort = group + step; toSort &lt; array.length; toSort += step) &#123;</span><br><span class="line">                int insertPos = toSort;</span><br><span class="line">                int temp;</span><br><span class="line">                /* 已经有序时直接 continue */</span><br><span class="line">                if ((temp = array[toSort]) &gt;= array[toSort - step]) continue;</span><br><span class="line">                /* 寻找插入位置。在找到位置前，移动那些有序表元素 */</span><br><span class="line">                for (int exPos = toSort - step; exPos &gt;= group; exPos -= step) &#123;</span><br><span class="line">                        if (array[exPos] &lt; temp) break;</span><br><span class="line">                        array[exPos + step] = array[exPos];</span><br><span class="line">                        insertPos -= step;</span><br><span class="line">                    &#125;</span><br><span class="line">                /* 执行插入 */</span><br><span class="line">                array[insertPos] = temp;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        /* 每轮循环后，分组容量变为 2 倍，那么步长就会变为一半 */</span><br><span class="line">        step /= 2;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果有 n 个元素，就进行 ㏒2n 次排序。每轮排序最多进行 k<code>*</code>n 次比较、移动或插入。因此，时间复杂度为 O(n㏒2n)</p><p>对随机数组 int[] array（array.length &#x3D; 80000；array[i] ∊ [0, 107)）进行希儿排序。  </p><h3 id="快速排序"><a href="#快速排序" class="headerlink" title="快速排序"></a>快速排序</h3><p><strong>快速排序</strong>：是对冒泡排序的一种改进。通过一趟排序，将待排序序列分割成独立的两部分，其中一部分的所有数据都比另一部分小，再按此方法对这两部分数据分别进行快速排序。</p><p>整个排序过程可以递归进行，最终使整个数据变成有序序列。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">public static void quick_sort(int[] array) &#123;</span><br><span class="line">    quick_sort(array, 0, array.length);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">private static void quick_sort(int[] array, int start, int end) &#123;</span><br><span class="line">    if (start == end) return;</span><br><span class="line">    int key = array[end - 1];// 将最后一个值取出作为比较值</span><br><span class="line">    int l = start;// 左指针</span><br><span class="line">    int r = end;// 右指针</span><br><span class="line">    /* 遍历指定区间，将那些较小值放到左侧，较大值放到右侧 */</span><br><span class="line">    for (int i = start; i &lt; r; ) &#123;</span><br><span class="line">        if (array[i] &lt; key) &#123;</span><br><span class="line">            array[l++] = array[i];</span><br><span class="line">        &#125; else if (array[i] &gt; key) &#123;</span><br><span class="line">            int temp = array[--r];</span><br><span class="line">            array[r] = array[i];</span><br><span class="line">            array[i] = temp;</span><br><span class="line">            continue;</span><br><span class="line">        &#125;</span><br><span class="line">        i++;</span><br><span class="line">    &#125;</span><br><span class="line">    /* key 值可能重复，那些左右指针间的空位置都是 key 值 */</span><br><span class="line">    for (int i = l; i &lt; r; i++) &#123;</span><br><span class="line">        array[i] = key;</span><br><span class="line">    &#125;</span><br><span class="line">    quick_sort(array, start, l);// 对那个较小侧区间再进行快速排序</span><br><span class="line">    quick_sort(array, r, end);// 对那个较大测区间再进行快速排序</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果有 n 个元素，就进行 ㏒2n ~ n 次排序。第 k 轮排序最多进行 2n - 2k - 1 次比较、交换或插入。因此，时间复杂度为 O(n㏒2n)，最差情况为 O(n2)</p><p>对随机数组 int[] array（array.length &#x3D; 80000；array[i] ∊ [0, 107)）进行快速排序。  </p><h3 id="归并排序"><a href="#归并排序" class="headerlink" title="归并排序"></a>归并排序</h3><p><strong>归并排序</strong>：利用归并的思想实现的排序方法。该算法采用经典的分治策略（将问题分解成几个小问题，然后分而治之）。</p><p>对 2 个元素进行比较、排序，是很容易的。对 2 个有序序列，将其合并为新的有序序列，也是容易的。</p><p>因此，我们把待排序序列分成许多组，每组包含 2 个元素，并对每组进行排序。再逐渐合并那些组，最终就能得到一个完整的有序序列。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line">public static void merger_sort(int[] array) &#123;</span><br><span class="line">    int tl = (int) Math.ceil(array.length / 2.0);</span><br><span class="line">    int[][] temp = new int[tl][];</span><br><span class="line">    for (int i = 0; ; i += 2) &#123;</span><br><span class="line">        if (i == array.length) &#123;</span><br><span class="line">            if (i == array.length + 1) temp[i / 2] = new int[]&#123;array[i - 1]&#125;;</span><br><span class="line">            break;</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            if (array[i] &gt; array[i + 1]) &#123;</span><br><span class="line">                temp[i / 2] = new int[]&#123;array[i + 1], array[i]&#125;;</span><br><span class="line">            &#125; else &#123;</span><br><span class="line">                temp[i / 2] = new int[]&#123;array[i], array[i + 1]&#125;;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    while (temp.length != 1) &#123;</span><br><span class="line">        temp = combine(temp);</span><br><span class="line">    &#125;</span><br><span class="line">    System.arraycopy(temp[0], 0, array, 0, array.length);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">private static int[][] combine(int[][] temp) &#123;</span><br><span class="line">    int tl = (int) Math.ceil(temp.length / 2.0);</span><br><span class="line">    int[][] tt = new int[tl][];</span><br><span class="line">    for (int i = 0; i &lt; tt.length; i++) &#123;</span><br><span class="line">        int tp = 2 * i;</span><br><span class="line">        if (tp + 1 &gt;= temp.length) tt[i] = temp[tp];</span><br><span class="line">        else tt[i] = combine(temp[tp], temp[tp + 1]);</span><br><span class="line">    &#125;</span><br><span class="line">    return tt;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">private static int[] combine(int[] a, int[] b) &#123;</span><br><span class="line">    int[] ret = new int[a.length + b.length];</span><br><span class="line">    int ap = 0;</span><br><span class="line">    int bp = 0;</span><br><span class="line">    int rp = 0;</span><br><span class="line">    while (true) &#123;</span><br><span class="line">        if (ap &gt;= a.length) &#123;</span><br><span class="line">            while (bp &lt; b.length) &#123;</span><br><span class="line">                ret[rp++] = b[bp++];</span><br><span class="line">            &#125;</span><br><span class="line">            break;</span><br><span class="line">        &#125; else if (bp &gt;= b.length) &#123;</span><br><span class="line">            while (ap &lt; a.length) &#123;</span><br><span class="line">                ret[rp++] = a[ap++];</span><br><span class="line">            &#125;</span><br><span class="line">            break;</span><br><span class="line">        &#125; else if (a[ap] &gt; b[bp]) &#123;</span><br><span class="line">            ret[rp++] = b[bp++];</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            ret[rp++] = a[ap++];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    return ret;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果有 n 个元素，就进行 ㏒2n ~ n 次排序。每轮排序最多进行 2n 次比较或插入。因此，时间复杂度为 O(n㏒2n)</p><p>对随机数组 int[] array（array.length &#x3D; 80000；array[i] ∊ [0, 107)）进行归并排序。  </p><h3 id="基数排序"><a href="#基数排序" class="headerlink" title="基数排序"></a>基数排序</h3><p><strong>基数排序</strong>：属于分配式排序（又称 “桶排序”。顾名思义，通过键值各个位的值，将待排序序列的元素分配至某些桶中，达到排序的作用）。基数排序是经典的空间换时间的算法。</p><p>基数排序法是桶排序的扩展。将整数按照位数切割成不同数字，然后按照每个位数分别比较。</p><p>该方法只能用于比较正数。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">public static void radix_sort(int[] array) &#123;</span><br><span class="line">    int[][] bucket = new int[10][array.length];</span><br><span class="line">    int sub = 1;</span><br><span class="line">    int border = 9;</span><br><span class="line">    int[] p = new int[10];</span><br><span class="line">    while (true) &#123;</span><br><span class="line">        boolean noMore = true;</span><br><span class="line">        for (int i :array) &#123;</span><br><span class="line">            int pos = (i / sub) % 10;</span><br><span class="line">            bucket[pos][p[pos]++] = i;</span><br><span class="line">            if (i &gt; border) noMore = false;</span><br><span class="line">        &#125;</span><br><span class="line">        int n = 0;</span><br><span class="line">        for (int i = 0; i &lt; 10; i++) &#123;</span><br><span class="line">            int j = 0;</span><br><span class="line">            while (p[i] &gt; 0) &#123;</span><br><span class="line">                array[n++] = bucket[i][j++];</span><br><span class="line">                --p[i];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        sub *= 10;</span><br><span class="line">        border = 10 * sub - 1;</span><br><span class="line">        if (noMore) break;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>根据那个最大数值的不同，需要进行 r 轮排序。每轮排序进行 3n 次计算、插入。因此，时间复杂度是 O(n㏒RB)</p><p>对随机数组 int[] array（array.length &#x3D; 80000；array[i] ∊ [0, 107)）进行基数排序。  </p><h3 id="堆排序"><a href="#堆排序" class="headerlink" title="堆排序"></a>堆排序</h3><p><strong>堆排序</strong>：利用 <strong>堆</strong> 数据结构而设计的一种排序算法。堆排序是一种选择排序，也是一种不稳定排序。</p><p><strong>堆</strong> 是具有以下性质的二叉树：</p><ul><li><p>大顶堆：每个节点的值都大于等于其子节点的值</p><p>即，对于任意节点 arr[i] 都有 arr[i] &gt;&#x3D; arr[2 * i + 1] 并且 arr[i] &gt;&#x3D; arr[2 * i + 2]</p></li><li><p>小顶堆：每个节点的值都小于等于其子节点的值</p><p>即，对于任意节点 arr[i] 都有 arr[i] &lt;&#x3D; arr[2 * i + 1] 并且 arr[i] &lt;&#x3D; arr[2 * i + 2]</p></li></ul><ol><li><p>将 待排序序列 构成一个 大顶堆（数组形式）</p><p>从最后一个非叶节点开始，从左至右，从下至上进行调整。</p><p>调整时如果乱序，则将子节点中较大方的值与该节点交换即可。交换后，那些子节点乱序的场合也要依次调整。</p><p>调整完成后，就得到了一个 大顶堆。</p></li><li><p>此时，堆顶元素即整个序列的最大值。将其 与队列末尾元素交换。</p></li><li><p>对剩余元素进行调整，使其恢复成 大顶堆。</p></li><li><p>重复上述步骤，就得到了有序序列。</p></li></ol><p>堆排序</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">public static void heap_sort(int[] array) &#123;</span><br><span class="line">    int len = array.length;</span><br><span class="line">    for (int j = array.length / 2 + 1; j &gt;= 0; j--) &#123;</span><br><span class="line">        heap_help(array, j, len);</span><br><span class="line">    &#125;</span><br><span class="line">    heap_swap(array, --len);</span><br><span class="line">    while (len &gt; 1) &#123;</span><br><span class="line">        int tar = len;</span><br><span class="line">        while (tar &gt; 0) &#123;</span><br><span class="line">            tar = (tar - 1) / 2;</span><br><span class="line">            heap_help(array, tar, len);</span><br><span class="line">        &#125;</span><br><span class="line">        heap_swap(array, --len);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">private static void heap_help(int[] array, int tar, int length) &#123;</span><br><span class="line">    int temp = array[tar];</span><br><span class="line">    for (int i = tar * 2 + 1; i &lt; length; i = i * 2 + 1) &#123;</span><br><span class="line">        if (i &lt; length - 1 &amp;&amp; array[i] &lt; array[i + 1]) i++;</span><br><span class="line">        if (array[i] &gt; temp) &#123;</span><br><span class="line">            array[tar] = array[i];</span><br><span class="line">            tar = i;</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            break;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    array[tar] = temp;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">private static void heap_swap(int[] array, int index) &#123;</span><br><span class="line">    int temp = array[0];</span><br><span class="line">    array[0] = array[index];</span><br><span class="line">    array[index] = temp;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>对随机数组 int[] array（array.length &#x3D; 80000；array[i] ∊ [0, 107)）进行堆排序。  </p>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 教程 </tag>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java 程序控制结构</title>
      <link href="/2022/11/28/learn/Java/Java%20%E7%A8%8B%E5%BA%8F%E6%8E%A7%E5%88%B6%E7%BB%93%E6%9E%84/"/>
      <url>/2022/11/28/learn/Java/Java%20%E7%A8%8B%E5%BA%8F%E6%8E%A7%E5%88%B6%E7%BB%93%E6%9E%84/</url>
      
        <content type="html"><![CDATA[<blockquote><p>程序运行的流程控制决定程序是如何执行的，是我们必须掌握的。主要分为：顺序控制、分支控制、循环控制。</p></blockquote><h2 id="顺序控制"><a href="#顺序控制" class="headerlink" title="顺序控制"></a>顺序控制</h2><blockquote><p>程序从上到下逐行执行，中间没有任何判断和跳转（默认的控制顺序）</p><p>比如：Java 定义变量时采用合法的前向引用。</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">graph LR</span><br><span class="line">A(A语句)--&gt;B(B语句)--&gt;C(C语句)--&gt;D(D语句)--&gt;E(...)</span><br></pre></td></tr></table></figure><p>语句：Java 中最小的执行单位。语句分为 单语句 和 复合语句。</p><ul><li><p>单语句：通常意义的一条语句。语句间以分号 <code>;</code> 分隔。</p></li><li><p>复合语句：一对大括号括起来的语句组。也称为 “块”</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    语句1; </span><br><span class="line">    语句2;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>块中可以有多条语句。块后没有分号 <code>;</code><br>不能在嵌套的两个块中声明同名的变量，否则将无法通过编译</p></li></ul><h2 id="分支控制-if-else"><a href="#分支控制-if-else" class="headerlink" title="分支控制 if-else"></a>分支控制 <code>if-else</code></h2><blockquote><p>让程序有选择的执行。主要分为：单分支控制、双分支控制</p></blockquote><h3 id="单分支控制"><a href="#单分支控制" class="headerlink" title="单分支控制"></a>单分支控制</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">if (条件表达式) 语句;</span><br></pre></td></tr></table></figure><p>特别地，把代码块（复合语句）作为语句的场合也能这样写：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">if (条件表达式) &#123;</span><br><span class="line"> 执行代码块;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当条件表达式为 <code>ture</code>，就会执行 <code>&#123;执行代码块;&#125;</code>；如果为 <code>false</code> 则不执行。特别地：如果 <code>&#123;执行代码块;&#125;</code> 中只有一条代码，也可以不写 <code>&#123; &#125;</code>（但还是建议写上）</p><h3 id="双分支控制"><a href="#双分支控制" class="headerlink" title="双分支控制"></a>双分支控制</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">if (条件表达式) &#123;</span><br><span class="line"> 执行代码块;</span><br><span class="line">&#125; else &#123;</span><br><span class="line"> 执行代码块2;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当条件表达式为 <code>ture</code>，就会执行 <code>&#123;执行代码块1;&#125;</code>；如果为 <code>false</code> 则执行 <code>&#123;执行代码块2;&#125;</code>。</p><h3 id="多分支控制"><a href="#多分支控制" class="headerlink" title="多分支控制"></a>多分支控制</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">if (条件表达式) &#123;</span><br><span class="line"> 执行代码块;</span><br><span class="line">&#125; else if (条件表达式2) &#123;</span><br><span class="line"> 执行代码块2;</span><br><span class="line">&#125; else if (条件表达式3) &#123;</span><br><span class="line"> 执行代码块3;</span><br><span class="line">&#125;</span><br><span class="line">...</span><br><span class="line">else &#123;</span><br><span class="line"> 执行代码块n；</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>特别地：多分支可以没有 <code>else</code>。此时如果条件都不成立，则无执行入口</p><h3 id="嵌套分支"><a href="#嵌套分支" class="headerlink" title="嵌套分支"></a>嵌套分支</h3><blockquote><p>在一个分支结构中又完整嵌套了另一个完整的分支结构。里面的分支称为内层分支，外面的分支称为外层分支。</p></blockquote><p>Java 规定，else 子句属于逻辑上距其最近，且没有匹配 else 的 if 语句：</p><blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">int n = 0;</span><br><span class="line">if (n &gt; 0) n++;</span><br><span class="line">if (n &gt; 1) n++;</span><br><span class="line">else n--;//属于上面这个 if 语句</span><br></pre></td></tr></table></figure><p>这个场合，这个 else 语句属于上面的 <code>if (n &gt; 1)</code> 这个语句</p></blockquote><p>要想改变那个匹配关系，要使用 <code>&#123; &#125;</code> 改变语句结构：</p><blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">int n = 0;</span><br><span class="line">if (n &gt; 0) &#123;</span><br><span class="line">    n++;</span><br><span class="line">if (n &gt; 1) n++;  </span><br><span class="line">&#125; else n--;</span><br></pre></td></tr></table></figure></blockquote><p><strong>规范：嵌套尽量不超过 3 层（可读性不好）</strong></p><h2 id="switch-分支结构"><a href="#switch-分支结构" class="headerlink" title="switch 分支结构"></a>switch 分支结构</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">switch(表达式)&#123;</span><br><span class="line">case 常量1:</span><br><span class="line">语句块1;</span><br><span class="line">break;//break 语句可选</span><br><span class="line">case 常量2:</span><br><span class="line">语句块2;</span><br><span class="line">break;//break 语句可选</span><br><span class="line">...</span><br><span class="line">default://default 语句可选</span><br><span class="line">default语句块;</span><br><span class="line">break;//break 语句可选</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li><code>switch</code> 关键字，表示 switch 分支。</li><li><code>表达式</code> 对应一个值。<strong>该值必须是 int 或 char</strong>（char 可以转化为 int）。是 byte 或 short 的场合，要提升为 int。不允许 long、double 或 float</li><li><code>case 常量1;</code> 表示：当 <code>表达式</code> 的值等于 <code>常量1</code> ，则执行 <code>语句块1</code>。</li><li><code>break;</code> 表示退出 switch 分支。</li><li>当 <code>表达式</code> 的值匹配 <code>常量1</code> ，则执行 <code>语句块1</code>，如果不匹配，则继续匹配 <code>常量2</code> ，以此类推。</li><li>如果全都不匹配，则执行 <code>default</code>。</li><li>如果不写 <code>break;</code> ，则会发生<strong>穿透</strong>，即不进行判断而继续执行下一语句块。</li></ol><h3 id="使用细节"><a href="#使用细节" class="headerlink" title="使用细节"></a>使用细节</h3><ol><li><p><code>表达式;</code> 数据类型，应和 <code>case</code> 后的 <code>常量</code> 类型一致，或者是可以自动转换成可以比较的类型。如：输入的是 <code>char</code> 而 <code>常量</code> 是 <code>int</code></p></li><li><p>switch 中 <code>表达式</code> 的返回值必须是：<code>byte</code> <code>short</code> <code>int</code> <code>char</code> <code>enum</code> <code>String</code></p><p><strong><em>——<code>enum</code> 是什么？详见 [[10 枚举和注解]]</em></strong></p></li><li><p><code>case</code> 语句中的值必须是 常量 或 常量表达式，不能是 变量。</p></li><li><p><code>default</code> 是可选的。没有就不执行。</p></li><li><p><code>break;</code> 用来跳出 switch 分支。如果不写，会持续执行语句，直到分支结束或遇到下一个 <code>break;</code></p></li></ol><h3 id="与-if-else-分支结构的取舍"><a href="#与-if-else-分支结构的取舍" class="headerlink" title="与 if-else 分支结构的取舍"></a>与 if-else 分支结构的取舍</h3><ul><li>如果判断的具体数值不多，且符合 <strong><em>[4.3.1.1]</em></strong> ，推荐使用 switch。</li><li>对区间判断的场合，对结果为 boolean 类型的判断，使用 <code>if-else</code>。</li></ul><h2 id="for-循环控制"><a href="#for-循环控制" class="headerlink" title="for 循环控制"></a>for 循环控制</h2><blockquote><p>让代码可以循环执行。</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">for(循环变量初始化;循环条件;循环变量迭代)&#123;</span><br><span class="line">循环操作（代码块）;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p><code>for</code> 关键字，表示循环控制</p></li><li><p>四个要素：1. 循环变量初始化 2. 循环的条件 3. 循环的操作 4. 循环变量迭代</p></li></ul><p>所有循环开始前仅一次进行初始化。直到循环条件变为 false 前，执行循环操作。每轮循环结束后，进行循环变量迭代。</p><ul><li><p>循环操作可以有多条语句</p></li><li><p>如果循环操作只有一条语句，可以省略 <code>&quot; &quot;</code>，但建议不省略</p></li></ul><h3 id="使用细节-1"><a href="#使用细节-1" class="headerlink" title="使用细节"></a>使用细节</h3><ol><li><p>循环条件是返回一个 boolean 值（<code>ture</code> 或 <code>false</code>）的公式。</p><p>循环条件可以为空。这个场合，默认为真（true）</p></li><li><p><code>for(;循环条件;)&#123; &#125;</code> 其中的初始化和变量迭代可以写在别处，但 <code>;</code> 不能省略。如果不写在别处，那个 <code>循环变量初始化</code> 中声明的变量只能在该 for 循环中使用。</p></li><li><p>控制台用 ctrl + c 强制结束一个流程</p></li><li><p>循环初始值可以有多条初始化语句，但要求类型一样，并用 <code>,</code> 隔开。</p><p>变量迭代也可以有多条代码，用 <code>,</code> 隔开。</p></li><li><p><code>for</code>语句内部定义一个变量，这个变量不能在循环体之外使用。</p></li><li><p>在循环中，检测两个浮点数是否相等需要格外小心。</p></li></ol><h3 id="for-each（泛型-for-循环）"><a href="#for-each（泛型-for-循环）" class="headerlink" title="for each（泛型 for 循环）"></a>for each（泛型 for 循环）</h3><blockquote><p>泛型 for 循环（增强 for 循环）能用来依次处理数组（或其他元素集合）中的每个元素，而不必考虑下标值</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">for(int i : nums)&#123;//其中 nums 是一个一维 int 数组</span><br><span class="line">System.out.println(i);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上述写法（增强 <code>for</code> 写法）类似于以下写法</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">for(int i = 0; i &lt; nums.length; i++)&#123;</span><br><span class="line">System.out.println(nums[i]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>泛型 for 循环适用于数组或一个实现了 Iterable 接口的对象。泛型 for 循环的本质是一个 Iterator（迭代器）</p><h2 id="while-循环控制"><a href="#while-循环控制" class="headerlink" title="while 循环控制"></a>while 循环控制</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">while(循环条件)&#123;</span><br><span class="line"> 循环体(代码块);</span><br><span class="line"> 循环变量迭代;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>while</code> 也有四要素，只是位置和 <code>for</code> 不同</p><h3 id="使用细节-2"><a href="#使用细节-2" class="headerlink" title="使用细节"></a>使用细节</h3><ol><li><p>循环条件是返回一个 boolean 值（<code>ture</code> 或 <code>false</code>）的公式。</p><p>while 循环中，循环条件不能为空。</p></li><li><p><code>while</code> 循环是先判断再执行语句。</p></li></ol><h2 id="do-while-循环控制"><a href="#do-while-循环控制" class="headerlink" title="do..while 循环控制"></a>do..while 循环控制</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">do&#123;</span><br><span class="line">循环体;</span><br><span class="line">循环变量迭代;</span><br><span class="line">&#125;while(循环条件);</span><br></pre></td></tr></table></figure><ol><li><code>do</code> <code>while</code> 是关键字</li><li>也有四要素，位置不同</li><li>先执行，再判断。也就是说，一定会至少执行一次</li><li><strong>最后有一个 <code>;</code></strong></li><li><code>while</code> 与 <code>do..while</code> 区别：判断时机</li></ol><h3 id="使用细节-3"><a href="#使用细节-3" class="headerlink" title="使用细节"></a>使用细节</h3><ol><li>循环条件是返回一个 boolean 值（<code>ture</code> 或 <code>false</code>）的公式。</li><li><code>do..while</code> 循环是先执行再判断的语句。因此至少执行一次。</li></ol><h2 id="多重循环控制"><a href="#多重循环控制" class="headerlink" title="多重循环控制"></a>多重循环控制</h2><p>将一个循环放在另一个循环体内，就形成了嵌套循环。建议一般使用两层，最多不超过三层。</p><p>嵌套循环 是把 内层循环 当成 外层循环 的 循环体。只有内层 <code>false</code> 时才可能结束当层循环。</p><p>若内层执行 n 次，外层 m 次，则合计会循环 n<code>*</code>m 次</p><blockquote><p>以下是一个示例（乘法口诀）<br> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">public class Code4_7&#123;</span><br><span class="line">   public static void main(String[] args)&#123;</span><br><span class="line">          int a = 1;//声明第一个乘数</span><br><span class="line">      int b = 1;//声明第二个乘数</span><br><span class="line">           do&#123;</span><br><span class="line">               //直到 a &gt; b 为止，a 不断增长，并让两数相乘，输出公式</span><br><span class="line">          do&#123;</span><br><span class="line">                   System.out.print(a + &quot; * &quot; + b + &quot; = &quot; + a * b + &quot;\t&quot;);</span><br><span class="line">                   a++;</span><br><span class="line">               &#125; while (a &lt;= b);</span><br><span class="line">               //把 a 重置为 1，让 b 增长，然后循环</span><br><span class="line">           a = 1;</span><br><span class="line">           System.out.println();</span><br><span class="line">           b++;</span><br><span class="line">      &#125; while (b &lt;= 9);</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p></blockquote><h2 id="跳转控制语句"><a href="#跳转控制语句" class="headerlink" title="跳转控制语句"></a>跳转控制语句</h2><blockquote><p>跳转控制语句用于分支或循环中，以便程序员更好控制程序执行方向</p></blockquote><h3 id="标签"><a href="#标签" class="headerlink" title="标签"></a>标签</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">a:&#123;</span><br><span class="line">b:&#123;</span><br><span class="line">c:&#123;</span><br><span class="line">   ...</span><br><span class="line"> berak b;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li><code>a:</code> <code>b:</code> <code>c:</code> 是标签，名字由程序员指定</li><li><code>break</code> 后指定哪个标签就退出到哪里</li><li><strong>实际开发中，尽量不要使用标签</strong></li></ol><h3 id="break"><a href="#break" class="headerlink" title="break"></a>break</h3><blockquote><p>用于中止一个语句块的执行</p></blockquote><p>语法：<code>break;</code></p><p>break 可以被用在三种场合中</p><ul><li><p>switch 语句中，以跳出判断（结束穿透）</p></li><li><p>for、while、do…while 循环语句中，以跳出循环</p></li><li><p>语句块中，以跳过本块中所有剩余语句</p><p><code>break</code> 语句出现在多层嵌套的语句块中时，可以通过 <strong>标签</strong> 指明要终止的时哪一层语句块。</p></li></ul><h3 id="continue"><a href="#continue" class="headerlink" title="continue"></a>continue</h3><blockquote><p>在循环中出现。用于结束本次循环，继续下一次循环</p></blockquote><p>语法：<code>continue;</code></p><p>进行下次循环前，仍会判断循环条件是否满足</p><p>在多层嵌套循环中，可以通过标签指出跳出哪次循环（同 <code>break</code>）</p><h3 id="return"><a href="#return" class="headerlink" title="return"></a>return</h3><blockquote><p>用于方法。表示跳出所在的方法</p></blockquote><p>语法：<code>return;</code></p><p>方法有返回值的场合，将返回值写在 return 后：<code>return 值;</code></p><p><strong><em>——见 [[6 面向对象编程（基础）]])</em></strong></p><p>如果写在 主方法 则跳出程序</p>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 教程 </tag>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java 运算符</title>
      <link href="/2022/11/27/learn/Java/Java%20%E8%BF%90%E7%AE%97%E7%AC%A6/"/>
      <url>/2022/11/27/learn/Java/Java%20%E8%BF%90%E7%AE%97%E7%AC%A6/</url>
      
        <content type="html"><![CDATA[<blockquote><p>运算符：一种特殊的符号，用于表示数据的运算、赋值和比较等。</p></blockquote><h2 id="算数运算符"><a href="#算数运算符" class="headerlink" title="算数运算符"></a>算数运算符</h2><blockquote><p>算术运算符是对数值类型的变量进行运算的运算符，在 Java 程序中使用得非常多。其运算结果是一个数值量。</p></blockquote><ul><li><p><code>+</code> ; <code>-</code> ; <code>*</code> ; <code>/</code> ：加（正）、减（负）、乘、除</p><blockquote><p><code>5 / 2 = 2;</code> 因为是 <code>int</code>。同理 <code>5.0 / 2 = 2.5</code></p></blockquote></li><li><p><code>%</code> ：取模（求余数），结果和被取模数同号。其实 <code>a % b == a - (int)a / b * b;</code></p><blockquote><p><code>11 % 9 = 2;</code></p><p><code>-11 % 9 = -2;</code></p><p><code>11 % -9 = 2;</code></p><p><code>-11 % -9 = -2;</code></p></blockquote></li><li><p><code>++</code> ：自增。</p><p><code>++i</code> 先自增后赋值；<code>i++</code> 先赋值后自增</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line"><span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> ++i; <span class="comment">//等价于 i = i + 1; j = i; 此时 i = 10; j = 10`</span></span><br><span class="line"><span class="type">int</span> <span class="variable">k</span> <span class="operator">=</span> i++; <span class="comment">//等价于 k = i; i = i + 1; 此时 i = 11; k = 10`</span></span><br><span class="line">i = i++; <span class="comment">//系统会先后执行 int temp = i;     i = i + 1;     i = temp</span></span><br><span class="line">i = ++i; <span class="comment">//系统会先后执行 i = i + 1;     int temp = i;     i = temp</span></span><br></pre></td></tr></table></figure></li><li><p><code>--</code> ：自减。和 <code>++</code> 同理。</p></li><li><p><code>+</code> ：字符串相加</p></li></ul><table><thead><tr><th>Math.方法</th><th>返回类型</th><th>简介</th></tr></thead><tbody><tr><td>abs()</td><td>~</td><td>返回参数的绝对值</td></tr><tr><td>ceil()</td><td>double</td><td>对整型变量向上取整</td></tr><tr><td>floor()</td><td>double</td><td>对整型变量向下取整</td></tr><tr><td>rint()</td><td>double</td><td>返回与参数最接近的整数</td></tr><tr><td>round()</td><td>int、long</td><td>返回一个最近的值</td></tr><tr><td>min()</td><td>double</td><td>返回两个参数中的最小值</td></tr><tr><td>max()</td><td>double</td><td>返回两个参数中的最大值</td></tr><tr><td>exp()</td><td>~</td><td>返回自然数底数e的参数次方</td></tr><tr><td>log()</td><td>~</td><td>返回参数的自然数底数的对数值</td></tr><tr><td>pow()</td><td>double</td><td>返回第一个参数的第二个参数次方</td></tr><tr><td>sqrt()</td><td>double</td><td>求平方根</td></tr><tr><td>cbrt()</td><td>double</td><td>求立方根</td></tr><tr><td>sin()</td><td>double</td><td>求指定参数的正弦值</td></tr><tr><td>cos()</td><td>double</td><td>求指定参数的余弦值</td></tr><tr><td>tan()</td><td>double</td><td>求指定参数的正切值</td></tr><tr><td>asin()</td><td>double</td><td>求指定参数的反正弦值</td></tr><tr><td>acos()</td><td>double</td><td>求指定参数的反余弦值</td></tr><tr><td>atan()</td><td>double</td><td>求指定参数的反正切值</td></tr><tr><td>atan2()</td><td>~</td><td>将笛卡尔坐标转换为极坐标，并返回极坐标的角度值</td></tr><tr><td>toDegrees()</td><td>double</td><td>将参数转化为角度</td></tr><tr><td>toRadians()</td><td>double</td><td>将参数转化为弧度</td></tr><tr><td>random()</td><td>double</td><td>返回一个随机数</td></tr><tr><td>PI</td><td>double</td><td>Π的近似值</td></tr><tr><td>E</td><td>double</td><td>e的近似值</td></tr></tbody></table><h2 id="关系运算符（比较运算符）"><a href="#关系运算符（比较运算符）" class="headerlink" title="关系运算符（比较运算符）"></a>关系运算符（比较运算符）</h2><blockquote><p>关系运算符结果都为 <code>boolean</code> 型，要么是 <code>ture</code> 要么是 <code>false</code>。其关系表达式经常用在 <code>if</code> 结构的条件中或循环结构的条件中。</p></blockquote><ul><li><code>==</code> ：相等于。<code>8 == 7</code> 结果 <code>false</code></li><li><code>!=</code> ：不等于</li><li><code>&lt;</code> <code>&gt;</code> ：小于、大于</li><li><code>&lt;=</code> <code>&gt;=</code> ：小于等于、大于等于</li><li><code>instanceof</code> ：检查是否是类的对象。<code>&quot;a&quot; istanceof String</code> 结果 <code>ture</code></li></ul><h3 id="使用细节"><a href="#使用细节" class="headerlink" title="使用细节"></a>使用细节</h3><ol><li>关系运算符结果都是 <code>boolean</code> 型，要么是 <code>ture</code> ，要么是 <code>false</code></li><li>关系运算符的表达式，称为<strong>关系表达式</strong></li><li>比较运算符 <code>==</code> 不要误写为 <code>=</code></li><li>Java 允许将 <code>==</code>、<code>!=</code> 两种运算用于任何数据类型</li><li>可以用<code>s.equals()</code>判断字符串是否相等，<code>s.equalsIgnoreCase()</code>不区分大小写。<code>==</code>只能确定两个字符串是否存放在同一个位置上。</li></ol><h2 id="逻辑运算符"><a href="#逻辑运算符" class="headerlink" title="逻辑运算符"></a>逻辑运算符</h2><blockquote><p>用于连接多个条件（多个关系表达式），最终的结果也是一个 <code>boolean</code> 值。</p></blockquote><ul><li><p><code>&amp;&amp;</code> ：短路与。<code>a</code> <code>b</code> 同时为 <code>ture</code>，则结果为 <code>ture</code>，否则为 <code>false</code>。</p></li><li><p><code>&amp;</code> ：逻辑与。<code>a</code> <code>b</code> 同时为 <code>ture</code>，则结果为 <code>ture</code>，否则为 <code>false</code>。</p><p><code>&amp;&amp;</code> 与 <code>&amp;</code> 的区别，在于 <code>a &amp;&amp; b</code> 的场合，<code>a = false</code> 时，则 <code>b</code> 不判断。而 <code>&amp;</code> 会完成判断。开发中多用 <code>&amp;&amp;</code> ，因为其效率更高。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="variable">a</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line"><span class="type">int</span> <span class="variable">b</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (a++ &gt; <span class="number">1</span> &amp;&amp; ++b &lt; <span class="number">1</span>) System.out.println(<span class="string">&quot;Nothing happened&quot;</span>);</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">此时 a 经历了先判断后自增，返回 false 并且 a = 2</span></span><br><span class="line"><span class="comment">但此时 b = 1; 因为 a = false; 所以 ++b 不执行。</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure></li><li><p><code>||</code> ：短路或。<code>a</code> <code>b</code> 任一为 <code>ture</code>，则结果为 <code>ture</code>，否则为 <code>false</code>。</p></li><li><p><code>|</code> ：逻辑或。<code>a</code> <code>b</code> 任一为 <code>ture</code>，则结果为 <code>ture</code>，否则为 <code>false</code>。</p><blockquote><p>两者的区别和<code>&amp;&amp;</code> 与 <code>&amp;</code> 相似，若第一个为 <code>ture</code> ，则 <code>||</code> 不会判断第二个。</p></blockquote></li><li><p><code>!</code> ：取反。<code>a</code> 为 <code>ture</code>，则结果为 <code>false</code>。反之为 <code>ture</code>。</p></li><li><p><code>^</code>：逻辑异或。<code>a</code> <code>b</code> 不同时，结果为 <code>ture</code>，否则为 <code>false</code>。</p></li></ul><h2 id="赋值运算符"><a href="#赋值运算符" class="headerlink" title="赋值运算符"></a>赋值运算符</h2><blockquote><p>将某个运算后的值，赋给指定变量</p></blockquote><ul><li><p>基本赋值运算符：<code>=</code></p></li><li><p>符合赋值运算符：<code>+=</code> ; <code>-=</code> ; <code>*=</code> ; <code>/=</code> ; <code>%=</code> 等</p><blockquote><p><code>a += b</code> 等价于 <code>a = a + b</code>。其余同理。</p></blockquote></li></ul><h3 id="使用细节-1"><a href="#使用细节-1" class="headerlink" title="使用细节"></a>使用细节</h3><ol><li><p>运算顺序从右往左。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="variable">num</span> <span class="operator">=</span> a + b + c;<span class="comment">// 先运行(a + b + c)，再结算int num =</span></span><br></pre></td></tr></table></figure></li><li><p>运算符左边只能是变量，右边可以是变量、表达式、常量值。</p></li><li><p>复合赋值运算符会进行类型转换。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">byte</span> <span class="variable">b</span> <span class="operator">=</span> <span class="number">2</span>; b += <span class="number">3</span>;<span class="comment">// 此时 b += 3 等价于 b = (byte)(b + 3)</span></span><br><span class="line">b++;<span class="comment">// 同理</span></span><br></pre></td></tr></table></figure></li></ol><h2 id="三元运算符"><a href="#三元运算符" class="headerlink" title="三元运算符"></a>三元运算符</h2><blockquote><p>基本语法：<code>条件表达式 ? 表达式1 : 表达式2;</code></p><p>运算规则：如果条件表达式为 <code>ture</code> ，运算的结果是表达式1；反之为表达式2。</p></blockquote> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="variable">a</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line"><span class="type">int</span> <span class="variable">b</span> <span class="operator">=</span> <span class="number">11</span>;</span><br><span class="line"><span class="type">int</span> <span class="variable">result</span> <span class="operator">=</span> (a == b ? a++ : b++);<span class="comment">// 此时 a = 10  result = 11  b = 12</span></span><br></pre></td></tr></table></figure><h3 id="使用细节-2"><a href="#使用细节-2" class="headerlink" title="使用细节"></a>使用细节</h3><ol><li><p>表达式1 和 表达式2 要为可以赋给接受变量的类型（或可以自动转换，或进行强制转换）</p></li><li><p>三元运算符可以转成 <code>if--else</code></p></li><li><p>三元运算符是一个整体。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Object</span> <span class="variable">obj</span> <span class="operator">=</span> <span class="literal">true</span> ? <span class="keyword">new</span> <span class="title class_">Integer</span>(<span class="number">1</span>) : <span class="keyword">new</span> <span class="title class_">Double</span>(<span class="number">2.2</span>);</span><br><span class="line">System.out.print(obj)</span><br></pre></td></tr></table></figure><p>上例中，系统将会输出 <code>1.0</code></p><p>因为 三元运算符 是一个整体，所以根据 [2.8.1.1.1] 发生了类型转换。</p></li></ol><h2 id="运算符优先级"><a href="#运算符优先级" class="headerlink" title="运算符优先级"></a>运算符优先级</h2><table><thead><tr><th>运算符（优先级从高到低）</th><th>结核性</th></tr></thead><tbody><tr><td><code>[]</code>、<code>()</code>、<code>方法调用</code></td><td>从左向右</td></tr><tr><td><code>!</code>、<code>~</code>、<code>++</code>、<code>--</code>、<code>+</code>（一元运算）、<code>-</code>（一元运算）、<code>强制类型转换</code>、<code>new</code></td><td>从右向左</td></tr><tr><td><code>*</code>、<code>/</code>、<code>%</code></td><td>从左向右</td></tr><tr><td><code>+</code>、<code>-</code></td><td>从左向右</td></tr><tr><td><code>&lt;&lt;</code>、<code>&gt;&gt;</code>、<code>&gt;&gt;&gt;</code></td><td>从左向右</td></tr><tr><td><code>&lt;</code>、<code>&gt;</code>、<code>&lt;=</code>、<code>&gt;=</code>、instanceof</td><td>从左向右</td></tr><tr><td><code>==</code>、<code>!=</code></td><td>从左向右</td></tr><tr><td><code>&amp;</code></td><td>从左向右</td></tr><tr><td><code>^</code></td><td>从左向右</td></tr><tr><td>&#96;</td><td>&#96;</td></tr><tr><td><code>&amp;&amp;</code></td><td>从左向右</td></tr><tr><td>&#96;</td><td></td></tr><tr><td><code>?:</code></td><td>从右向左</td></tr><tr><td><code>=</code>、<code>+=</code>、<code>-=</code>、<code>*=</code>、<code>/=</code>、<code>&amp;=</code>、<code>%=</code>、<code>^=</code>、&#96;</td><td>&#x3D;<code>、</code>&lt;&lt;&#x3D;<code>、</code>&gt;&gt;&#x3D;<code>、</code>&gt;&gt;&gt;&#x3D;&#96;</td></tr></tbody></table><ol><li>运算符有不同优先级。优先级高的总是优先于低的。</li><li>只有单目运算符、赋值运算符是从右向左运算的。</li></ol><h2 id="标识符"><a href="#标识符" class="headerlink" title="标识符"></a>标识符</h2><blockquote><p>Java 对各种变量、方法和类等命名时使用的字符序列称为标识符</p><p>凡是自己可以起名字的地方都叫标识符 <code>double height = 0.0;</code></p></blockquote><h3 id="命名规则"><a href="#命名规则" class="headerlink" title="命名规则"></a>命名规则</h3><ol><li><p>标识符由 26 个大、小写英文字母，0 - 9 阿拉伯数字，_ 或 $ 符号组成。</p></li><li><p><strong>数字不能开头</strong>。 错误示范：<code>int 3a = 1;</code></p></li><li><p>不能使用关键字和保留字（可以包含）。</p></li><li><p>严格区分大小写，长度无限制。</p></li><li><p>不能包含空格。</p></li><li><p>与多数编程语言不同。Java 可以用任何 Unicode 字符（特殊字符除外）作为标识符。但不推荐这么做</p><blockquote><p>** String 一只猫：**</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">String ᓚᘏᗢ = <span class="string">&quot;✪ ω ✪&quot;</span>;<span class="comment">// 喵？</span></span><br></pre></td></tr></table></figure></li></ol><h3 id="命名规范"><a href="#命名规范" class="headerlink" title="命名规范"></a>命名规范</h3><ol><li>包名：多单词组成时所有字母都小写：aaa.bbb.ccc</li><li>类名、接口名：多单词组成时，采用大驼峰法，所有单词的首字母大写：XxxYyyZzz</li><li>变量名、方法名：多单词组成时，采小驼峰法（驼峰法），第一个单词首字母小写，第二个开始每个单词首字母大写：xxxYyyZzz</li><li>常量名：所有字母都大写。多单词时每个单词用下划线连接：XXX_YYY_ZZZ</li></ol><h2 id="输入与输出"><a href="#输入与输出" class="headerlink" title="输入与输出"></a>输入与输出</h2><blockquote><p>为满足读取用户输入、输出的需求，Java 提供了几个基本类</p></blockquote><h3 id="Scanner-类"><a href="#Scanner-类" class="headerlink" title="Scanner 类"></a>Scanner 类</h3><blockquote><p>在编程中，需要接收用户输入的数据，就可以使用键盘输入语句来获取。</p><p><code>Input.java</code> ，需要一个 扫描器（对象），就是 Scanner</p><p>Scanner 属于 java.util 包。其包含许多方法</p></blockquote><p><strong>示例：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner;<span class="comment">//[1] 导入</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Code3_8_1</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">        <span class="type">Scanner</span> <span class="variable">aScannerName</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);<span class="comment">//[2] 创建 Scanner 对象</span></span><br><span class="line">        System.out.println(<span class="string">&quot;\n输入点什么吧！&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">pointSomething</span> <span class="operator">=</span> aScannerName.next();<span class="comment">//[3] 接收用户输入</span></span><br><span class="line">        System.out.println(<span class="string">&quot;\n接下来，输入一个数字吧！&quot;</span>);</span><br><span class="line">        <span class="type">double</span> <span class="variable">aNumber</span> <span class="operator">=</span> aScannerName.nextDouble();<span class="comment">//[3] 接收用户输入</span></span><br><span class="line">        System.out.println(<span class="string">&quot;\n你输入的\&quot;点什么\&quot;是:\&quot;&quot;</span> </span><br><span class="line">        + pointSomething + <span class="string">&quot;\&quot;\n你输入的\&quot;一个数字\&quot;是：\&quot;&quot;</span> </span><br><span class="line">        + aNumber + <span class="string">&quot;\&quot;&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><ol><li>导入该类所在的包</li><li>创建该类对象（声明变量）</li><li>调用里面的功能，接收用户输入</li></ol></blockquote><p>构造方法：</p><ul><li><p><code>new Scanner(System.in)</code>：该方法接收一个参数（输入源）。其中 <code>System.in</code> 代表标准输入流。默认情况指键盘。</p><p><strong><em>—— 见 [[17 IO流]]</em></strong></p></li></ul><p>常用方法：</p><ul><li><p><code>String next()</code>：读取下一个输入对象</p><p>Scanner 对象用空白（空格、水平制表符或回车换行符）作为输入的分隔元素</p></li><li><p><code>Double nextDouble()</code>：读取下一个 double</p><p><code>Int nextInt()</code>：读取下一个 int</p></li><li><p><code>String nextLine()</code>：读入当前行的所有输入，直到行尾</p></li><li><p><code>boolean hasNext()</code>：检测输入中是否还有其他单词</p><p><code>boolean hasNextInt()</code>、<code>boolean hasNextDouble()</code></p></li></ul><p>补充：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Console</span> <span class="variable">console</span> <span class="operator">=</span> System.console();  </span><br><span class="line">console.readPassword(输出,输入); <span class="comment">//读取用户密码，用户不可见</span></span><br></pre></td></tr></table></figure><h3 id="格式化输出"><a href="#格式化输出" class="headerlink" title="格式化输出"></a>格式化输出</h3><blockquote><p>System.out 标准输出流。调用该流方法以输出内容至控制台窗口</p></blockquote><ul><li><p><code>println(String s)</code>：输出字符，结束后换行</p><p><code>print(String s)</code>：输出字符，结束后不换行</p><p><code>println(int n)</code>、<code>println(char c)</code>、<code>println(Object obj)</code>……</p></li><li><p><code>printf(String format, Object ... args)</code>：格式化输出</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">System.out.printf(<span class="string">&quot;%s，你来啦，给你 %d 拳&quot;</span>, <span class="string">&quot;柏枝凪斗&quot;</span>, <span class="number">1</span>);<span class="comment">// &lt;———— 给了柏枝凪斗一拳</span></span><br></pre></td></tr></table></figure><p>以 % 开头的 <em>格式说明符</em> 都用相应参数替换。格式说明符尾部的转换符表示要格式化的数值类型</p></li></ul><table><thead><tr><th>转换符</th><th>类型</th><th>示例</th></tr></thead><tbody><tr><td>d</td><td>十进制整数</td><td>159</td></tr><tr><td>s</td><td>字符串</td><td>Hello</td></tr><tr><td>x</td><td>十六进制整数</td><td>9f</td></tr><tr><td>c</td><td>字符</td><td>H</td></tr><tr><td>o</td><td>八进制整数</td><td>237</td></tr><tr><td>b</td><td>布尔值</td><td>true</td></tr><tr><td>f</td><td>定点浮点数</td><td>15.9</td></tr><tr><td>h</td><td>散列码</td><td>42628b2</td></tr><tr><td>e</td><td>指数浮点数</td><td>1.59e+01</td></tr><tr><td>tx 或 Tx</td><td>日期时间（T强制大写）</td><td>过时</td></tr><tr><td>g</td><td>通用浮点数</td><td>——</td></tr><tr><td>%</td><td>百分号</td><td>%</td></tr><tr><td>a</td><td>十六进制浮点数</td><td>0x1.fccdp3</td></tr><tr><td>n</td><td>行分隔符</td><td>——</td></tr></tbody></table><p>也能指定控制格式化输出外观的各种标志</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">System.out.printf(<span class="string">&quot;% (4.12f&quot;</span>, Math.PI);<span class="comment">// &lt;————— 保留 12 位，正数添加空格，负数添加括号</span></span><br></pre></td></tr></table></figure><table><thead><tr><th>标志</th><th>目的</th></tr></thead><tbody><tr><td>+</td><td>打印正数和负数的符号</td></tr><tr><td>（空格）</td><td>在正数前添加空格</td></tr><tr><td>0</td><td>数字前面补 0</td></tr><tr><td>-</td><td>左对齐</td></tr><tr><td>(</td><td>负号被括号环绕</td></tr><tr><td>,</td><td>添加分组分隔符</td></tr><tr><td><code>#</code>（对于 f 格式）</td><td>包含小数点</td></tr><tr><td><code>#</code>（对于 x 或 0 格式）</td><td>添加前缀 0x 或 0</td></tr><tr><td><code>$</code></td><td>指定要格式化的参数索引：%1<code>$</code>d以十进制打印第 1 个参数</td></tr><tr><td>&lt;</td><td>格式化前面说明的数值：%d%&lt;x 十进制打印后，再以十六进制打印一遍</td></tr></tbody></table><h3 id="NumberFormat-类"><a href="#NumberFormat-类" class="headerlink" title="NumberFormat 类"></a>NumberFormat 类</h3><blockquote><p>Java 提供的格式化输出功能，能使打印或显示是信息更美观</p><p>NumberFormat 类属于 Java 标准类库，在 java.text 包中</p><p>NumberFormat 类不能直接创建对象。利用类中的静态方法获取一个对象实例</p></blockquote><p>获取实例：</p><ul><li><code>NumberFormat.getInstance()</code>：返回当前默认语言环境的默认数值格式</li><li><code>NumberFormat.getCurrnecyInstance()</code>：返回当前默认语言环境的通用格式</li><li><code>NumberFormat.getNumberInstance()</code>：返回当前默认语言环境的通用数值格式</li><li><code>NumberFormat.getPercentInstance()</code>：返回当前默认语言环境的百分比格式</li></ul><p>常用方法：</p><ul><li><p><code>format(num)</code>：获取 num 的格式化语句</p></li><li><p><code>setMaximunFactionDigits(n)</code>：将该格式的小数部分允许的最大位数设置为 n</p><p><code>setMinimunFactionDigits(n)</code>：将该格式的小数部分允许的最小位数设置为 n</p></li><li><p><code>setMaximunIntegerDigits(n)</code>：将该格式的整数部分允许的最大位数设置为 n</p><p><code>setMinimunIntegerDigits(n)</code>：将该格式的整数部分允许的最小位数设置为 n</p></li></ul><h3 id="DecimalFormat-类"><a href="#DecimalFormat-类" class="headerlink" title="DecimalFormat 类"></a>DecimalFormat 类</h3><blockquote><p>与 NumberFormat 类不同，DecimalFormat 类可以直接实例化对象。</p></blockquote><p>实例化：</p><ul><li><p><code>new DecimalFormat(pattern)</code></p><p>其中 pattern 是一个 String，代表格式化处理模式。如</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">DecimalFormat</span> <span class="variable">df</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DecimalFormat</span>(<span class="string">&quot;0.###&quot;</span>);<span class="comment">//格式对象，保留 3 位小数</span></span><br></pre></td></tr></table></figure></li></ul><p>常用方法：</p><ul><li><code>format(num)</code>：获取 num 的格式化语句</li><li><code>applyPattern(pattern)</code>：变更要使用的格式</li></ul><h2 id="进制"><a href="#进制" class="headerlink" title="进制"></a>进制</h2><ul><li>二进制：数字有 0 - 1，满 2 进 1，以 <code>0b</code> 或 <code>0B</code> 开头</li><li>十进制</li><li>八进制：0 - 7，满 8 进 1，以 <code>0</code> 开头表示</li><li>十六进制：0 - 9 及 A - F，满 16 进 1，以<code>0x</code> 或 <code>0X</code> 开头。此处的 A - F 不分大小写。</li></ul><h3 id="进制的转换"><a href="#进制的转换" class="headerlink" title="进制的转换"></a>进制的转换</h3><ul><li>其他进制 转 十进制：略</li><li>十进制 转 其他进制：将该数不断除以对象进制数，直到商为0为止，将每步得到的余数倒过来。</li><li>二进制 与 八进制 或 十六进制 互相转换：二进制 从低位开始，每 3 位一组，转成对应的 八进制 即可。反之同理。十六进制亦同理（每 4 位一组）。</li></ul><h3 id="原码、反码、补码"><a href="#原码、反码、补码" class="headerlink" title="原码、反码、补码"></a>原码、反码、补码</h3><p>对于有符号数而言：</p><ol><li>二进制的最高位是符号位：0表示正数，1表示负数。</li><li>正数的原码、反码、补码都一样。</li><li>负数的反码 &#x3D; 原码符号位不变，其他位取反（0 变 1，1 变 0）</li><li><strong>负数的补码 &#x3D; 反码 + 1。也就是说，负数的反码 &#x3D; 补码 - 1。</strong></li><li>0 的反码、补码都是 0。</li><li>Java 没有无符号数。换言之，Java 的数都是有符号的。</li><li><strong>计算机运算时，都是以补码的方式来运算的。</strong></li><li><strong>当我们看运算结果时，要看其原码。</strong></li></ol><h2 id="位运算符"><a href="#位运算符" class="headerlink" title="位运算符"></a>位运算符</h2><ul><li><p><code>&amp;</code> 按位与：两位都为 1，结果为 1，否则为 0</p></li><li><p><code>|</code> 按位或：两位有一个为 1，结果为 1，否则为 0</p></li><li><p><code>^</code> 按位异或：两位不同，结果为 1，否则为 0</p></li><li><p><code>~</code> 按位取反：把 0 变 1，1 变 0</p><p>以下是几个示例：</p><ul><li><p><code>2 &amp; 3</code>：</p><blockquote><p>2 的原码：00000000 00000000 00000000 00000010</p><p>2 的补码：00000000 00000000 00000000 00000010</p><p>3 的原码：00000000 00000000 00000000 00000011</p><p>3 的补码：00000000 00000000 00000000 00000011</p><p>补码运算结果：00000000 00000000 00000000 00000010</p><p>结果转成原码：00000000 00000000 00000000 00000010</p><p>运算结果：2</p></blockquote></li><li><p><code>~-2</code>：</p><blockquote><p>得到 -2 的原码：10000000 00000000 00000000 00000010</p><p>得到 -2 的反码：11111111 11111111 11111111 11111101</p><p>得到 -2 的补码：11111111 11111111 11111111 11111110</p><p>补码运算结果：00000000 00000000 00000000 00000001</p><p>结果转成原码：00000000 00000000 00000000 00000001</p><p>运算结果：1</p></blockquote></li><li><p><code>~2</code>：</p><blockquote><p>2 的原码：00000000 00000000 00000000 00000010</p><p>2 的补码：00000000 00000000 00000000 00000010</p><p>补码运算：11111111 11111111 11111111 11111101</p><p>结果转成反码：11111111 11111111 11111111 11111100</p><p>反码转成原码：10000000 00000000 00000000 00000011</p><p>运算结果：-3</p></blockquote></li></ul></li><li><p><code>&gt;&gt;</code> 算术右移：低位溢出，符号位不变，用符号位补溢出的高位</p></li><li><p><code>&lt;&lt;</code> 算数左移：符号位不变，低位补 0</p></li><li><p><code>&gt;&gt;&gt;</code> 逻辑右移（无符号右移）：低位溢出，高位补 0</p><p>下面是示例：</p><ul><li><p>将数字 1 算术右移 2 位：<code>int a = 1 &gt;&gt; 2</code></p><blockquote><p>1 的补码：00000000 00000000 00000000 00000001</p><p>补码结果：00000000 00000000 00000000 00000000</p><p>结果：00000000 00000000 00000000 00000000</p></blockquote></li><li><p>将数字 1 算术左移 2 位：<code>int b = 1 &lt;&lt; 2</code></p><blockquote><p>1 的补码：00000000 00000000 00000000 00000001</p><p>补码结果：00000000 00000000 00000000 00000100</p><p>结果：00000000 00000000 00000000 00000100</p></blockquote></li></ul><p>也就是说，<code>1 &lt;&lt; 2</code> 本质是 <code>1 * 2 * 2 = 4</code></p><p>而 <code>1 &gt;&gt; 2</code> 本质是 <code>1 / 2 / 2 = 0</code></p></li></ul><p><strong>使用细节：</strong></p><ol><li><p>位运算符只对整型、字符类型有效</p></li><li><p>移位运算中，左侧操作 int 的场合，右侧操作数以 32 取模；long 的场合，右侧操作数以 64 取模。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> <span class="number">20</span>;</span><br><span class="line">n &gt;&gt;= <span class="number">32</span>;<span class="comment">//这个场合，n 不改变。这样能保证左侧数字不被全部移走</span></span><br></pre></td></tr></table></figure></li></ol><h2 id="附录"><a href="#附录" class="headerlink" title="附录"></a>附录</h2><h3 id="Java-API-文档"><a href="#Java-API-文档" class="headerlink" title="Java API 文档"></a>Java API 文档</h3><blockquote><p>API：Application Programming Iterface（应用程序编程接口），是 Java 提供的基本编程接口（Java 提供的一些类和方法）。</p><p>Java 语言提供了大量基础类，为了告诉开发者如何使用这些类，及类里包含的方法，就有了API文档。</p></blockquote><h4 id="使用方法"><a href="#使用方法" class="headerlink" title="使用方法"></a>使用方法</h4><ul><li>包 —— 类 &#x2F; 接口 —— 方法</li><li>直接检索</li></ul>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 教程 </tag>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java 变量</title>
      <link href="/2022/11/26/learn/Java/Java%20%E5%8F%98%E9%87%8F/"/>
      <url>/2022/11/26/learn/Java/Java%20%E5%8F%98%E9%87%8F/</url>
      
        <content type="html"><![CDATA[<h2 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h2><blockquote><p>变量：变量是程序的基本组成单位</p><p>变量的三个基本要素：类型 + 名称 + 值</p><p>示例：<code>int a = 1</code> 类型 int 名称 a 值 1</p></blockquote><p><strong>如何声明变量：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> a;</span><br><span class="line">a = <span class="number">100</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="variable">b</span> <span class="operator">=</span> <span class="number">100</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="variable">c</span> <span class="operator">=</span> <span class="number">5</span>, d;</span><br></pre></td></tr></table></figure><h2 id="变量使用注意事项"><a href="#变量使用注意事项" class="headerlink" title="变量使用注意事项"></a>变量使用注意事项</h2><ol><li>变量表示内存中的一个存储区域。不同变量，不同类型，占用的空间大小不同。如 <code>int</code> 有 4 byte，而 <code>double</code> 有 8 byte。</li><li>该区域有自己的名称 <code>变量名</code> 和类型 <code>数据类型</code></li><li>变量必须先声明，后使用。</li><li>变量在同一作用域内不能重名。</li><li>该区域的数据值可以在同一类型范围内变化。</li><li>变量的三个基本要素：类型 + 名称 + 值</li></ol><h2 id="程序中-的使用"><a href="#程序中-的使用" class="headerlink" title="程序中 + 的使用"></a>程序中 <code>+</code> 的使用</h2><ol><li><p>当左右两边都是数值型，做加法运算</p></li><li><p>当左右两边任意一方为字符串，做拼接运算</p></li><li><p>运算顺序是从左到右的</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">System.out.println(<span class="number">1</span> + <span class="number">1</span> + <span class="string">&quot;a&quot;</span> + <span class="number">1</span> + <span class="number">1</span>);<span class="comment">// 输出 2a11</span></span><br></pre></td></tr></table></figure></li></ol><h2 id="Java-数据类型"><a href="#Java-数据类型" class="headerlink" title="Java 数据类型"></a>Java 数据类型</h2><h4 id="基本数据类型（本章）"><a href="#基本数据类型（本章）" class="headerlink" title="基本数据类型（本章）"></a>基本数据类型（本章）</h4><ul><li><p><strong>数值型</strong></p><ul><li><p>整数类型：</p><ul><li>byte：占用 1 字节</li><li>short：占用 2 字节</li><li>int：占用 4 字节</li><li>long：占用 8 字节</li></ul></li><li><p>浮点（小数）类型：</p><ul><li>float：占用 4 字节</li><li>double：占用 8 字节</li></ul></li></ul></li><li><p><strong>字符型</strong></p><ul><li>char：存放单个字符，占用 2 字节</li></ul></li><li><p><strong>布尔型</strong></p><ul><li>boolean：存放 true（真），false（假）。占用 1 字节</li></ul></li></ul><h4 id="引用数据类型（复合数据类型）"><a href="#引用数据类型（复合数据类型）" class="headerlink" title="- 引用数据类型（复合数据类型）"></a>- 引用数据类型（复合数据类型）</h4><ul><li><p><strong>类</strong>：class</p><p><strong><em>——详见 [[6 面向对象编程（基础）]]</em></strong></p></li><li><p><strong>接口</strong>：interface</p><p><strong><em>——详见 [[9 面向对象编程（高级）]]</em></strong></p></li><li><p><strong>数组</strong>：<code>[]</code></p><p><strong><em>——详见 [[ 5 数组、排序和查找 ]]</em></strong></p></li></ul><h2 id="整数类型"><a href="#整数类型" class="headerlink" title="整数类型"></a>整数类型</h2><blockquote><p>用于存放整数值</p></blockquote><ul><li><code>byte</code> 占用 1 字节，范围： -128 ~ 127</li><li><code>short</code> 占用 2 字节，范围： -32768 ~ 32767</li><li><code>int</code> 占用 4 字节，范围： -2147483648 ~ 2147483647</li><li><code>long</code> 占用 8 字节，范围： -9223372036854775808 ~ 9223372036854775807</li></ul><p><strong>使用细节：</strong></p><ol><li><p>Java 各整数类型有固定的范围和字符长度，不受具体 OS（操作系统）影响，以保证 Java 程序的可移植性。</p></li><li><p>Java 默认整型常量为 <code>int</code> ，要声明 <code>long</code> 型常量必须后加 <code>l</code> 或 <code>L</code>。</p></li><li><p>从 Java 7 开始，加上前缀 <code>0b</code> 或 <code>0B</code> 就可以写二进制数。</p></li><li><p>从 Java 7 开始，可以为数字字面添加下划线。这不会影响数字的值，只是为了方便阅读。</p></li><li><p>十六进制数值有一个前缀<code>0x</code>或<code>0X</code>。</p></li><li><p>八进制有一个前缀<code>0</code>。</p></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> <span class="number">0b0010</span>;</span><br><span class="line">n = <span class="number">0b001</span>;</span><br><span class="line">n = <span class="number">100_0_000000</span>;</span><br><span class="line">n = <span class="number">0B0000_0010_1100</span>;</span><br><span class="line"><span class="type">float</span> <span class="variable">f</span> <span class="operator">=</span> <span class="number">1.0F</span>;</span><br></pre></td></tr></table></figure><p>如果基本的整数、浮点类型不能满足范围、精度的需求，可以使用 “大数”</p><p><strong><em>—— 大数，见 [[12 常用类]]</em></strong></p><h2 id="浮点类型"><a href="#浮点类型" class="headerlink" title="浮点类型"></a>浮点类型</h2><blockquote><p>可以表示一个小数</p></blockquote><ul><li><code>float</code> 单精度（6 ~ 7 位有效数字），占用 4 字节，范围约 -3.403E38 ~ 3.403E38</li><li><code>double</code> 双精度（15 位有效数字），占用 8 字节，范围约 -1.798E308 ~ 1.798E308</li></ul><p><em>浮点数在机器中存放形式为：浮点数 &#x3D; 符号位 + 指数位 + 尾数位</em></p><p><strong><em>因此，尾数部分可能丢失，造成精度损失。换言之，小数都是近似值</em></strong></p><h3 id="使用细节"><a href="#使用细节" class="headerlink" title="使用细节"></a>使用细节</h3><ol><li><p>与整数类型相似，有固定的范围和字符长度，不受具体 OS（操作系统）影响。</p></li><li><p>Java 默认浮点常量为 <code>double</code> ，要声明 <code>float</code> 型常量必须后加 ”f“ 或 ”F“</p></li><li><p>浮点型常量有两种表示形式</p><blockquote><p>十进制数形式：<code>5.13</code>、<code>315.4F</code>、<code>.414</code></p><p>科学计数法：<code>5.12e2</code> 即[5.12 × 10^2]、<code>5.12E-2</code> 即[5.12 &#x2F; 10^2]</p></blockquote></li><li><p>通常情况下，应该使用 <code>double</code> 类型，因为其更为精确，精度是<code>float</code>类型的两倍。</p></li><li><p>浮点数使用陷阱：当我们对运算结果是小数的进行相对判断时，要小心。（因为**<em>小数都是近似值</em>**）</p><p>正确方法是：<strong>以两个数差值的绝对值，在某个精度范围内判断</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (Math.abs(num1 - num2) &lt; <span class="number">0.00001</span>) &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;插值范围内认为相等&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>特殊的浮点类型常量</p><ul><li><p>正无穷大：<code>Float.POSITIVE_INFINITY</code>、<code>Double.POSITIVE_INFINITY</code></p><p>（浮点数运算中）一个正数除以 0，会得到该值</p></li><li><p>负无穷大：<code>Float.NEGATIVE_INFINITY</code>、<code>Double.NEGATIVE_INFINITY</code></p><p>（浮点数运算中）一个负数除以 0，会得到该值</p></li><li><p>0 &#x2F; 0：<code>Float.NaN</code>、<code>Double.NaN</code></p><p>（浮点数运算中）0 除以 0，会得到该值</p></li><li><p>最大、最小值：<code>Float.MAX_VALUE</code>、<code>Double.MIN_VALUE</code></p></li></ul></li><li><p>不能用运算符来比较特殊值，而要用特别的方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">double</span> <span class="variable">num</span> <span class="operator">=</span> <span class="number">0.0</span> / <span class="number">0</span>;</span><br><span class="line">System.out.println(num == Double.NaN);<span class="comment">// &lt;——— 始终为 false。不能如此比较</span></span><br><span class="line">System.out.println(Double.isNaN(num));<span class="comment">// &lt;——— 判断是否是 NaN</span></span><br><span class="line">num = <span class="number">1.0</span> / <span class="number">0</span>;</span><br><span class="line">System.out.println(Double.isInfinite(num));<span class="comment">// &lt;——— 是否是无穷大</span></span><br></pre></td></tr></table></figure></li><li><p>由于不同处理器寄存浮点数的策略可能不同，浮点数运算的结果也可能不同。</p><p><strong><em>—— 见 [[12 常用类]]</em></strong></p></li></ol><h2 id="字符类型"><a href="#字符类型" class="headerlink" title="字符类型"></a>字符类型</h2><blockquote><p>可以表示单个字符。（可以存放一个数字，因为其字符是数字编号的。输出时会输出数字对应的字符。”编码的概念“）</p><p><code>char c1 = &#39;a&#39;;</code> <code>char c2 = &#39;\t&#39;;</code> <code>char c3 = &#39;字&#39;;</code> <code>char c4 = 99;</code></p></blockquote><h3 id="使用细节-1"><a href="#使用细节-1" class="headerlink" title="使用细节"></a>使用细节</h3><ol><li><p>字符常量用单引号括起 <code>&#39;字&#39;</code></p></li><li><p><code>char</code> 的本质是一个整数，输出时，输出的是 unicode 码对应的字符。</p><p>要输出那个整数，用 <code>(int)</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">char</span> <span class="variable">c1</span> <span class="operator">=</span> <span class="string">&#x27;a&#x27;</span>;</span><br><span class="line">System.out.println((<span class="type">int</span>)c1);</span><br></pre></td></tr></table></figure></li><li><p><code>char</code> 是可以进行运算的，其相当于一个整数。<strong>注意与 2.2 的区别</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 注：(int)&#x27;a&#x27; = 97</span></span><br><span class="line"><span class="type">char</span> <span class="variable">c1</span> <span class="operator">=</span> <span class="string">&#x27;a&#x27;</span> + <span class="number">1</span>;<span class="comment">// 相当于 char c1 = &#x27;b&#x27;</span></span><br><span class="line">System.out.println(<span class="string">&#x27;a&#x27;</span> + <span class="number">1</span>);<span class="comment">// 这个代码输出 98</span></span><br><span class="line">System.out.println(<span class="string">&quot;a&quot;</span> + <span class="number">1</span>);<span class="comment">// 这个代码输出 a1</span></span><br></pre></td></tr></table></figure></li><li><p>字符允许使用转义符（_见 [[1 Java 概述]]_）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">char</span> <span class="variable">c</span> <span class="operator">=</span> <span class="string">&#x27;\u0041&#x27;</span>;</span><br></pre></td></tr></table></figure><p><strong>转义序列 出现在引号外。所有这些转义序列会在解析代码前得到处理</strong></p><ul><li><p>以下字符串是空串：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">s</span> <span class="operator">=</span> <span class="string">&quot;\u0022+\u0022&quot;</span>;</span><br></pre></td></tr></table></figure><p>因为 022 表示引号。该代码等同于以下代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">s</span> <span class="operator">=</span> <span class="string">&quot;&quot;</span> + <span class="string">&quot;&quot;</span>;</span><br></pre></td></tr></table></figure></li><li><p>以下注释会报错：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// \u000A is a newline</span></span><br></pre></td></tr></table></figure><p>因为 00A 是换行符。在解析前会得到处理。在程序看来，上述注释等于以下写法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// </span></span><br><span class="line">is a newline</span><br></pre></td></tr></table></figure></li><li><p>以下注释也会报错：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// look inside c:\users</span></span><br></pre></td></tr></table></figure><p>因为程序认为，不是一个合法的转义字符</p></li><li><p>在某些场合下这种写法似乎也能实现：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span>\u005B\u005D a;<span class="comment">// int[] a; 一个数组</span></span><br></pre></td></tr></table></figure></li></ul></li></ol><h3 id="字符本质与编码表"><a href="#字符本质与编码表" class="headerlink" title="字符本质与编码表"></a>字符本质与编码表</h3><ul><li><p>字符类型的本质，是把字符对应的码值编程二进制，存储。显示时将二进制代码转化为码值，找到对应的字符。</p></li><li><p>字符与码值的对应关系是字符编码表规定的。</p><blockquote><p>ASCII 编码表，占用 1 byte，共有 128 个字符。</p><p>Unicode 编码表，占用 2 byte，字母汉字都占用 2 byte，这样可能浪费空间。0 - 127 的字符与 ASCII 相同，所以兼容 ASCII。</p><p>UTF-8 编码表，根据不同符号大小可变（1 - 6 byte），字母占用 1 byte，汉字占用 3 byte。是 Unicode 的改进，是互联网上使用最广的 Unicode 实现方式。</p><p>GBK 编码表，可以表示汉字，字母占用 1 byte，汉字占用 2 byte。</p><p>GB2312 编码表，可以表示汉字（GB2312 &lt; GBK）</p><p>BIG5 编码表，可以存放繁体中文（香港，台湾）</p></blockquote></li><li><p>UTF-16 编码采用不同长度的编码表示所有 Unicode 码点。包含从 U+0000 到 U+FFFF 的经典 Unicode 代码（16位，1 个代码单元），以及 U+10000 到 U+10FFFF 的辅助字符（32位，2 个代码单元）</p></li><li><p>在 Java 中，char 类型描述的是 UTF-16 编码中的 1 个代码单元。</p><p>字符串中的一个辅助字符（如 🎶）可能占用 2 个代码单元。这个场合，使用 char 可能会导致错误</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> <span class="string">&quot;🎶Melody🎶&quot;</span>;</span><br><span class="line"><span class="type">char</span> <span class="variable">c</span> <span class="operator">=</span> str.charAt(<span class="number">1</span>);<span class="comment">// &lt;———— 这个场合，c 是 🎶 符号的第二个代码单元而非 &#x27;M&#x27;</span></span><br></pre></td></tr></table></figure><p><strong>因此，一般不建议在程序中使用 char 类型</strong></p></li></ul><h2 id="布尔类型"><a href="#布尔类型" class="headerlink" title="布尔类型"></a>布尔类型</h2><blockquote><p><code>boolean</code> 只允许取值 <code>ture</code> 或 <code>false</code> ，没有 <code>null</code>。适用于逻辑运算，通常用于程序流程控制</p><p><code>if</code> <code>while</code> <code>do-while</code> <code>for</code></p></blockquote><p><strong>使用细节：</strong></p><ol><li><p>不可以用 0 或 非0 的整数替代 <code>false</code> 或 <code>ture</code> 。这点和 C语言 不同。</p></li><li><p>不能让布尔类型转换为其他类型。如需转换，请使用如下方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">boolean</span> <span class="variable">b</span> <span class="operator">=</span> <span class="literal">true</span>;</span><br><span class="line"><span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> b ? <span class="number">0</span> : <span class="number">1</span>;</span><br></pre></td></tr></table></figure><p><strong>_——见（[[3 运算符]]）</strong></p></li></ol><h2 id="基本数据类型转换"><a href="#基本数据类型转换" class="headerlink" title="基本数据类型转换"></a>基本数据类型转换</h2><h3 id="自动类型转换"><a href="#自动类型转换" class="headerlink" title="自动类型转换"></a>自动类型转换</h3><blockquote><p>自动类型转换：Java 在进行赋值或运算时，精度（容量）小的类型自动转换为精度（容量）大的类型。</p><p><code>char</code> &gt; <code>int</code> &gt; <code>long</code> &gt; <code>float</code> &gt; <code>double</code></p><p><code>byte</code> &gt; <code>short</code> &gt; <code>int</code> &gt; <code>long</code> &gt; <code>float</code> &gt; <code>double</code></p><p>例子：<code>int a = &#39;c&#39;</code> 或者 <code>double b = 80</code></p></blockquote><h4 id="使用细节-2"><a href="#使用细节-2" class="headerlink" title="使用细节"></a>使用细节</h4><ol><li><p>有多种类型数据混合运算时，系统会将所有数据转换成容量最大的那种，再进行运算。</p></li><li><p>如若把大精度（容量）数据赋值给小精度（容量）类型，就会报错（小数由于精度原因，大赋小会丢失精度，必不可用。但整数大赋小时：1.赋予具体数值时，判断范围。2.变量赋值时，判断类型。反之进行自动类型转换。</p></li><li><p><code>byte</code> <code>short</code> <code>char</code> 三者不会相互自动转换，但可以计算。计算时首先转化为 <code>int</code>。</p><p><code>byte a = 1;</code></p><p><code>byte b = 1;</code></p><p><code>a + b</code> 结果是 <code>int</code> 类型</p></li><li><p><code>boolean</code> 类型不参与自动转换</p></li><li><p>自动提升原则：表达式结果的类型自动提升为操作数中最大的类型。</p></li></ol><h3 id="强制类型转换"><a href="#强制类型转换" class="headerlink" title="强制类型转换"></a>强制类型转换</h3><blockquote><p>强制类型转换：自动类型转换的逆过程，将容量大的数据类型转换为容量小的数据类型。使用时加上强制转换符 <code>( )</code> ，但<strong>可能造成精度降低或溢出</strong>，要格外注意。</p></blockquote><h4 id="使用细节-3"><a href="#使用细节-3" class="headerlink" title="使用细节"></a>使用细节</h4><ol><li><p>当进行数据从大到小转换时，用强制转换。</p></li><li><p>强制转换只能对最近的操作数有效，往往会使用 <code>( )</code> 提升优先级。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="variable">a</span> <span class="operator">=</span> (<span class="type">int</span>)(<span class="number">3</span> * <span class="number">2.5</span> + <span class="number">1.1</span> * <span class="number">6</span>);</span><br></pre></td></tr></table></figure></li><li><p><code>char</code> 可以保留 <code>int</code> 的常量值，但不能保存其变量值。此时需要强制类型转换。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="variable">a</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line"><span class="type">char</span> <span class="variable">b</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line"><span class="type">char</span> <span class="variable">c</span> <span class="operator">=</span> (<span class="type">char</span>)a;</span><br></pre></td></tr></table></figure></li><li><p><code>byte</code> <code>short</code> <code>char</code> 在进行运算时，当作 <code>int</code> 处理。</p></li><li><p>对浮点数进行舍入计算</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">double</span> <span class="variable">x</span> <span class="operator">=</span> <span class="number">9.997</span>;</span><br><span class="line"><span class="type">int</span> <span class="variable">nx</span> <span class="operator">=</span> (<span class="type">int</span>)Math.round(x);</span><br></pre></td></tr></table></figure></li></ol><h3 id="基本数据类型和-String-的转换"><a href="#基本数据类型和-String-的转换" class="headerlink" title="基本数据类型和 String 的转换"></a>基本数据类型和 <code>String</code> 的转换</h3><ul><li><p>基本类型转 <code>String</code>：基本数据类型加上 <code>&quot; &quot;</code>。即利用了 2.2.2 中的方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="variable">n1</span> <span class="operator">=</span> <span class="number">100</span>;</span><br><span class="line"><span class="type">String</span> <span class="variable">s</span> <span class="operator">=</span> n1 + <span class="string">&quot;&quot;</span>;</span><br><span class="line">System.out.println(n1 + <span class="string">&quot;&quot;</span> + n1 + <span class="string">&quot;&quot;</span> + n1 + <span class="string">&quot;&quot;</span>);</span><br></pre></td></tr></table></figure></li><li><p><code>String</code> 转基本数据类型：通过基本数据类型的包装类调用 <code>parseXX</code> 方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">s</span> <span class="operator">=</span> <span class="string">&quot;100&quot;</span>;</span><br><span class="line"><span class="type">int</span> <span class="variable">n1</span> <span class="operator">=</span> Interger <span class="title function_">parseInt</span><span class="params">(s)</span>;</span><br></pre></td></tr></table></figure><p>特别的，把 <code>String</code> 转换为 <code>char</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">char</span> <span class="variable">c</span> <span class="operator">=</span> s.charAt(<span class="number">0</span>);<span class="comment">// 得到 s 字符串中的第一个字符。</span></span><br></pre></td></tr></table></figure></li></ul><h4 id="使用细节-4"><a href="#使用细节-4" class="headerlink" title="使用细节"></a>使用细节</h4><ol><li>将 <code>String</code> 转成基本数据类型时，要保证其能转换为有效数据。即不能把 <code>&quot;Hello&quot;</code> 转换成 <code>int</code>。</li><li>如果格式不正确，会抛出[[11 异常]]，程序会中止。</li></ol>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 教程 </tag>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java 概述</title>
      <link href="/2022/11/26/learn/Java/Java%20%E6%A6%82%E8%BF%B0/"/>
      <url>/2022/11/26/learn/Java/Java%20%E6%A6%82%E8%BF%B0/</url>
      
        <content type="html"><![CDATA[<blockquote><p>程序：一系列有序指令的集合</p></blockquote><h2 id="Java-历史"><a href="#Java-历史" class="headerlink" title="Java 历史"></a>Java 历史</h2><ul><li><p>目前 Java 版权属于甲骨文公司。</p></li><li><p>长期支持的版本只有 Java8 与 Java11。这两个版本也是最多使用的版本。</p></li><li><p>Java SE：标准版</p><p>Java EE：企业版（重要）</p><p>Java ME：小型版（少）</p></li></ul><h2 id="Java-重要特点"><a href="#Java-重要特点" class="headerlink" title="Java 重要特点"></a>Java 重要特点</h2><ol><li><p><strong>面向对象（oop）</strong></p><p>简单来说，面向对象是一种程序设计技术。其重点放在数据（对象）和对象的接口上。</p></li><li><p><strong>健壮性</strong></p><p>其强类型机制、异常处理、垃圾自动收集是健壮性的保证。</p><p>Java 强调早期问题检测、后期动态检测，及消除易出错的情况。其编译器能检测很多其他语言仅在运行时才会发现的问题。</p></li><li><p><strong>可移植性</strong></p><p>一个编译好的 <code>.class</code> 文件可以在多个不同系统下直接运行。</p><p>Java 中没有 “依赖具体实现” 的地方。其基本数据类型大小固定，有关运算的行为等都有明确说明。其绝大多数库都能很好地支持平台独立性，而不用担心操作系统。</p></li><li><p><strong>解释型</strong></p><p>解释型语言编译后需要解释器才能运行。相对的，编译型语言可以被直接执行。</p><p>Java 解释器能在任何移植了解释器的机器上直接执行 Java 字节码。</p></li><li><p><strong>简单性</strong></p><p> Java语法是C++语法的一个“纯净”版本。</p><p> 占用内存小。</p></li><li><p><strong>分布式</strong></p><p> Java有一个丰富的例程库，用于处理像HTTP和FTP之类的TCP&#x2F;IP协议。</p><p> Java应用程序能够通过URL打开和访问网络上的对象。</p></li><li><p><strong>安全性</strong></p></li><li><p><strong>体系结构中立</strong></p></li><li><p><strong>高性能</strong></p></li><li><p><strong>多线程</strong></p></li><li><p><strong>动态性</strong><br>库中可以自由地添加新方法和实例变量，而对客户端没有任何影响。</p></li></ol><h2 id="Java-的开发工具"><a href="#Java-的开发工具" class="headerlink" title="Java 的开发工具"></a>Java 的开发工具</h2><ul><li><strong>javac</strong>：Java 编译器。将 Java 程序编译成字节码</li><li><strong>java</strong>：Java 解释器。执行已经转换为字节码的文件</li><li><strong>jdb</strong>：Java 调试器。调试 Java 程序</li><li><strong>javap</strong>：反编译。将类文件还原回方法和变量</li><li><strong>javadoc</strong>：文档生成器。创建 HTML 文件</li></ul><h2 id="Java-运行基础"><a href="#Java-运行基础" class="headerlink" title="Java 运行基础"></a>Java 运行基础</h2><blockquote><p>JVM：Java 虚拟机</p></blockquote><ul><li>JVM 是–跨平台性的基础。被包含在 JDK 中。</li><li>不同平台有各自对应的不同 JVM</li><li>JVM 屏蔽了底层平台的区别。能做到 ”一次编译，到处运行”</li></ul><blockquote><p>JDK 全称：Java Development Kit（Java 开发工具包）</p></blockquote><ul><li>JDK &#x3D; JRE + Java 的开发工具（Java，Javac，Javadoc 等等）</li><li>给开发人员使用的，包含 JRE</li></ul><blockquote><p>JRE：Java Runtime Enviroment（Java 运行环境）</p></blockquote><ul><li>JRE &#x3D; JVM + Java SE 标准类库（Java 的核心类库）</li><li>运行一个 Java 程序的基本条件</li></ul><h2 id="Java-执行流程分析"><a href="#Java-执行流程分析" class="headerlink" title="Java 执行流程分析"></a>Java 执行流程分析</h2><blockquote><p><code>.Java</code> 文件（源文件） — javac（编译）— <code>.class</code> 文件（字节码文件） — java（运行）— 结果</p></blockquote><h3 id="编译"><a href="#编译" class="headerlink" title="编译"></a>编译</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">javac [选项] 源文件名.java//[] 中是可选项</span><br></pre></td></tr></table></figure><ul><li>通过编译器将 Java 源文件编译成 JVM 可识别的字节码文件。字节码文件是二进制格式的，其格式是统一的。在源文件目录下使用 Javac 编译工具对 Java 文件进行编译。</li><li>如果没有错误将没有提示，当前目录会对应其中每一个类生成对应名称的 <code>.class</code> 文件，即字节码文件，也是可执行的 Java 程序。</li></ul><h3 id="运行"><a href="#运行" class="headerlink" title="运行"></a>运行</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java [选项] 程序名 [参数列表]//[] 中是可选项</span><br></pre></td></tr></table></figure><ul><li>有了可执行的 Java 程序（字节码文件）</li><li>通过运行工具<code>Java.exe</code> 对字节码文件进行执行，本质是将 <code>.class</code> 文件装载到 JVM 运行。</li></ul><h6 id="注意，修改后的-Java-源文件需要重新编译"><a href="#注意，修改后的-Java-源文件需要重新编译" class="headerlink" title="注意，修改后的 .Java 源文件需要重新编译"></a><em>注意，修改后的 .Java 源文件需要重新编译</em></h6><h2 id="Java-开发注意事项和细节说明"><a href="#Java-开发注意事项和细节说明" class="headerlink" title="Java 开发注意事项和细节说明"></a>Java 开发注意事项和细节说明</h2><ol><li><p>源文件以 <code>.java</code> 为扩展名，源文件的基本组成部分是类（class）</p></li><li><p>Java 应用程序的执行入口是 <code>main()</code> 方法。其有<strong>固定的书写格式：</strong></p><p><code>public static void main(string[]args)&#123;…&#125;</code></p></li><li><p>Java 语言<strong>严格区分大小写</strong>。</p></li><li><p>Java 方法由一条条语句构成，<strong>每个语句都以 <code>;</code> 结束</strong>。</p></li><li><p><strong>大括号 <code>&#123;</code> <code>&#125;</code> 是成对出现的</strong>，缺一不可。习惯先写 <code>&#123;&#125;</code> 再写代码</p></li><li><p>一个源文件中<strong>最多只有一个 public 类</strong>，其余类不限。</p></li><li><p><strong>如果文件中包含 public 类，则文件名必须按该类命名。</strong></p></li><li><p>也可以把 main 方法写在非 public 类中，然后运行指定非 public 类，这样入口方法是非 public 类的主方法。</p></li><li><p><strong>在控制台按 tab 可以实现代码补齐。按方向键 ↑ 或 ↓ 可以调用历史代码。</strong></p></li></ol><h2 id="代码规范"><a href="#代码规范" class="headerlink" title="代码规范"></a>代码规范</h2><ol><li><p>类、方法的注释要以 Javadoc 的方式来写</p></li><li><p>非 Javadoc 的注释，往往是给维护者看的，着重告诉读者为什么这样写，如何修改，注意什么问题等。</p></li><li><p>不要用 <code>a</code> <code>b</code>，这种名称命名变量，尽量写得清楚 <code>int age = 10;</code></p><p>另外，<strong>Java 源代码使用的是 Unicode 码，因此汉语也能作为标识符</strong>。但<strong>不推荐</strong>使用汉语做标识符。</p></li><li><p>使用 tab 键操作，使代码右移。使用 shift+tab 键，使代码左移。</p></li><li><p>运算符两边各加入空格。注意排版规范。</p></li><li><p>源文件使用 UTF-8 编码。</p></li><li><p>代码行宽度不要超过 80 个字符。超过时通过换行保持简洁。</p></li><li><p>代码编写<strong>次行风格</strong>及<strong>行尾风格</strong></p><blockquote><p>次行风格：换行输入<code>&#123;</code> <code>&#125;</code>，使其总在行头</p><p>行尾风格：在一行的末尾输入 <code>&#123;</code>，换行输入 <code>&#125;</code></p></blockquote></li><li><p>一段代码完成一个小功能，尽量不要混合。这样更加灵活。</p></li></ol><h2 id="Java-转义字符"><a href="#Java-转义字符" class="headerlink" title="Java 转义字符"></a>Java 转义字符</h2><ol><li><p><code>\t</code>：一个制表位，实现对齐功能</p></li><li><p><code>\n</code>：换行符</p></li><li><p><code>\\</code>：一个 <code>\</code></p></li><li><p><code>\&quot;</code>：一个 <code>&quot;</code></p></li><li><p><code>\&#39;</code>：一个 <code>&#39;</code></p></li><li><p><code>\r</code>：一个回车（不是换行）</p></li><li><p><code>\.</code>：一个小圆点 <code>.</code></p></li><li><p><code>\b</code>：退格键</p></li><li><p><code>\u????</code>：一个具体的 Unicode 字符。其中 ???? 是 4 位 16 进制数</p><p><code>\???</code>：一个具体的 Unicode 字符。其中 ??? 是 3 位 8 进制数</p></li><li><p><code>\f</code>：换页</p></li><li><p><code>\0</code>：空字符</p></li></ol><h2 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h2><blockquote><p>注释：用于注解说明程序的文字。其提高了代码的可读性，是一个程序员必须要具有的良好编程习惯。将自己的思想通过注释先整理出来，再用代码去体现。</p><p>被注释的文字不会被 JVM 解释执行。</p></blockquote><h3 id="注释类型"><a href="#注释类型" class="headerlink" title="注释类型"></a>注释类型</h3><ul><li><p><strong>单行注释：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//这是一条单行注释</span></span><br></pre></td></tr></table></figure><p>选中文字按 <code>ctrl</code> + <code>/</code> 将选中文字变为单行注释</p></li><li><p><strong>多行注释：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*这</span></span><br><span class="line"><span class="comment">是一段</span></span><br><span class="line"><span class="comment">多行注释</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><p>多行注释中不允许多行注释嵌套。</p></li><li><p><strong>文档注释：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">*<span class="doctag">@auther</span> Melody</span></span><br><span class="line"><span class="comment">*<span class="doctag">@version</span> 3.2.0</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><p>以下写法也同样合法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">可以每行开头不加星号</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="文档注释"><a href="#文档注释" class="headerlink" title="文档注释"></a>文档注释</h3><blockquote><p>文档注释的注释内容可被 JDK 中的 Javadoc 工具解析，生成一套以 HTML 形式体现的说明文档。</p><p>抽取注释：<code>javadoc -d 生成目录 -author -.. 文档名.java</code></p></blockquote><p>文档注释包含 <strong>标记</strong> 和紧随其后的 <strong>自由格式文本</strong>：</p><ul><li><p><strong>标记：</strong></p><p>以 <code>@</code> 开始，如 <code>@since</code></p><p>下面列出了一些 <strong>通用注释</strong>：</p><ul><li><p><code>@since 始于</code>：创建一个 <strong>始于</strong> 条目。其后文本可以是引入该特性的版本的任何描述</p></li><li><p><code>@author 作者</code>：产生一个 <strong>作者</strong> 条目。可以使用多个 <code>@author</code> 标记</p></li><li><p><code>@version 版本</code>：产生一个 <strong>版本</strong> 条目。这里的文本可以是对当前版本的任意描述</p></li><li><p><code>@link 超链接</code>：产生一个 <strong>超链接</strong>，链接到 javadoc 相关部分或外部文档</p><p><code>@see 引用</code>：在 <strong>see also</strong> 部分增加一个超链接。可以添加多个 <code>@see</code> 标记，但必须放在一起。</p><p>这里的 引用 有以下选择：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">*<span class="doctag">@see</span> com.test.Example#act()</span></span><br><span class="line"><span class="comment">*<span class="doctag">@see</span> &lt;a herf=&quot;../../../../../../&quot;&gt;Melody&#x27;s Box&lt;/a&gt;</span></span><br><span class="line"><span class="comment">*<span class="doctag">@see</span> &quot;一段文本&quot;</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><blockquote><ol><li>只提供类、方法或变量的名字。那个场合，使用 <strong>#</strong> 来分隔类名和方法名</li><li><code>@see</code> 后有一个 <strong>&lt;</strong> 字符的场合，需要指定超链接。可以指向任何 URL</li><li><code>@see</code> 后有一个 <strong>“</strong> 字符的场合，文本会显示在 see alse 部分</li></ol></blockquote></li></ul></li><li><p><strong>自由格式文本：</strong></p><p>第一句应该是一个概要性的句子。javadoc 会自动抽取这些语句生成概要页</p><p>自由格式文本中，可以使用 HTML 修饰符</p></li></ul><h4 id="注释的插入"><a href="#注释的插入" class="headerlink" title="注释的插入"></a>注释的插入</h4><p>javadoc 工具抽取文档注释时，会从以下位置抽取：</p><ul><li><p>模块</p></li><li><p>包（包注释）</p><p><strong>要想产生包注释，必须在每个包目录中添加一个单独的文件</strong></p><p>有 2 种方法：</p><ul><li>提供一个名为 package-info.java 的文件。其中 <strong>只能</strong> 包含文档注释，以及后面的一个 package 语句。不能包含更多的代码或注释。</li><li>提供一个名为 package.html 的 HTML 文件。此时会抽取 <code>&lt;body&gt;...&lt;/body&gt;</code> 间的所有文本</li></ul></li><li><p>公共类和接口（类注释）</p><p>类注释必须放在 import 语句后，类定义之前</p></li><li><p>公共的和受保护的字段</p><p>只需要对公共字段（通常是静态常量）建立文档</p></li><li><p>公共的和受保护的构造器和方法</p><p>方法注释必须放在所描述的方法之前。除了通用标记外，还能使用如下标记：</p><ul><li><p><code>@param 变量描述</code>：该标记能给当前方法的 <strong>参数</strong> 部分添加一个条目。该描述可以占据多行。</p><p>一个方法的所有 <code>@param</code> 标记必须放在一起</p></li><li><p><code>@return 返回值描述</code>：该标记能给当前方法的 <strong>返回值</strong> 部分添加一个条目。该描述可以占据多行。</p></li><li><p><code>@throws 异常描述</code>：该标记能给当前方法的可能抛出的 <strong>异常</strong> 添加一个条目。</p></li></ul></li></ul><h2 id="JShell"><a href="#JShell" class="headerlink" title="JShell"></a>JShell</h2><blockquote><p>Java 9 中引入了一种使用 Java 的方法，即 JShell。</p><p>JShell 程序提供了一个 “读取 - 计算 - 打印循环”。键入一个 Java 表达式，JShell 会评估你的输入，打印结果，并等待下一个输入。</p><p>在命令提示符中输入 <code>jshell</code> 以启动 JShell</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">C:\Users\sinarcxinx&gt;jshell</span><br></pre></td></tr></table></figure><p>在 cmd 中输入 jshell 以启动 JShell</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">|  欢迎使用 JShell -- 版本 11.0.12</span><br><span class="line">|  要大致了解该版本, 请键入: /help intro</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">jshell&gt;</span></span><br></pre></td></tr></table></figure><p>JShell 会显示一个问候语，之后出现提示符</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">jshell&gt; </span><span class="language-bash">int n1 = 10;</span></span><br><span class="line">n1 ==&gt; 10</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">jshell&gt; </span><span class="language-bash">n1++;</span></span><br><span class="line"><span class="meta prompt_">$</span><span class="language-bash">2 ==&gt; 10</span></span><br></pre></td></tr></table></figure><p>输入一条语句，JShell 会自动打印每条输入语句的值</p><p>其中的 $2 表示该值可以用于将来的计算。上面的 n1 是自己定义的标识符</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">jshell&gt; </span><span class="language-bash">Math.</span></span><br><span class="line">E                 IEEEremainder(    PI                abs(              acos(             addExact(</span><br><span class="line">asin(             atan(             atan2(            cbrt(             ceil(             class</span><br><span class="line">copySign(         cos(              cosh(             decrementExact(   exp(              expm1(</span><br><span class="line">floor(            floorDiv(         floorMod(         fma(              getExponent(      hypot(</span><br><span class="line">incrementExact(   log(              log10(            log1p(            max(              min(</span><br><span class="line">multiplyExact(    multiplyFull(     multiplyHigh(     negateExact(      nextAfter(        nextDown(</span><br><span class="line">nextUp(           pow(              random()          rint(             round(            scalb(</span><br><span class="line">signum(           sin(              sinh(             sqrt(             subtractExact(    tan(</span><br><span class="line">tanh(             toDegrees(        toIntExact(       toRadians(        ulp(</span><br></pre></td></tr></table></figure><p>输入不完整的语句后，按 tab 键实现方法补全。上面的场合，提示了所有方法的列表</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">jshell&gt; </span><span class="language-bash">Math.pow(</span></span><br></pre></td></tr></table></figure><p>自动补全后的代码。可以手动填入剩余部分。</p><p>可以按 ↑ 键自动填充运行过的代码，以实现重复运行</p><h2 id="附录"><a href="#附录" class="headerlink" title="附录"></a>附录</h2><h3 id="DOS"><a href="#DOS" class="headerlink" title="DOS"></a>DOS</h3><blockquote><p>DOS：Disk Operating System（磁盘操作系统）</p></blockquote><h4 id="DOS-的基本原理"><a href="#DOS-的基本原理" class="headerlink" title="DOS 的基本原理"></a>DOS 的基本原理</h4><blockquote><p>在 cmd（控制台）输入指令 — DOS系统 接受指令 — 解析指令 — 执行指令</p></blockquote><ul><li><p>相对路径和绝对路径（举例从 JDK8访问到 JDK8）</p><blockquote><p>相对路径：从当前目录开始定位，形成的路径 <code>..\jre\bin\LICENSE</code></p><p>返回上一级：<code>..\</code></p><p>绝对路径：从顶级目录开始定位，形成的路径 <code>d:\Program\JDK8\jre\bin</code></p></blockquote></li></ul><h4 id="常用的-DOS-命令"><a href="#常用的-DOS-命令" class="headerlink" title="常用的 DOS 命令"></a>常用的 DOS 命令</h4><blockquote><p>查看帮助：<code>help</code> 或 <code>help cd</code> 等</p><p>查看目录内容：<code>dir</code> 查看当前目录</p><p> 或 <code>dir d:\Program\JDK8\bin</code> 查看指定目录</p><p>切换到其他盘：<code>cd /D d:</code> 从 C盘 切换至 D盘</p><p>切换到当前盘的其他目录：<code>cd d:\Program\JDK8\jre\bin</code></p><p>返回上级目录：<code>cd ..</code></p><p>切换至根目录：<code>cd \</code></p><p>查看子集目录：<code>tree</code> 当前目录</p><p> 或 <code>tree d:/Program</code> 指定目录</p><p>清屏：<code>cls</code></p><p>退出：<code>exit</code></p><p>创建&#x2F;删除目录：<code>md 目录名</code> <code>rd 目录名</code></p><p>拷贝&#x2F;删除文件：<code>copy 文件名 目录</code> <code>del 文件名</code></p><p>移动文件：<code>move 文件名 目录</code></p><p>…</p><p><em>[[Dos]]</em></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 教程 </tag>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MarkDown语法</title>
      <link href="/2022/11/26/learn/MarkDown/"/>
      <url>/2022/11/26/learn/MarkDown/</url>
      
        <content type="html"><![CDATA[<h1 id="MarkDown"><a href="#MarkDown" class="headerlink" title="MarkDown"></a>MarkDown</h1><h2 id="Markdown简介"><a href="#Markdown简介" class="headerlink" title="Markdown简介"></a>Markdown简介</h2><p>Markdown 是一种<strong>轻量级标记语言</strong>，它允许人们使用易读易写的纯文本格式编写文档。</p><p>Markdown 语言在 2004 由约翰·格鲁伯（英语：John Gruber）创建。</p><p>Markdown 编写的文档可以导出 HTML 、Word、图像、PDF、Epub 等多种格式的文档。</p><p>Markdown 编写的文档后缀为 <strong>.md</strong>, <strong>.markdown</strong>。</p><h2 id="Markdown-应用"><a href="#Markdown-应用" class="headerlink" title="Markdown 应用"></a>Markdown 应用</h2><p>Markdown 能被使用来撰写电子书，如：Gitbook。</p><p>当前许多网站都广泛使用 Markdown 来撰写帮助文档或是用于论坛上发表消息。例如：GitHub、简书、reddit、Diaspora、Stack Exchange、OpenStreetMap 、SourceForge等。</p><h2 id="Markdown-标题"><a href="#Markdown-标题" class="headerlink" title="Markdown 标题"></a>Markdown 标题</h2><p>1.使用 &#x3D; 和 - 标记一级和二级标题</p><p><strong>input:</strong></p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">一级标题</span></span><br><span class="line"><span class="section">=================</span></span><br><span class="line"></span><br><span class="line"><span class="section">二级标题</span></span><br><span class="line"><span class="section">-----------------</span></span><br></pre></td></tr></table></figure><p>2.使用 # 号标记</p><p><strong>input:</strong></p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="section"># 一级标题</span></span><br><span class="line"><span class="section">## 二级标题</span></span><br><span class="line"><span class="section">### 三级标题</span></span><br><span class="line"><span class="section">#### 四级标题</span></span><br><span class="line"><span class="section">##### 五级标题</span></span><br><span class="line"><span class="section">###### 六级标题</span></span><br></pre></td></tr></table></figure><p><em>使用 <strong>#</strong> 号可表示 1-6 级标题，一级标题对应一个 <strong>#</strong> 号，二级标题对应两个 <strong>#</strong> 号，以此类推。</em></p><h2 id="Markdown-段落"><a href="#Markdown-段落" class="headerlink" title="Markdown 段落"></a>Markdown 段落</h2><p>Markdown 段落没有特殊的格式，直接编写文字就好，段落的换行是使用两个以上空格加上回车。</p><p><strong>input:</strong></p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">paragraph  /<span class="emphasis">*两个以上空格加上回车*</span>/</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>当然也可以在段落后面使用一个空行来表示重新开始一个段落。</p><p><strong>input:</strong></p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">paragraph1 </span><br><span class="line"><span class="code">/*一个空行*/</span></span><br><span class="line"><span class="code">paragraph2</span></span><br></pre></td></tr></table></figure><h3 id="字体"><a href="#字体" class="headerlink" title="字体"></a>字体</h3><p>Markdown 可以使用以下几种字体：</p><p><strong>input:</strong></p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="emphasis">*斜体*</span></span><br><span class="line"><span class="emphasis">_斜体_</span></span><br><span class="line"><span class="strong">**粗体**</span></span><br><span class="line"><span class="strong">__粗体__</span></span><br><span class="line"><span class="strong">**<span class="emphasis">*粗斜体*</span>**</span></span><br><span class="line"><span class="strong">__<span class="emphasis">_粗斜体_</span>__</span></span><br></pre></td></tr></table></figure><p><strong>output:</strong></p><p><em>斜体</em><br><em>斜体</em><br><strong>粗体</strong><br><strong>粗体</strong><br><em><strong>粗斜体</strong></em><br><em><strong>粗斜体</strong></em></p><h3 id="划线"><a href="#划线" class="headerlink" title="划线"></a>划线</h3><p>划线可以通过 <code>~</code>和HTML 的 <code>&lt;u&gt;</code> 标签来实现：</p><p><strong>input:</strong></p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">~~划掉~~</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">u</span>&gt;</span></span>带下划线<span class="language-xml"><span class="tag">&lt;/<span class="name">u</span>&gt;</span></span></span><br></pre></td></tr></table></figure><p><strong>output:</strong></p><p><del>划掉</del></p><p><u>带下划线</u></p><h3 id="脚注"><a href="#脚注" class="headerlink" title="脚注"></a>脚注</h3><p>Markdown 脚注的格式如下:</p><p><strong>input:</strong></p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">我想要一个注脚 [^zj]。</span><br><span class="line"></span><br><span class="line">[<span class="symbol">^zj</span>]: <span class="link">我来了！！！</span></span><br></pre></td></tr></table></figure><p><strong>output:</strong></p><p>我想要一个注脚 <a href="%E6%88%91%E6%9D%A5%E4%BA%86%EF%BC%81%EF%BC%81%EF%BC%81">^zj</a>。</p><h2 id="Markdown-列表"><a href="#Markdown-列表" class="headerlink" title="Markdown 列表"></a>Markdown 列表</h2><h3 id="有序列表"><a href="#有序列表" class="headerlink" title="有序列表"></a>有序列表</h3><p>有序列表使用数字并加上 . 号来表示，如：</p><p><strong>input:</strong></p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">1.</span> 第一项</span><br><span class="line"><span class="bullet">2.</span> 第二项</span><br><span class="line"><span class="bullet">3.</span> 第三项</span><br></pre></td></tr></table></figure><p><strong>output:</strong></p><ol><li>第一项</li><li>第二项</li><li>第三项</li></ol><h3 id="无序列表"><a href="#无序列表" class="headerlink" title="无序列表"></a>无序列表</h3><p>无序列表使用星号(*)、加号(+)或是减号(-)作为列表标记，这些标记后面要添加一个空格，然后再填写内容：</p><p><strong>input:</strong></p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">*</span> 第一项</span><br><span class="line"><span class="bullet">*</span> 第二项</span><br><span class="line"><span class="bullet">*</span> 第三项</span><br><span class="line"></span><br><span class="line"><span class="bullet">+</span> 第一项</span><br><span class="line"><span class="bullet">+</span> 第二项</span><br><span class="line"><span class="bullet">+</span> 第三项</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="bullet">-</span> 第一项</span><br><span class="line"><span class="bullet">-</span> 第二项</span><br><span class="line"><span class="bullet">-</span> 第三项</span><br></pre></td></tr></table></figure><p><strong>output:</strong></p><ul><li>第一项</li><li>第二项</li><li>第三项</li></ul><ul><li>第一项</li><li>第二项</li><li>第三项</li></ul><ul><li>第一项</li><li>第二项</li><li>第三项</li></ul><h3 id="列表嵌套"><a href="#列表嵌套" class="headerlink" title="列表嵌套"></a>列表嵌套</h3><p>列表嵌套只需在子列表中的选项前面添加两个或四个空格即可：</p><p><strong>input:</strong></p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">1.</span> 第一项：</span><br><span class="line"><span class="bullet">    -</span> 第一项嵌套的第一个元素</span><br><span class="line"><span class="bullet">    -</span> 第一项嵌套的第二个元素</span><br><span class="line"><span class="bullet">2.</span> 第二项：</span><br><span class="line"><span class="bullet">    -</span> 第二项嵌套的第一个元素</span><br><span class="line"><span class="bullet">    -</span> 第二项嵌套的第二个元素</span><br></pre></td></tr></table></figure><p><strong>output:</strong></p><ol><li>第一项：<ul><li>第一项嵌套的第一个元素</li><li>第一项嵌套的第二个元素</li></ul></li><li>第二项：<ul><li>第二项嵌套的第一个元素</li><li>第二项嵌套的第二个元素</li></ul></li></ol><h2 id="Markdown-区块"><a href="#Markdown-区块" class="headerlink" title="Markdown 区块"></a>Markdown 区块</h2><p>Markdown 区块引用是在段落开头使用 <code>&gt;</code> 符号 ，然后后面紧跟一个<code>空格</code>符号：</p><p><strong>input:</strong></p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="quote">&gt; 区块引用</span></span><br><span class="line"><span class="quote">&gt; 我是</span></span><br><span class="line"><span class="quote">&gt; 一个区块</span></span><br></pre></td></tr></table></figure><p><strong>output:</strong></p><blockquote><p>区块引用<br>我是<br>一个区块</p></blockquote><p>区块是可以嵌套的，一个 <code>&gt;</code> 符号是最外层，两个 <code>&gt;</code> 符号是第一层嵌套，以此类推</p><p><strong>input:</strong></p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="quote">&gt; 最外层</span></span><br><span class="line"><span class="quote">&gt; &gt; 第一层嵌套</span></span><br><span class="line"><span class="quote">&gt; &gt; &gt; 第二层嵌套</span></span><br></pre></td></tr></table></figure><p><strong>output:</strong></p><blockquote><p>最外层</p><blockquote><p>第一层嵌套</p><blockquote><p>第二层嵌套</p></blockquote></blockquote></blockquote><p>区块中使用列表</p><p><strong>input:</strong></p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="quote">&gt; 区块中使用列表</span></span><br><span class="line"><span class="quote">&gt; 1. 第一项</span></span><br><span class="line"><span class="quote">&gt; 2. 第二项</span></span><br><span class="line"><span class="quote">&gt; + 第一项</span></span><br><span class="line"><span class="quote">&gt; + 第二项</span></span><br><span class="line"><span class="quote">&gt; + 第三项</span></span><br></pre></td></tr></table></figure><p><strong>output:</strong></p><blockquote><p>区块中使用列表</p><ol><li>第一项</li><li>第二项</li></ol><ul><li>第一项</li><li>第二项</li><li>第三项</li></ul></blockquote><p>列表中使用区块</p><p>如果要在列表项目内放进区块，那么就需要在 <code>&gt;</code> 前添加四个空格的缩进。</p><p><strong>input:</strong></p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">*</span> 第一项</span><br><span class="line"><span class="code">    &gt; 一</span></span><br><span class="line"><span class="code">    &gt; 二</span></span><br><span class="line"><span class="code">* 第二项</span></span><br></pre></td></tr></table></figure><p><strong>output:</strong></p><ul><li>第一项<blockquote><p>一<br>二</p></blockquote></li><li>第二项</li></ul><h2 id="Markdown-代码"><a href="#Markdown-代码" class="headerlink" title="Markdown 代码"></a>Markdown 代码</h2><p>如果是段落上的一个函数或片段的代码可以用反引号把它包起来(&#96;)，例如：</p><p><strong>input:</strong></p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="code">`printf()`</span> 函数</span><br></pre></td></tr></table></figure><p><strong>output:</strong></p><p><code>printf()</code> 函数</p><p>代码区块</p><p>可以用 &#96;&#96;&#96; 包裹一段代码，并指定一种语言（也可以不指定）：</p><p><strong>input:</strong></p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="code">```c</span></span><br><span class="line"><span class="code">#include &lt;stdio.h&gt;</span></span><br><span class="line"><span class="code">int main() &#123;</span></span><br><span class="line"><span class="code">return 0;</span></span><br><span class="line"><span class="code">&#125;</span></span><br><span class="line"><span class="code">```</span></span><br></pre></td></tr></table></figure><p><strong>output:</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Markdown-链接"><a href="#Markdown-链接" class="headerlink" title="Markdown 链接"></a>Markdown 链接</h2><p>链接使用方法如下：</p><p><strong>input:</strong></p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[<span class="string">链接名称</span>](<span class="link">链接地址</span>)</span><br><span class="line"></span><br><span class="line">或者</span><br><span class="line"></span><br><span class="line">&lt;链接地址&gt;</span><br></pre></td></tr></table></figure><p><strong>output:</strong></p><p><a href="%E9%93%BE%E6%8E%A5%E5%9C%B0%E5%9D%80">链接名称</a></p><p>高级链接:可以通过变量来设置一个链接，变量赋值在文档末尾进行</p><p><strong>input:</strong></p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">这个链接用 1 作为网址变量 [<span class="string">Google</span>][<span class="symbol">1</span>]</span><br><span class="line"></span><br><span class="line">这个链接用 crazy 作为网址变量 [<span class="string">sinarcsinx</span>][<span class="symbol">sin</span>]</span><br><span class="line"></span><br><span class="line">然后在文档的结尾为变量赋值（网址）</span><br><span class="line"></span><br><span class="line">[<span class="symbol">1</span>]: <span class="link">http://www.google.com/</span></span><br><span class="line">[<span class="symbol">sin</span>]: <span class="link">http://sinarcsinx.fun/</span></span><br></pre></td></tr></table></figure><p><strong>output:</strong></p><p>这个链接用 1 作为网址变量 <a href="http://www.google.com/">Google</a></p><p>这个链接用 crazy 作为网址变量 <a href="http://sinarcsinx.fun/">sinarcsinx</a></p><p>然后在文档的结尾为变量赋值（网址）</p><h2 id="Markdown-图片"><a href="#Markdown-图片" class="headerlink" title="Markdown 图片"></a>Markdown 图片</h2><p>Markdown 图片语法格式如下：</p><p><strong>input:</strong></p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">![<span class="string">alt 属性文本</span>](<span class="link">图片地址</span>)</span><br><span class="line"></span><br><span class="line">![<span class="string">alt 属性文本</span>](<span class="link">图片地址 &quot;可选标题&quot;</span>)</span><br></pre></td></tr></table></figure><p>也可以像网址那样对图片网址使用变量:</p><p><strong>input:</strong></p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">这个链接用 1 作为网址变量 [<span class="string">crazy</span>][<span class="symbol">1</span>].</span><br><span class="line">然后在文档的结尾为变量赋值（网址）</span><br><span class="line"></span><br><span class="line">[<span class="symbol">1</span>]: <span class="link">图片网址</span></span><br></pre></td></tr></table></figure><h2 id="Markdown-表格"><a href="#Markdown-表格" class="headerlink" title="Markdown 表格"></a>Markdown 表格</h2><p>Markdown 制作表格使用 <code>|</code> 来分隔不同的单元格，使用 <code>-</code> 来分隔表头和其他行。</p><p><strong>input:</strong></p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">|  表头   | 表头  |</span><br><span class="line">|  ----  | ----  |</span><br><span class="line">| 单元格  | 单元格 |</span><br><span class="line">| 单元格  | 单元格 |</span><br></pre></td></tr></table></figure><p><strong>output:</strong></p><table><thead><tr><th>表头</th><th>表头</th></tr></thead><tbody><tr><td>单元格</td><td>单元格</td></tr><tr><td>单元格</td><td>单元格</td></tr></tbody></table><p>可以设置表格的对齐方式：</p><ul><li><code>-:</code> 设置内容和标题栏居右对齐。</li><li><code>:-</code> 设置内容和标题栏居左对齐。</li><li><code>:-:</code> 设置内容和标题栏居中对齐。</li></ul><p><strong>input:</strong></p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">| 左对齐 | 右对齐 | 居中对齐 |</span><br><span class="line">| :-----| ----: | :----: |</span><br><span class="line">| 单元格 | 单元格 | 单元格 |</span><br><span class="line">| 单元格 | 单元格 | 单元格 |</span><br></pre></td></tr></table></figure><p><strong>output:</strong></p><table><thead><tr><th align="left">左对齐</th><th align="right">右对齐</th><th align="center">居中对齐</th></tr></thead><tbody><tr><td align="left">单元格</td><td align="right">单元格</td><td align="center">单元格</td></tr><tr><td align="left">单元格</td><td align="right">单元格</td><td align="center">单元格</td></tr></tbody></table><h2 id="Markdown-高级技巧"><a href="#Markdown-高级技巧" class="headerlink" title="Markdown 高级技巧"></a>Markdown 高级技巧</h2><p><strong>支持的 HTML 元素</strong></p><p>不在 Markdown 涵盖范围之内的标签，都可以直接在文档里面用 HTML 撰写。</p><p>目前支持的 HTML 元素有：<code>&lt;kbd&gt;</code>、<code>&lt;b&gt;</code>、<code>&lt;i&gt;</code>、<code>&lt;em&gt;</code>、<code>&lt;sup&gt;</code>、<code>&lt;sub&gt;</code>、<code>&lt;br&gt;</code>等 ，如：</p><p><strong>input:</strong></p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">使用 <span class="language-xml"><span class="tag">&lt;<span class="name">kbd</span>&gt;</span></span>Ctrl<span class="language-xml"><span class="tag">&lt;/<span class="name">kbd</span>&gt;</span></span>+<span class="language-xml"><span class="tag">&lt;<span class="name">kbd</span>&gt;</span></span>Alt<span class="language-xml"><span class="tag">&lt;/<span class="name">kbd</span>&gt;</span></span>+<span class="language-xml"><span class="tag">&lt;<span class="name">kbd</span>&gt;</span></span>Del<span class="language-xml"><span class="tag">&lt;/<span class="name">kbd</span>&gt;</span></span> 重启电脑</span><br></pre></td></tr></table></figure><p><strong>output:</strong></p><p>使用 <kbd>Ctrl</kbd>+<kbd>Alt</kbd>+<kbd>Del</kbd> 重启电脑</p><p>转义</p><p>Markdown 使用了很多特殊符号来表示特定的意义，如果需要显示特定的符号则需要使用转义字符，Markdown 使用反斜杠转义特殊字符：</p><p><strong>input:</strong></p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="strong">**文本加粗**</span> </span><br><span class="line">\<span class="emphasis">*\*</span> 正常显示星号 \<span class="emphasis">*\*</span></span><br></pre></td></tr></table></figure><p><strong>output:</strong></p><p>文本加粗<br>** 正常显示星号 **</p><p>Markdown 支持以下这些符号前面加上反斜杠来帮助插入普通的符号：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">\   反斜线</span><br><span class="line">`   反引号</span><br><span class="line"><span class="bullet">*</span>   星号</span><br><span class="line">_   下划线</span><br><span class="line">&#123;&#125;  花括号</span><br><span class="line">[]  方括号</span><br><span class="line">()  小括号</span><br><span class="line"><span class="section">#   井字号</span></span><br><span class="line"><span class="bullet">+</span>   加号</span><br><span class="line"><span class="bullet">-</span>   减号</span><br><span class="line">.   英文句点</span><br><span class="line">!   感叹号</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 教程 </tag>
            
            <tag> MarkDown </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
